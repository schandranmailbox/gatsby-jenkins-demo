"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = QueryInspectorControls;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _lodash = require("lodash");

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _blockEditor = require("@wordpress/block-editor");

var _data = require("@wordpress/data");

var _url = require("@wordpress/url");

var _utils = require("../utils");

var _constants = require("../constants");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
var stickyOptions = [{
  label: (0, _i18n.__)('Include'),
  value: ''
}, {
  label: (0, _i18n.__)('Exclude'),
  value: 'exclude'
}, {
  label: (0, _i18n.__)('Only'),
  value: 'only'
}];

var CreateNewPostLink = function CreateNewPostLink(_ref) {
  var type = _ref.type;
  var newPostUrl = (0, _url.addQueryArgs)('post-new.php', {
    post_type: type
  });
  return (0, _element.createElement)("div", {
    className: "wp-block-query__create-new-link"
  }, (0, _element.createInterpolateElement)((0, _i18n.__)('<a>Create a new post</a> for this feed.'), // eslint-disable-next-line jsx-a11y/anchor-has-content
  {
    a: (0, _element.createElement)("a", {
      href: newPostUrl
    })
  }));
};

function QueryInspectorControls(_ref2) {
  var _categories$terms, _tags$terms;

  var _ref2$attributes = _ref2.attributes,
      query = _ref2$attributes.query,
      layout = _ref2$attributes.layout,
      setQuery = _ref2.setQuery,
      setLayout = _ref2.setLayout;
  var order = query.order,
      orderBy = query.orderBy,
      selectedAuthorId = query.author,
      postType = query.postType,
      sticky = query.sticky,
      inherit = query.inherit;

  var _useState = (0, _element.useState)(true),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      showCategories = _useState2[0],
      setShowCategories = _useState2[1];

  var _useState3 = (0, _element.useState)(true),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      showTags = _useState4[0],
      setShowTags = _useState4[1];

  var _useState5 = (0, _element.useState)(postType === 'post'),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      showSticky = _useState6[0],
      setShowSticky = _useState6[1];

  var _useSelect = (0, _data.useSelect)(function (select) {
    var _getPostTypes;

    var _select = select('core'),
        getEntityRecords = _select.getEntityRecords,
        getPostTypes = _select.getPostTypes;

    var termsQuery = {
      per_page: _constants.MAX_FETCHED_TERMS
    };

    var _categories = getEntityRecords('taxonomy', 'category', termsQuery);

    var _tags = getEntityRecords('taxonomy', 'post_tag', termsQuery);

    var excludedPostTypes = ['attachment'];
    var filteredPostTypes = (_getPostTypes = getPostTypes({
      per_page: -1
    })) === null || _getPostTypes === void 0 ? void 0 : _getPostTypes.filter(function (_ref3) {
      var viewable = _ref3.viewable,
          slug = _ref3.slug;
      return viewable && !excludedPostTypes.includes(slug);
    });
    return {
      categories: (0, _utils.getTermsInfo)(_categories),
      tags: (0, _utils.getTermsInfo)(_tags),
      authorList: getEntityRecords('root', 'user', {
        per_page: -1
      }),
      postTypes: filteredPostTypes
    };
  }, []),
      authorList = _useSelect.authorList,
      categories = _useSelect.categories,
      tags = _useSelect.tags,
      postTypes = _useSelect.postTypes;

  var postTypesTaxonomiesMap = (0, _element.useMemo)(function () {
    if (!(postTypes !== null && postTypes !== void 0 && postTypes.length)) return;
    return postTypes.reduce(function (accumulator, type) {
      accumulator[type.slug] = type.taxonomies;
      return accumulator;
    }, {});
  }, [postTypes]);
  (0, _element.useEffect)(function () {
    if (!postTypesTaxonomiesMap) return;
    var postTypeTaxonomies = postTypesTaxonomiesMap[postType];
    setShowCategories(postTypeTaxonomies.includes('category'));
    setShowTags(postTypeTaxonomies.includes('post_tag'));
  }, [postType, postTypesTaxonomiesMap]);
  (0, _element.useEffect)(function () {
    setShowSticky(postType === 'post');
  }, [postType]);
  var postTypesSelectOptions = (0, _element.useMemo)(function () {
    return (postTypes || []).map(function (_ref4) {
      var labels = _ref4.labels,
          slug = _ref4.slug;
      return {
        label: labels.singular_name,
        value: slug
      };
    });
  }, [postTypes]);

  var onPostTypeChange = function onPostTypeChange(newValue) {
    var updateQuery = {
      postType: newValue
    };

    if (!postTypesTaxonomiesMap[newValue].includes('category')) {
      updateQuery.categoryIds = [];
    }

    if (!postTypesTaxonomiesMap[newValue].includes('post_tag')) {
      updateQuery.tagIds = [];
    }

    if (newValue !== 'post') {
      updateQuery.sticky = '';
    }

    setQuery(updateQuery);
  }; // Handles categories and tags changes.


  var onTermsChange = function onTermsChange(terms, queryProperty) {
    return function (newTermValues) {
      var termIds = newTermValues.reduce(function (accumulator, termValue) {
        var _terms$mapByName$term;

        var termId = (termValue === null || termValue === void 0 ? void 0 : termValue.id) || ((_terms$mapByName$term = terms.mapByName[termValue]) === null || _terms$mapByName$term === void 0 ? void 0 : _terms$mapByName$term.id);
        if (termId) accumulator.push(termId);
        return accumulator;
      }, []);
      setQuery((0, _defineProperty2.default)({}, queryProperty, termIds));
    };
  };

  var onCategoriesChange = onTermsChange(categories, 'categoryIds');
  var onTagsChange = onTermsChange(tags, 'tagIds');

  var _useState7 = (0, _element.useState)(query.search),
      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
      querySearch = _useState8[0],
      setQuerySearch = _useState8[1];

  var onChangeDebounced = (0, _element.useCallback)((0, _lodash.debounce)(function () {
    if (query.search !== querySearch) {
      setQuery({
        search: querySearch
      });
    }
  }, 250), [querySearch, query.search]);
  (0, _element.useEffect)(function () {
    onChangeDebounced();
    return onChangeDebounced.cancel;
  }, [querySearch, onChangeDebounced]);
  return (0, _element.createElement)(_blockEditor.InspectorControls, null, (0, _element.createElement)(CreateNewPostLink, {
    type: postType
  }), (0, _element.createElement)(_components.PanelBody, {
    title: (0, _i18n.__)('Settings')
  }, (0, _element.createElement)(_components.ToggleControl, {
    label: (0, _i18n.__)('Inherit query from URL'),
    help: (0, _i18n.__)('Disable the option to customize the query arguments. Leave enabled to inherit the global query depending on the URL.'),
    checked: !!inherit,
    onChange: function onChange(value) {
      return setQuery({
        inherit: !!value
      });
    }
  }), !inherit && (0, _element.createElement)(_components.SelectControl, {
    options: postTypesSelectOptions,
    value: postType,
    label: (0, _i18n.__)('Post Type'),
    onChange: onPostTypeChange
  }), (layout === null || layout === void 0 ? void 0 : layout.type) === 'flex' && (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_components.RangeControl, {
    label: (0, _i18n.__)('Columns'),
    value: layout.columns,
    onChange: function onChange(value) {
      return setLayout({
        columns: value
      });
    },
    min: 2,
    max: Math.max(6, layout.columns)
  }), layout.columns > 6 && (0, _element.createElement)(_components.Notice, {
    status: "warning",
    isDismissible: false
  }, (0, _i18n.__)('This column count exceeds the recommended amount and may cause visual breakage.'))), !inherit && (0, _element.createElement)(_components.QueryControls, (0, _extends2.default)({
    order: order,
    orderBy: orderBy
  }, {
    onOrderChange: function onOrderChange(value) {
      return setQuery({
        order: value
      });
    },
    onOrderByChange: function onOrderByChange(value) {
      return setQuery({
        orderBy: value
      });
    }
  })), showSticky && (0, _element.createElement)(_components.SelectControl, {
    label: (0, _i18n.__)('Sticky posts'),
    options: stickyOptions,
    value: sticky,
    onChange: function onChange(value) {
      return setQuery({
        sticky: value
      });
    }
  })), !inherit && (0, _element.createElement)(_components.PanelBody, {
    title: (0, _i18n.__)('Filters')
  }, showCategories && (categories === null || categories === void 0 ? void 0 : (_categories$terms = categories.terms) === null || _categories$terms === void 0 ? void 0 : _categories$terms.length) > 0 && (0, _element.createElement)(_components.FormTokenField, {
    label: (0, _i18n.__)('Categories'),
    value: (query.categoryIds || []).map(function (categoryId) {
      return {
        id: categoryId,
        value: categories.mapById[categoryId].name
      };
    }),
    suggestions: categories.names,
    onChange: onCategoriesChange
  }), showTags && (tags === null || tags === void 0 ? void 0 : (_tags$terms = tags.terms) === null || _tags$terms === void 0 ? void 0 : _tags$terms.length) > 0 && (0, _element.createElement)(_components.FormTokenField, {
    label: (0, _i18n.__)('Tags'),
    value: (query.tagIds || []).map(function (tagId) {
      return {
        id: tagId,
        value: tags.mapById[tagId].name
      };
    }),
    suggestions: tags.names,
    onChange: onTagsChange
  }), (0, _element.createElement)(_components.QueryControls, (0, _extends2.default)({
    selectedAuthorId: selectedAuthorId,
    authorList: authorList
  }, {
    onAuthorChange: function onAuthorChange(value) {
      return setQuery({
        author: value !== '' ? +value : undefined
      });
    }
  })), (0, _element.createElement)(_components.TextControl, {
    label: (0, _i18n.__)('Keyword'),
    value: querySearch,
    onChange: setQuerySearch
  })));
}
//# sourceMappingURL=query-inspector-controls.js.map