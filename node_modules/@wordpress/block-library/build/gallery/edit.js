"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _lodash = require("lodash");

var _compose = require("@wordpress/compose");

var _components = require("@wordpress/components");

var _blockEditor = require("@wordpress/block-editor");

var _i18n = require("@wordpress/i18n");

var _blob = require("@wordpress/blob");

var _data = require("@wordpress/data");

var _viewport = require("@wordpress/viewport");

var _primitives = require("@wordpress/primitives");

var _sharedIcon = require("./shared-icon");

var _shared = require("./shared");

var _gallery = _interopRequireDefault(require("./gallery"));

var _constants = require("./constants");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var MAX_COLUMNS = 8;
var linkOptions = [{
  value: _constants.LINK_DESTINATION_ATTACHMENT,
  label: (0, _i18n.__)('Attachment Page')
}, {
  value: _constants.LINK_DESTINATION_MEDIA,
  label: (0, _i18n.__)('Media File')
}, {
  value: _constants.LINK_DESTINATION_NONE,
  label: (0, _i18n.__)('None')
}];
var ALLOWED_MEDIA_TYPES = ['image'];

var PLACEHOLDER_TEXT = _element.Platform.select({
  web: (0, _i18n.__)('Drag images, upload new ones or select files from your library.'),
  native: (0, _i18n.__)('ADD MEDIA')
});

var MOBILE_CONTROL_PROPS_RANGE_CONTROL = _element.Platform.select({
  web: {},
  native: {
    type: 'stepper'
  }
});

function GalleryEdit(props) {
  var attributes = props.attributes,
      isSelected = props.isSelected,
      noticeUI = props.noticeUI,
      noticeOperations = props.noticeOperations,
      mediaUpload = props.mediaUpload,
      imageSizes = props.imageSizes,
      resizedImages = props.resizedImages,
      onFocus = props.onFocus;
  var _attributes$columns = attributes.columns,
      columns = _attributes$columns === void 0 ? (0, _shared.defaultColumnsNumber)(attributes) : _attributes$columns,
      imageCrop = attributes.imageCrop,
      images = attributes.images,
      linkTo = attributes.linkTo,
      sizeSlug = attributes.sizeSlug;

  var _useState = (0, _element.useState)(),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      selectedImage = _useState2[0],
      setSelectedImage = _useState2[1];

  var _useState3 = (0, _element.useState)(),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      attachmentCaptions = _useState4[0],
      setAttachmentCaptions = _useState4[1];

  var _useDispatch = (0, _data.useDispatch)('core/block-editor'),
      __unstableMarkNextChangeAsNotPersistent = _useDispatch.__unstableMarkNextChangeAsNotPersistent;

  function setAttributes(newAttrs) {
    if (newAttrs.ids) {
      throw new Error('The "ids" attribute should not be changed directly. It is managed automatically when "images" attribute changes');
    }

    if (newAttrs.images) {
      newAttrs = _objectSpread(_objectSpread({}, newAttrs), {}, {
        // Unlike images[ n ].id which is a string, always ensure the
        // ids array contains numbers as per its attribute type.
        ids: (0, _lodash.map)(newAttrs.images, function (_ref) {
          var id = _ref.id;
          return parseInt(id, 10);
        })
      });
    }

    props.setAttributes(newAttrs);
  }

  function onSelectImage(index) {
    return function () {
      setSelectedImage(index);
    };
  }

  function onDeselectImage() {
    return function () {
      setSelectedImage();
    };
  }

  function onMove(oldIndex, newIndex) {
    var newImages = (0, _toConsumableArray2.default)(images);
    newImages.splice(newIndex, 1, images[oldIndex]);
    newImages.splice(oldIndex, 1, images[newIndex]);
    setSelectedImage(newIndex);
    setAttributes({
      images: newImages
    });
  }

  function onMoveForward(oldIndex) {
    return function () {
      if (oldIndex === images.length - 1) {
        return;
      }

      onMove(oldIndex, oldIndex + 1);
    };
  }

  function onMoveBackward(oldIndex) {
    return function () {
      if (oldIndex === 0) {
        return;
      }

      onMove(oldIndex, oldIndex - 1);
    };
  }

  function onRemoveImage(index) {
    return function () {
      var newImages = (0, _lodash.filter)(images, function (img, i) {
        return index !== i;
      });
      setSelectedImage();
      setAttributes({
        images: newImages,
        columns: attributes.columns ? Math.min(newImages.length, attributes.columns) : attributes.columns
      });
    };
  }

  function selectCaption(newImage) {
    // The image id in both the images and attachmentCaptions arrays is a
    // string, so ensure comparison works correctly by converting the
    // newImage.id to a string.
    var newImageId = (0, _lodash.toString)(newImage.id);
    var currentImage = (0, _lodash.find)(images, {
      id: newImageId
    });
    var currentImageCaption = currentImage ? currentImage.caption : newImage.caption;

    if (!attachmentCaptions) {
      return currentImageCaption;
    }

    var attachment = (0, _lodash.find)(attachmentCaptions, {
      id: newImageId
    }); // if the attachment caption is updated

    if (attachment && attachment.caption !== newImage.caption) {
      return newImage.caption;
    }

    return currentImageCaption;
  }

  function onSelectImages(newImages) {
    setAttachmentCaptions(newImages.map(function (newImage) {
      return {
        // Store the attachmentCaption id as a string for consistency
        // with the type of the id in the images attribute.
        id: (0, _lodash.toString)(newImage.id),
        caption: newImage.caption
      };
    }));
    setAttributes({
      images: newImages.map(function (newImage) {
        return _objectSpread(_objectSpread({}, (0, _shared.pickRelevantMediaFiles)(newImage, sizeSlug)), {}, {
          caption: selectCaption(newImage, images, attachmentCaptions),
          // The id value is stored in a data attribute, so when the
          // block is parsed it's converted to a string. Converting
          // to a string here ensures it's type is consistent.
          id: (0, _lodash.toString)(newImage.id)
        });
      }),
      columns: attributes.columns ? Math.min(newImages.length, attributes.columns) : attributes.columns
    });
  }

  function onUploadError(message) {
    noticeOperations.removeAllNotices();
    noticeOperations.createErrorNotice(message);
  }

  function setLinkTo(value) {
    setAttributes({
      linkTo: value
    });
  }

  function setColumnsNumber(value) {
    setAttributes({
      columns: value
    });
  }

  function toggleImageCrop() {
    setAttributes({
      imageCrop: !imageCrop
    });
  }

  function getImageCropHelp(checked) {
    return checked ? (0, _i18n.__)('Thumbnails are cropped to align.') : (0, _i18n.__)('Thumbnails are not cropped.');
  }

  function onFocusGalleryCaption() {
    setSelectedImage();
  }

  function setImageAttributes(index, newAttributes) {
    if (!images[index]) {
      return;
    }

    setAttributes({
      images: [].concat((0, _toConsumableArray2.default)(images.slice(0, index)), [_objectSpread(_objectSpread({}, images[index]), newAttributes)], (0, _toConsumableArray2.default)(images.slice(index + 1)))
    });
  }

  function getImagesSizeOptions() {
    return (0, _lodash.map)((0, _lodash.filter)(imageSizes, function (_ref2) {
      var slug = _ref2.slug;
      return (0, _lodash.some)(resizedImages, function (sizes) {
        return sizes[slug];
      });
    }), function (_ref3) {
      var name = _ref3.name,
          slug = _ref3.slug;
      return {
        value: slug,
        label: name
      };
    });
  }

  function updateImagesSize(newSizeSlug) {
    var updatedImages = (0, _lodash.map)(images, function (image) {
      if (!image.id) {
        return image;
      }

      var url = (0, _lodash.get)(resizedImages, [parseInt(image.id, 10), newSizeSlug]);
      return _objectSpread(_objectSpread({}, image), url && {
        url: url
      });
    });
    setAttributes({
      images: updatedImages,
      sizeSlug: newSizeSlug
    });
  }

  (0, _element.useEffect)(function () {
    if (_element.Platform.OS === 'web' && images && images.length > 0 && (0, _lodash.every)(images, function (_ref4) {
      var url = _ref4.url;
      return (0, _blob.isBlobURL)(url);
    })) {
      var filesList = (0, _lodash.map)(images, function (_ref5) {
        var url = _ref5.url;
        return (0, _blob.getBlobByURL)(url);
      });
      (0, _lodash.forEach)(images, function (_ref6) {
        var url = _ref6.url;
        return (0, _blob.revokeBlobURL)(url);
      });
      mediaUpload({
        filesList: filesList,
        onFileChange: onSelectImages,
        allowedTypes: ['image']
      });
    }
  }, []);
  (0, _element.useEffect)(function () {
    // Deselect images when deselecting the block
    if (!isSelected) {
      setSelectedImage();
    }
  }, [isSelected]);
  (0, _element.useEffect)(function () {
    // linkTo attribute must be saved so blocks don't break when changing
    // image_default_link_type in options.php
    if (!linkTo) {
      var _window, _window$wp, _window$wp$media, _window$wp$media$view, _window$wp$media$view2, _window$wp$media$view3;

      __unstableMarkNextChangeAsNotPersistent();

      setAttributes({
        linkTo: ((_window = window) === null || _window === void 0 ? void 0 : (_window$wp = _window.wp) === null || _window$wp === void 0 ? void 0 : (_window$wp$media = _window$wp.media) === null || _window$wp$media === void 0 ? void 0 : (_window$wp$media$view = _window$wp$media.view) === null || _window$wp$media$view === void 0 ? void 0 : (_window$wp$media$view2 = _window$wp$media$view.settings) === null || _window$wp$media$view2 === void 0 ? void 0 : (_window$wp$media$view3 = _window$wp$media$view2.defaultProps) === null || _window$wp$media$view3 === void 0 ? void 0 : _window$wp$media$view3.link) || _constants.LINK_DESTINATION_NONE
      });
    }
  }, [linkTo]);
  var hasImages = !!images.length;
  var mediaPlaceholder = (0, _element.createElement)(_blockEditor.MediaPlaceholder, {
    addToGallery: hasImages,
    isAppender: hasImages,
    disableMediaButtons: hasImages && !isSelected,
    icon: !hasImages && _sharedIcon.sharedIcon,
    labels: {
      title: !hasImages && (0, _i18n.__)('Gallery'),
      instructions: !hasImages && PLACEHOLDER_TEXT
    },
    onSelect: onSelectImages,
    accept: "image/*",
    allowedTypes: ALLOWED_MEDIA_TYPES,
    multiple: true,
    value: images,
    onError: onUploadError,
    notices: hasImages ? undefined : noticeUI,
    onFocus: onFocus
  });
  var blockProps = (0, _blockEditor.useBlockProps)();

  if (!hasImages) {
    return (0, _element.createElement)(_primitives.View, blockProps, mediaPlaceholder);
  }

  var imageSizeOptions = getImagesSizeOptions();
  var shouldShowSizeOptions = hasImages && !(0, _lodash.isEmpty)(imageSizeOptions);
  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_blockEditor.InspectorControls, null, (0, _element.createElement)(_components.PanelBody, {
    title: (0, _i18n.__)('Gallery settings')
  }, images.length > 1 && (0, _element.createElement)(_components.RangeControl, (0, _extends2.default)({
    label: (0, _i18n.__)('Columns'),
    value: columns,
    onChange: setColumnsNumber,
    min: 1,
    max: Math.min(MAX_COLUMNS, images.length)
  }, MOBILE_CONTROL_PROPS_RANGE_CONTROL, {
    required: true
  })), (0, _element.createElement)(_components.ToggleControl, {
    label: (0, _i18n.__)('Crop images'),
    checked: !!imageCrop,
    onChange: toggleImageCrop,
    help: getImageCropHelp
  }), (0, _element.createElement)(_components.SelectControl, {
    label: (0, _i18n.__)('Link to'),
    value: linkTo,
    onChange: setLinkTo,
    options: linkOptions
  }), shouldShowSizeOptions && (0, _element.createElement)(_components.SelectControl, {
    label: (0, _i18n.__)('Image size'),
    value: sizeSlug,
    options: imageSizeOptions,
    onChange: updateImagesSize
  }))), noticeUI, (0, _element.createElement)(_gallery.default, (0, _extends2.default)({}, props, {
    selectedImage: selectedImage,
    mediaPlaceholder: mediaPlaceholder,
    onMoveBackward: onMoveBackward,
    onMoveForward: onMoveForward,
    onRemoveImage: onRemoveImage,
    onSelectImage: onSelectImage,
    onDeselectImage: onDeselectImage,
    onSetImageAttributes: setImageAttributes,
    onFocusGalleryCaption: onFocusGalleryCaption,
    blockProps: blockProps
  })));
}

var _default = (0, _compose.compose)([(0, _data.withSelect)(function (select, _ref7) {
  var ids = _ref7.attributes.ids,
      isSelected = _ref7.isSelected;

  var _select = select('core'),
      getMedia = _select.getMedia;

  var _select2 = select('core/block-editor'),
      getSettings = _select2.getSettings;

  var _getSettings = getSettings(),
      imageSizes = _getSettings.imageSizes,
      mediaUpload = _getSettings.mediaUpload;

  var resizedImages = (0, _element.useMemo)(function () {
    if (isSelected) {
      return (0, _lodash.reduce)(ids, function (currentResizedImages, id) {
        if (!id) {
          return currentResizedImages;
        }

        var image = getMedia(id);
        var sizes = (0, _lodash.reduce)(imageSizes, function (currentSizes, size) {
          var defaultUrl = (0, _lodash.get)(image, ['sizes', size.slug, 'url']);
          var mediaDetailsUrl = (0, _lodash.get)(image, ['media_details', 'sizes', size.slug, 'source_url']);
          return _objectSpread(_objectSpread({}, currentSizes), {}, (0, _defineProperty2.default)({}, size.slug, defaultUrl || mediaDetailsUrl));
        }, {});
        return _objectSpread(_objectSpread({}, currentResizedImages), {}, (0, _defineProperty2.default)({}, parseInt(id, 10), sizes));
      }, {});
    }

    return {};
  }, [isSelected, ids, imageSizes]);
  return {
    imageSizes: imageSizes,
    mediaUpload: mediaUpload,
    resizedImages: resizedImages
  };
}), _components.withNotices, (0, _viewport.withViewportMatch)({
  isNarrow: '< small'
})])(GalleryEdit);

exports.default = _default;
//# sourceMappingURL=edit.js.map