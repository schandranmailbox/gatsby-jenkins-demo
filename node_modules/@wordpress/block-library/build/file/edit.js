"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classnames = _interopRequireDefault(require("classnames"));

var _blob = require("@wordpress/blob");

var _components = require("@wordpress/components");

var _data = require("@wordpress/data");

var _blockEditor = require("@wordpress/block-editor");

var _compose = require("@wordpress/compose");

var _i18n = require("@wordpress/i18n");

var _icons = require("@wordpress/icons");

var _inspector = _interopRequireDefault(require("./inspector"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function ClipboardToolbarButton(_ref) {
  var text = _ref.text,
      disabled = _ref.disabled;
  var ref = (0, _element.useRef)();
  var hasCopied = (0, _compose.useCopyOnClick)(ref, text);
  return (0, _element.createElement)(_components.ToolbarButton, {
    className: "components-clipboard-toolbar-button",
    ref: ref,
    disabled: disabled
  }, hasCopied ? (0, _i18n.__)('Copied!') : (0, _i18n.__)('Copy URL'));
}

function FileEdit(_ref2) {
  var attributes = _ref2.attributes,
      setAttributes = _ref2.setAttributes,
      noticeUI = _ref2.noticeUI,
      noticeOperations = _ref2.noticeOperations;
  var id = attributes.id,
      fileName = attributes.fileName,
      href = attributes.href,
      textLinkHref = attributes.textLinkHref,
      textLinkTarget = attributes.textLinkTarget,
      showDownloadButton = attributes.showDownloadButton,
      downloadButtonText = attributes.downloadButtonText;

  var _useState = (0, _element.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      hasError = _useState2[0],
      setHasError = _useState2[1];

  var _useSelect = (0, _data.useSelect)(function (select) {
    return {
      media: id === undefined ? undefined : select('core').getMedia(id),
      mediaUpload: select('core/block-editor').getSettings().mediaUpload
    };
  }, [id]),
      media = _useSelect.media,
      mediaUpload = _useSelect.mediaUpload;

  (0, _element.useEffect)(function () {
    // Upload a file drag-and-dropped into the editor
    if ((0, _blob.isBlobURL)(href)) {
      var file = (0, _blob.getBlobByURL)(href);
      mediaUpload({
        filesList: [file],
        onFileChange: function onFileChange(_ref3) {
          var _ref4 = (0, _slicedToArray2.default)(_ref3, 1),
              newMedia = _ref4[0];

          return onSelectFile(newMedia);
        },
        onError: function onError(message) {
          setHasError(true);
          noticeOperations.createErrorNotice(message);
        }
      });
      (0, _blob.revokeBlobURL)(href);
    }

    if (downloadButtonText === undefined) {
      setAttributes({
        downloadButtonText: (0, _i18n._x)('Download', 'button label')
      });
    }
  }, []);

  function onSelectFile(newMedia) {
    if (newMedia && newMedia.url) {
      setHasError(false);
      setAttributes({
        href: newMedia.url,
        fileName: newMedia.title,
        textLinkHref: newMedia.url,
        id: newMedia.id
      });
    }
  }

  function onUploadError(message) {
    setHasError(true);
    noticeOperations.removeAllNotices();
    noticeOperations.createErrorNotice(message);
  }

  function changeLinkDestinationOption(newHref) {
    // Choose Media File or Attachment Page (when file is in Media Library)
    setAttributes({
      textLinkHref: newHref
    });
  }

  function changeOpenInNewWindow(newValue) {
    setAttributes({
      textLinkTarget: newValue ? '_blank' : false
    });
  }

  function changeShowDownloadButton(newValue) {
    setAttributes({
      showDownloadButton: newValue
    });
  }

  var attachmentPage = media && media.link;
  var blockProps = (0, _blockEditor.useBlockProps)({
    className: (0, _classnames.default)((0, _blob.isBlobURL)(href) && (0, _components.__unstableGetAnimateClassName)({
      type: 'loading'
    }), {
      'is-transient': (0, _blob.isBlobURL)(href)
    })
  });

  if (!href || hasError) {
    return (0, _element.createElement)("div", blockProps, (0, _element.createElement)(_blockEditor.MediaPlaceholder, {
      icon: (0, _element.createElement)(_blockEditor.BlockIcon, {
        icon: _icons.file
      }),
      labels: {
        title: (0, _i18n.__)('File'),
        instructions: (0, _i18n.__)('Upload a file or pick one from your media library.')
      },
      onSelect: onSelectFile,
      notices: noticeUI,
      onError: onUploadError,
      accept: "*"
    }));
  }

  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_inspector.default, (0, _extends2.default)({
    hrefs: {
      href: href,
      textLinkHref: textLinkHref,
      attachmentPage: attachmentPage
    }
  }, {
    openInNewWindow: !!textLinkTarget,
    showDownloadButton: showDownloadButton,
    changeLinkDestinationOption: changeLinkDestinationOption,
    changeOpenInNewWindow: changeOpenInNewWindow,
    changeShowDownloadButton: changeShowDownloadButton
  })), (0, _element.createElement)(_blockEditor.BlockControls, null, (0, _element.createElement)(_components.ToolbarGroup, null, (0, _element.createElement)(_blockEditor.MediaReplaceFlow, {
    mediaId: id,
    mediaURL: href,
    accept: "*",
    onSelect: onSelectFile,
    onError: onUploadError
  }), (0, _element.createElement)(ClipboardToolbarButton, {
    text: href,
    disabled: (0, _blob.isBlobURL)(href)
  }))), (0, _element.createElement)("div", blockProps, (0, _element.createElement)("div", {
    className: 'wp-block-file__content-wrapper'
  }, (0, _element.createElement)("div", {
    className: "wp-block-file__textlink"
  }, (0, _element.createElement)(_blockEditor.RichText, {
    tagName: "div" // must be block-level or else cursor disappears
    ,
    value: fileName,
    placeholder: (0, _i18n.__)('Write file name…'),
    withoutInteractiveFormatting: true,
    onChange: function onChange(text) {
      return setAttributes({
        fileName: text
      });
    }
  })), showDownloadButton && (0, _element.createElement)("div", {
    className: 'wp-block-file__button-richtext-wrapper'
  }, (0, _element.createElement)(_blockEditor.RichText, {
    tagName: "div" // must be block-level or else cursor disappears
    ,
    "aria-label": (0, _i18n.__)('Download button text'),
    className: 'wp-block-file__button',
    value: downloadButtonText,
    withoutInteractiveFormatting: true,
    placeholder: (0, _i18n.__)('Add text…'),
    onChange: function onChange(text) {
      return setAttributes({
        downloadButtonText: text
      });
    }
  })))));
}

var _default = (0, _components.withNotices)(FileEdit);

exports.default = _default;
//# sourceMappingURL=edit.js.map