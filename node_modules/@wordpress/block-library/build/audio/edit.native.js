"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _reactNative = require("react-native");

var _lodash = require("lodash");

var _primitives = require("@wordpress/primitives");

var _components = require("@wordpress/components");

var _blockEditor = require("@wordpress/block-editor");

var _i18n = require("@wordpress/i18n");

var _icons = require("@wordpress/icons");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */
var ALLOWED_MEDIA_TYPES = ['audio'];

function AudioEdit(_ref) {
  var attributes = _ref.attributes,
      noticeOperations = _ref.noticeOperations,
      setAttributes = _ref.setAttributes,
      isSelected = _ref.isSelected,
      noticeUI = _ref.noticeUI,
      insertBlocksAfter = _ref.insertBlocksAfter,
      onFocus = _ref.onFocus,
      onBlur = _ref.onBlur,
      clientId = _ref.clientId;
  var id = attributes.id,
      autoplay = attributes.autoplay,
      loop = attributes.loop,
      preload = attributes.preload,
      src = attributes.src;

  var _useState = (0, _element.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isCaptionSelected = _useState2[0],
      setIsCaptionSelected = _useState2[1];

  var onFileChange = function onFileChange(_ref2) {
    var mediaId = _ref2.mediaId,
        mediaUrl = _ref2.mediaUrl;
    setAttributes({
      id: mediaId,
      src: mediaUrl
    });
  };

  var onError = function onError() {
    // TODO: Set up error state
    onUploadError((0, _i18n.__)('Error'));
  };

  function toggleAttribute(attribute) {
    return function (newValue) {
      setAttributes((0, _defineProperty2.default)({}, attribute, newValue));
    };
  }

  function onSelectURL() {// TODO: Set up add audio from URL flow
  }

  function onUploadError(message) {
    noticeOperations.removeAllNotices();
    noticeOperations.createErrorNotice(message);
  } // const { setAttributes, isSelected, noticeUI } = this.props;


  function onSelectAudio(media) {
    if (!media || !media.url) {
      // in this case there was an error and we should continue in the editing state
      // previous attributes should be removed because they may be temporary blob urls
      setAttributes({
        src: undefined,
        id: undefined
      });
      return;
    } // sets the block's attribute and updates the edit component from the
    // selected media, then switches off the editing UI


    setAttributes({
      src: media.url,
      id: media.id
    });
  }

  function onAudioPress() {
    setIsCaptionSelected(false);
  }

  function onFocusCaption() {
    if (!isCaptionSelected) {
      setIsCaptionSelected(true);
    }
  }

  if (!src) {
    return (0, _element.createElement)(_primitives.View, null, (0, _element.createElement)(_blockEditor.MediaPlaceholder, {
      icon: (0, _element.createElement)(_blockEditor.BlockIcon, {
        icon: _icons.audio
      }),
      onSelect: onSelectAudio,
      onSelectURL: onSelectURL,
      accept: "audio/*",
      allowedTypes: ALLOWED_MEDIA_TYPES,
      value: attributes,
      notices: noticeUI,
      onError: onUploadError,
      onFocus: onFocus
    }));
  }

  function getBlockControls(open) {
    return (0, _element.createElement)(_blockEditor.BlockControls, null, (0, _element.createElement)(_components.ToolbarGroup, null, (0, _element.createElement)(_components.ToolbarButton, {
      title: (0, _i18n.__)('Replace audio'),
      icon: _icons.replace,
      onClick: open
    })));
  }

  function getBlockUI(open, getMediaOptions) {
    return (0, _element.createElement)(_blockEditor.MediaUploadProgress, {
      mediaId: id,
      onUpdateMediaProgress: this.updateMediaProgress,
      onFinishMediaUploadWithSuccess: onFileChange,
      onFinishMediaUploadWithFailure: onError,
      onMediaUploadStateReset: onFileChange,
      renderContent: function renderContent(_ref3) {
        var isUploadInProgress = _ref3.isUploadInProgress,
            isUploadFailed = _ref3.isUploadFailed;
        return (0, _element.createElement)(_primitives.View, null, !isCaptionSelected && getBlockControls(open), getMediaOptions(), (0, _element.createElement)(_reactNative.Text, null, "\u23EF Audio Player goes here.", ' ', isUploadInProgress && 'Uploading...', isUploadFailed && 'ERROR'));
      }
    });
  }

  return (0, _element.createElement)(_reactNative.TouchableWithoutFeedback, {
    accessible: !isSelected,
    onPress: onAudioPress,
    disabled: !isSelected
  }, (0, _element.createElement)(_primitives.View, null, (0, _element.createElement)(_blockEditor.InspectorControls, null, (0, _element.createElement)(_components.PanelBody, {
    title: (0, _i18n.__)('Audio settings')
  }, (0, _element.createElement)(_components.ToggleControl, {
    label: (0, _i18n.__)('Autoplay'),
    onChange: toggleAttribute('autoplay'),
    checked: autoplay
  }), (0, _element.createElement)(_components.ToggleControl, {
    label: (0, _i18n.__)('Loop'),
    onChange: toggleAttribute('loop'),
    checked: loop
  }), (0, _element.createElement)(_components.SelectControl, {
    label: (0, _i18n.__)('Preload'),
    value: preload || '' // `undefined` is required for the preload attribute to be unset.
    ,
    onChange: function onChange(value) {
      return setAttributes({
        preload: value || undefined
      });
    },
    options: [{
      value: '',
      label: (0, _i18n.__)('Browser default')
    }, {
      value: 'auto',
      label: (0, _i18n.__)('Auto')
    }, {
      value: 'metadata',
      label: (0, _i18n.__)('Metadata')
    }, {
      value: 'none',
      label: (0, _i18n.__)('None')
    }]
  }))), (0, _element.createElement)(_blockEditor.MediaUpload, {
    allowedTypes: ALLOWED_MEDIA_TYPES,
    isReplacingMedia: true,
    onSelect: onSelectAudio,
    render: function render(_ref4) {
      var open = _ref4.open,
          getMediaOptions = _ref4.getMediaOptions;
      return getBlockUI(open, getMediaOptions);
    }
  }), (0, _element.createElement)(_blockEditor.BlockCaption, {
    accessible: true,
    accessibilityLabelCreator: function accessibilityLabelCreator(caption) {
      return (0, _lodash.isEmpty)(caption) ?
      /* translators: accessibility text. Empty Audio caption. */
      (0, _i18n.__)('Audio caption. Empty') : (0, _i18n.sprintf)(
      /* translators: accessibility text. %s: Audio caption. */
      (0, _i18n.__)('Audio caption. %s'), caption);
    },
    clientId: clientId,
    isSelected: isCaptionSelected,
    onFocus: onFocusCaption,
    onBlur: onBlur,
    insertBlocksAfter: insertBlocksAfter
  })));
}

var _default = (0, _components.withNotices)(AudioEdit);

exports.default = _default;
//# sourceMappingURL=edit.native.js.map