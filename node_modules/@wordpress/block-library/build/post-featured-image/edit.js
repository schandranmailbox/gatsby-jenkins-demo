"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PostFeaturedImageEdit;

var _element = require("@wordpress/element");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _coreData = require("@wordpress/core-data");

var _data = require("@wordpress/data");

var _components = require("@wordpress/components");

var _blockEditor = require("@wordpress/block-editor");

var _i18n = require("@wordpress/i18n");

var _icons = require("@wordpress/icons");

/**
 * WordPress dependencies
 */
var ALLOWED_MEDIA_TYPES = ['image'];
var placeholderChip = (0, _element.createElement)("div", {
  className: "post-featured-image_placeholder"
}, (0, _element.createElement)(_components.Icon, {
  icon: _icons.postFeaturedImage
}), (0, _element.createElement)("p", null, " ", (0, _i18n.__)('Featured Image')));

function PostFeaturedImageDisplay(_ref) {
  var isLink = _ref.attributes.isLink,
      setAttributes = _ref.setAttributes,
      _ref$context = _ref.context,
      postId = _ref$context.postId,
      postType = _ref$context.postType,
      noticeUI = _ref.noticeUI,
      noticeOperations = _ref.noticeOperations;

  var _useEntityProp = (0, _coreData.useEntityProp)('postType', postType, 'featured_media', postId),
      _useEntityProp2 = (0, _slicedToArray2.default)(_useEntityProp, 2),
      featuredImage = _useEntityProp2[0],
      setFeaturedImage = _useEntityProp2[1];

  var media = (0, _data.useSelect)(function (select) {
    return featuredImage && select('core').getMedia(featuredImage);
  }, [featuredImage]);

  var onSelectImage = function onSelectImage(value) {
    if (value !== null && value !== void 0 && value.id) {
      setFeaturedImage(value.id);
    }
  };

  function onUploadError(message) {
    noticeOperations.removeAllNotices();
    noticeOperations.createErrorNotice(message);
  }

  var image;

  if (!featuredImage) {
    image = (0, _element.createElement)(_blockEditor.MediaPlaceholder, {
      icon: (0, _element.createElement)(_blockEditor.BlockIcon, {
        icon: _icons.postFeaturedImage
      }),
      onSelect: onSelectImage,
      notices: noticeUI,
      onError: onUploadError,
      accept: "image/*",
      allowedTypes: ALLOWED_MEDIA_TYPES,
      labels: {
        title: (0, _i18n.__)('Featured image'),
        instructions: (0, _i18n.__)('Upload a media file or pick one from your media library.')
      }
    });
  } else {
    // We have a Featured image so show a Placeholder if is loading.
    image = !media ? placeholderChip : (0, _element.createElement)("img", {
      src: media.source_url,
      alt: media.alt_text || (0, _i18n.__)('Featured image')
    });
  }

  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_blockEditor.InspectorControls, null, (0, _element.createElement)(_components.PanelBody, {
    title: (0, _i18n.__)('Link settings')
  }, (0, _element.createElement)(_components.ToggleControl, {
    label: (0, _i18n.sprintf)( // translators: %s: Name of the post type e.g: "post".
    (0, _i18n.__)('Link to %s'), postType),
    onChange: function onChange() {
      return setAttributes({
        isLink: !isLink
      });
    },
    checked: isLink
  }))), (0, _element.createElement)(_blockEditor.BlockControls, null, !!media && (0, _element.createElement)(_blockEditor.MediaReplaceFlow, {
    mediaId: featuredImage,
    mediaURL: media.source_url,
    allowedTypes: ALLOWED_MEDIA_TYPES,
    accept: "image/*",
    onSelect: onSelectImage,
    onError: onUploadError
  })), (0, _element.createElement)("div", (0, _blockEditor.useBlockProps)(), image));
}

var PostFeaturedImageWithNotices = (0, _components.withNotices)(PostFeaturedImageDisplay);

function PostFeaturedImageEdit(props) {
  var _props$context;

  if (!((_props$context = props.context) !== null && _props$context !== void 0 && _props$context.postId)) {
    return placeholderChip;
  }

  return (0, _element.createElement)(PostFeaturedImageWithNotices, props);
}
//# sourceMappingURL=edit.js.map