"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ReusableBlockEdit;

var _element = require("@wordpress/element");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _reactNative = require("react-native");

var _coreData = require("@wordpress/core-data");

var _components = require("@wordpress/components");

var _data = require("@wordpress/data");

var _i18n = require("@wordpress/i18n");

var _blockEditor = require("@wordpress/block-editor");

var _compose = require("@wordpress/compose");

var _icons = require("@wordpress/icons");

var _reactNativeBridge = require("@wordpress/react-native-bridge");

var _reusableBlocks = require("@wordpress/reusable-blocks");

var _hooks = require("@wordpress/hooks");

var _editor = _interopRequireDefault(require("./editor.scss"));

var _editTitle = _interopRequireDefault(require("./edit-title"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function ReusableBlockEdit(_ref) {
  var ref = _ref.attributes.ref,
      clientId = _ref.clientId,
      isSelected = _ref.isSelected;
  var recordArgs = ['postType', 'wp_block', ref];

  var _useState = (0, _element.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      showHelp = _useState2[0],
      setShowHelp = _useState2[1];

  var _useState3 = (0, _element.useState)(false),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      sendFallbackMessage = _useState4[0],
      setSendFallbackMessage = _useState4[1];

  var _useState5 = (0, _element.useState)(false),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      sendButtonPressMessage = _useState6[0],
      setSendButtonPressMessage = _useState6[1];

  var timeoutId = (0, _element.useRef)();
  var infoTextStyle = (0, _compose.usePreferredColorSchemeStyle)(_editor.default.infoText, _editor.default.infoTextDark);
  var infoTitleStyle = (0, _compose.usePreferredColorSchemeStyle)(_editor.default.infoTitle, _editor.default.infoTitleDark);
  var infoSheetIconStyle = (0, _compose.usePreferredColorSchemeStyle)(_editor.default.infoSheetIcon, _editor.default.infoSheetIconDark);
  var actionButtonStyle = (0, _compose.usePreferredColorSchemeStyle)(_editor.default.actionButton, _editor.default.actionButtonDark);
  var spinnerStyle = (0, _compose.usePreferredColorSchemeStyle)(_editor.default.spinner, _editor.default.spinnerDark);

  var _useSelect = (0, _data.useSelect)(function (select) {
    var _select2, _select3;

    var _select = select('core/block-editor'),
        getSettings = _select.getSettings;

    return {
      reusableBlock: (_select2 = select('core')).getEditedEntityRecord.apply(_select2, recordArgs),
      hasResolved: select('core').hasFinishedResolution('getEditedEntityRecord', recordArgs),
      isSaving: (_select3 = select('core')).isSavingEntityRecord.apply(_select3, recordArgs),
      canUserUpdate: select('core').canUser('update', 'blocks', ref),
      isEditing: select(_reusableBlocks.store).__experimentalIsEditingReusableBlock(clientId),
      settings: getSettings(),
      isUnsupportedBlockEditorSupported: getSettings('capabilities').unsupportedBlockEditor === true,
      canEnableUnsupportedBlockEditor: getSettings('capabilities').canEnableUnsupportedBlockEditor === true
    };
  }, [ref, clientId]),
      reusableBlock = _useSelect.reusableBlock,
      hasResolved = _useSelect.hasResolved,
      isEditing = _useSelect.isEditing,
      settings = _useSelect.settings,
      isUnsupportedBlockEditorSupported = _useSelect.isUnsupportedBlockEditorSupported,
      canEnableUnsupportedBlockEditor = _useSelect.canEnableUnsupportedBlockEditor;

  var _useDispatch = (0, _data.useDispatch)('core'),
      invalidateResolution = _useDispatch.invalidateResolution;

  var _useEntityBlockEditor = (0, _coreData.useEntityBlockEditor)('postType', 'wp_block', {
    id: ref
  }),
      _useEntityBlockEditor2 = (0, _slicedToArray2.default)(_useEntityBlockEditor, 3),
      blocks = _useEntityBlockEditor2[0],
      onInput = _useEntityBlockEditor2[1],
      onChange = _useEntityBlockEditor2[2];

  (0, _element.useEffect)(function () {
    return function () {
      clearTimeout(timeoutId.current);
      /**
       * Invalidate entity record upon unmount to keep the reusable block updated
       * in case it's modified through UBE
       */

      invalidateResolution('getEntityRecord', recordArgs);
    };
  }, []);

  function openSheet() {
    setShowHelp(true);
  }

  function closeSheet() {
    setShowHelp(false);
  }

  function requestFallback() {
    closeSheet();

    if (canEnableUnsupportedBlockEditor && !isUnsupportedBlockEditorSupported) {
      setSendButtonPressMessage(true);
    } else {
      setSendFallbackMessage(true);
    }
  }

  function renderSheet() {
    var infoTitle = _reactNative.Platform.OS === 'android' ? (0, _i18n.__)("Reusable blocks aren't editable on WordPress for Android") : (0, _i18n.__)("Reusable blocks aren't editable on WordPress for iOS");
    var reusableBlockActionButton = (0, _hooks.applyFilters)('native.reusable_block_action_button', (0, _i18n.__)('Edit using web editor'));
    return (0, _element.createElement)(_components.BottomSheet, {
      isVisible: showHelp,
      hideHeader: true,
      onClose: closeSheet,
      onModalHide: function onModalHide() {
        if (sendFallbackMessage) {
          // On iOS, onModalHide is called when the controller is still part of the hierarchy.
          // A small delay will ensure that the controller has already been removed.
          timeoutId.current = setTimeout(function () {
            (0, _reactNativeBridge.requestUnsupportedBlockFallback)("<!-- wp:block {\"ref\":".concat(reusableBlock.id, "} /-->"), clientId, reusableBlock.name, reusableBlock.title);
            invalidateResolution('getEntityRecord', recordArgs);
          }, 100);
          setSendFallbackMessage(false);
        } else if (sendButtonPressMessage) {
          timeoutId.current = setTimeout(function () {
            (0, _reactNativeBridge.sendActionButtonPressedAction)(_reactNativeBridge.actionButtons.missingBlockAlertActionButton);
          }, 100);
          setSendButtonPressMessage(false);
        }
      }
    }, (0, _element.createElement)(_reactNative.View, {
      style: _editor.default.infoContainer
    }, (0, _element.createElement)(_components.Icon, {
      icon: _icons.help,
      color: infoSheetIconStyle.color,
      size: _editor.default.infoSheetIcon.size
    }), (0, _element.createElement)(_reactNative.Text, {
      style: [infoTextStyle, infoTitleStyle]
    }, infoTitle)), (isUnsupportedBlockEditorSupported || canEnableUnsupportedBlockEditor) && (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_components.BottomSheet.Cell, {
      label: reusableBlockActionButton,
      separatorType: "topFullWidth",
      onPress: requestFallback,
      labelStyle: actionButtonStyle
    }), (0, _element.createElement)(_components.BottomSheet.Cell, {
      label: (0, _i18n.__)('Dismiss'),
      separatorType: "topFullWidth",
      onPress: closeSheet,
      labelStyle: actionButtonStyle
    })));
  }

  if (!hasResolved) {
    return (0, _element.createElement)(_reactNative.View, {
      style: spinnerStyle
    }, (0, _element.createElement)(_reactNative.ActivityIndicator, {
      animating: true
    }));
  }

  if (!reusableBlock) {
    return (0, _element.createElement)(_reactNative.Text, null, (0, _i18n.__)('Block has been deleted or is unavailable.'));
  }

  var title = reusableBlock.title;
  var element = (0, _element.createElement)(_blockEditor.BlockEditorProvider, {
    settings: settings,
    value: blocks,
    onChange: onChange,
    onInput: onInput
  }, (0, _element.createElement)(_blockEditor.BlockList, {
    withFooter: false,
    marginHorizontal: 0
  }));

  if (!isEditing) {
    element = (0, _element.createElement)(_components.Disabled, null, element);
  }

  return (0, _element.createElement)(_reactNative.TouchableWithoutFeedback, {
    disabled: !isSelected,
    accessibilityLabel: (0, _i18n.__)('Help button'),
    accessibilityRole: 'button',
    accessibilityHint: (0, _i18n.__)('Tap here to show help'),
    onPress: openSheet
  }, (0, _element.createElement)(_reactNative.View, null, isSelected && (0, _element.createElement)(_editTitle.default, {
    title: title
  }), element, renderSheet()));
}
//# sourceMappingURL=edit.native.js.map