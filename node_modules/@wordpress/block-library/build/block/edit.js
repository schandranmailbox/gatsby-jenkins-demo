"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ReusableBlockEdit;

var _element = require("@wordpress/element");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _data = require("@wordpress/data");

var _coreData = require("@wordpress/core-data");

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _blockEditor = require("@wordpress/block-editor");

var _reusableBlocks = require("@wordpress/reusable-blocks");

var _icons = require("@wordpress/icons");

/**
 * WordPress dependencies
 */
function ReusableBlockEdit(_ref) {
  var ref = _ref.attributes.ref,
      clientId = _ref.clientId;

  var _useNoRecursiveRender = (0, _blockEditor.__experimentalUseNoRecursiveRenders)(ref),
      _useNoRecursiveRender2 = (0, _slicedToArray2.default)(_useNoRecursiveRender, 2),
      hasAlreadyRendered = _useNoRecursiveRender2[0],
      RecursionProvider = _useNoRecursiveRender2[1];

  var _useSelect = (0, _data.useSelect)(function (select) {
    var persistedBlock = select(_coreData.store).getEntityRecord('postType', 'wp_block', ref);
    var hasResolvedBlock = select(_coreData.store).hasFinishedResolution('getEntityRecord', ['postType', 'wp_block', ref]);
    return {
      hasResolved: hasResolvedBlock,
      isMissing: hasResolvedBlock && !persistedBlock
    };
  }, [ref, clientId]),
      isMissing = _useSelect.isMissing,
      hasResolved = _useSelect.hasResolved;

  var _useDispatch = (0, _data.useDispatch)(_reusableBlocks.store),
      convertBlockToStatic = _useDispatch.__experimentalConvertBlockToStatic;

  var _useEntityBlockEditor = (0, _coreData.useEntityBlockEditor)('postType', 'wp_block', {
    id: ref
  }),
      _useEntityBlockEditor2 = (0, _slicedToArray2.default)(_useEntityBlockEditor, 3),
      blocks = _useEntityBlockEditor2[0],
      onInput = _useEntityBlockEditor2[1],
      onChange = _useEntityBlockEditor2[2];

  var _useEntityProp = (0, _coreData.useEntityProp)('postType', 'wp_block', 'title', ref),
      _useEntityProp2 = (0, _slicedToArray2.default)(_useEntityProp, 2),
      title = _useEntityProp2[0],
      setTitle = _useEntityProp2[1];

  var innerBlocksProps = (0, _blockEditor.__experimentalUseInnerBlocksProps)({}, {
    value: blocks,
    onInput: onInput,
    onChange: onChange,
    renderAppender: blocks !== null && blocks !== void 0 && blocks.length ? undefined : _blockEditor.InnerBlocks.ButtonBlockAppender
  });
  var blockProps = (0, _blockEditor.useBlockProps)();

  if (hasAlreadyRendered) {
    return (0, _element.createElement)("div", blockProps, (0, _element.createElement)(_blockEditor.Warning, null, (0, _i18n.__)('Block cannot be rendered inside itself.')));
  }

  if (isMissing) {
    return (0, _element.createElement)("div", blockProps, (0, _element.createElement)(_blockEditor.Warning, null, (0, _i18n.__)('Block has been deleted or is unavailable.')));
  }

  if (!hasResolved) {
    return (0, _element.createElement)("div", blockProps, (0, _element.createElement)(_components.Placeholder, null, (0, _element.createElement)(_components.Spinner, null)));
  }

  return (0, _element.createElement)(RecursionProvider, null, (0, _element.createElement)("div", blockProps, (0, _element.createElement)(_blockEditor.BlockControls, null, (0, _element.createElement)(_components.ToolbarGroup, null, (0, _element.createElement)(_components.ToolbarButton, {
    onClick: function onClick() {
      return convertBlockToStatic(clientId);
    },
    label: (0, _i18n.__)('Convert to regular blocks'),
    icon: _icons.ungroup,
    showTooltip: true
  }))), (0, _element.createElement)(_blockEditor.InspectorControls, null, (0, _element.createElement)(_components.PanelBody, null, (0, _element.createElement)(_components.TextControl, {
    label: (0, _i18n.__)('Name'),
    value: title,
    onChange: setTitle
  }))), (0, _element.createElement)("div", {
    className: "block-library-block__reusable-block-container"
  }, (0, _element.createElement)("div", innerBlocksProps))));
}
//# sourceMappingURL=edit.js.map