"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = QueryLoopEdit;

var _element = require("@wordpress/element");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classnames2 = _interopRequireDefault(require("classnames"));

var _data = require("@wordpress/data");

var _i18n = require("@wordpress/i18n");

var _blockEditor = require("@wordpress/block-editor");

var _query = require("../query");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
var TEMPLATE = [['core/post-title'], ['core/post-date'], ['core/post-excerpt']];

function QueryLoopEdit(_ref) {
  var clientId = _ref.clientId,
      _ref$context = _ref.context,
      _ref$context$query = _ref$context.query;
  _ref$context$query = _ref$context$query === void 0 ? {} : _ref$context$query;
  var perPage = _ref$context$query.perPage,
      offset = _ref$context$query.offset,
      categoryIds = _ref$context$query.categoryIds,
      postType = _ref$context$query.postType,
      _ref$context$query$ta = _ref$context$query.tagIds,
      tagIds = _ref$context$query$ta === void 0 ? [] : _ref$context$query$ta,
      order = _ref$context$query.order,
      orderBy = _ref$context$query.orderBy,
      author = _ref$context$query.author,
      search = _ref$context$query.search,
      exclude = _ref$context$query.exclude,
      sticky = _ref$context$query.sticky,
      inherit = _ref$context$query.inherit,
      _ref$context$queryCon = _ref$context.queryContext,
      queryContext = _ref$context$queryCon === void 0 ? [{}] : _ref$context$queryCon,
      templateSlug = _ref$context.templateSlug,
      _ref$context$layout = _ref$context.layout;
  _ref$context$layout = _ref$context$layout === void 0 ? {} : _ref$context$layout;
  var _ref$context$layout$t = _ref$context$layout.type,
      layoutType = _ref$context$layout$t === void 0 ? 'flex' : _ref$context$layout$t,
      _ref$context$layout$c = _ref$context$layout.columns,
      columns = _ref$context$layout$c === void 0 ? 1 : _ref$context$layout$c;

  var _ref2 = (0, _query.useQueryContext)() || queryContext,
      _ref3 = (0, _slicedToArray2.default)(_ref2, 1),
      page = _ref3[0].page;

  var _useState = (0, _element.useState)(),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      activeBlockContext = _useState2[0],
      setActiveBlockContext = _useState2[1];

  var _useSelect = (0, _data.useSelect)(function (select) {
    var _select = select('core'),
        getEntityRecords = _select.getEntityRecords;

    var _select2 = select('core/block-editor'),
        getBlocks = _select2.getBlocks;

    var query = {
      offset: perPage ? perPage * (page - 1) + offset : 0,
      categories: categoryIds,
      tags: tagIds,
      order: order,
      orderby: orderBy
    };

    if (perPage) {
      query.per_page = perPage;
    }

    if (author) {
      query.author = author;
    }

    if (search) {
      query.search = search;
    }

    if (exclude !== null && exclude !== void 0 && exclude.length) {
      query.exclude = exclude;
    } // If sticky is not set, it will return all posts in the results.
    // If sticky is set to `only`, it will limit the results to sticky posts only.
    // If it is anything else, it will exclude sticky posts from results. For the record the value stored is `exclude`.


    if (sticky) {
      query.sticky = sticky === 'only';
    } // If `inherit` is truthy, adjust conditionally the query to create a better preview.


    if (inherit) {
      // Change the post-type if needed.
      if (templateSlug !== null && templateSlug !== void 0 && templateSlug.startsWith('archive-')) {
        query.postType = templateSlug.replace('archive-', '');
        postType = query.postType;
      }
    }

    return {
      posts: getEntityRecords('postType', postType, query),
      blocks: getBlocks(clientId)
    };
  }, [perPage, page, offset, categoryIds, tagIds, order, orderBy, clientId, author, search, postType, exclude, sticky, inherit, templateSlug]),
      posts = _useSelect.posts,
      blocks = _useSelect.blocks;

  var blockContexts = (0, _element.useMemo)(function () {
    return posts === null || posts === void 0 ? void 0 : posts.map(function (post) {
      return {
        postType: post.type,
        postId: post.id
      };
    });
  }, [posts]);
  var hasLayoutFlex = layoutType === 'flex' && columns > 1;
  var blockProps = (0, _blockEditor.useBlockProps)({
    className: (0, _classnames2.default)((0, _defineProperty2.default)({
      'is-flex-container': hasLayoutFlex
    }, "columns-".concat(columns), hasLayoutFlex))
  });
  var innerBlocksProps = (0, _blockEditor.__experimentalUseInnerBlocksProps)({}, {
    template: TEMPLATE
  });

  if (!posts) {
    return (0, _element.createElement)("p", blockProps, (0, _i18n.__)('Loadingâ€¦'));
  }

  if (!posts.length) {
    return (0, _element.createElement)("p", blockProps, " ", (0, _i18n.__)('No results found.'));
  }

  return (0, _element.createElement)("ul", blockProps, blockContexts && blockContexts.map(function (blockContext) {
    return (0, _element.createElement)(_blockEditor.BlockContextProvider, {
      key: blockContext.postId,
      value: blockContext
    }, blockContext === (activeBlockContext || blockContexts[0]) ? (0, _element.createElement)("li", innerBlocksProps) : (0, _element.createElement)("li", null, (0, _element.createElement)(_blockEditor.BlockPreview, {
      blocks: blocks,
      __experimentalLive: true,
      __experimentalOnClick: function __experimentalOnClick() {
        return setActiveBlockContext(blockContext);
      }
    })));
  }));
}
//# sourceMappingURL=edit.js.map