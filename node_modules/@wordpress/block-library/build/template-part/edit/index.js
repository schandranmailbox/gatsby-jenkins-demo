"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TemplatePartEdit;

var _element = require("@wordpress/element");

var _data = require("@wordpress/data");

var _blockEditor = require("@wordpress/block-editor");

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _icons = require("@wordpress/icons");

var _namePanel = _interopRequireDefault(require("./name-panel"));

var _innerBlocks = _interopRequireDefault(require("./inner-blocks"));

var _placeholder = _interopRequireDefault(require("./placeholder"));

var _selection = _interopRequireDefault(require("./selection"));

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function TemplatePartEdit(_ref) {
  var _ref$attributes = _ref.attributes,
      slug = _ref$attributes.slug,
      theme = _ref$attributes.theme,
      _ref$attributes$tagNa = _ref$attributes.tagName,
      TagName = _ref$attributes$tagNa === void 0 ? 'div' : _ref$attributes$tagNa,
      setAttributes = _ref.setAttributes,
      clientId = _ref.clientId;
  var templatePartId = theme && slug ? theme + '//' + slug : null; // Set the postId block attribute if it did not exist,
  // but wait until the inner blocks have loaded to allow
  // new edits to trigger this.

  var _useSelect = (0, _data.useSelect)(function (select) {
    var _select = select('core'),
        getEntityRecord = _select.getEntityRecord,
        hasFinishedResolution = _select.hasFinishedResolution;

    var _select2 = select('core/block-editor'),
        getBlocks = _select2.getBlocks;

    var getEntityArgs = ['postType', 'wp_template_part', templatePartId];
    var entityRecord = templatePartId ? getEntityRecord.apply(void 0, getEntityArgs) : null;
    var hasResolvedEntity = templatePartId ? hasFinishedResolution('getEntityRecord', getEntityArgs) : false;
    return {
      innerBlocks: getBlocks(clientId),
      isResolved: hasResolvedEntity,
      isMissing: hasResolvedEntity && !entityRecord
    };
  }, [templatePartId, clientId]),
      isResolved = _useSelect.isResolved,
      innerBlocks = _useSelect.innerBlocks,
      isMissing = _useSelect.isMissing;

  var blockProps = (0, _blockEditor.useBlockProps)();
  var isPlaceholder = !slug;
  var isEntityAvailable = !isPlaceholder && !isMissing;

  if (!isPlaceholder && isMissing) {
    return (0, _element.createElement)(TagName, blockProps, (0, _element.createElement)(_blockEditor.Warning, null, (0, _i18n.__)('Template part has been deleted or is unavailable.')));
  }

  var inspectorAdvancedControls = (0, _element.createElement)(_blockEditor.InspectorAdvancedControls, null, (0, _element.createElement)(_components.SelectControl, {
    label: (0, _i18n.__)('HTML element'),
    options: [{
      label: (0, _i18n.__)('Default (<div>)'),
      value: 'div'
    }, {
      label: '<header>',
      value: 'header'
    }, {
      label: '<main>',
      value: 'main'
    }, {
      label: '<section>',
      value: 'section'
    }, {
      label: '<article>',
      value: 'article'
    }, {
      label: '<aside>',
      value: 'aside'
    }, {
      label: '<footer>',
      value: 'footer'
    }],
    value: TagName,
    onChange: function onChange(value) {
      return setAttributes({
        tagName: value
      });
    }
  }));
  return (0, _element.createElement)(_element.Fragment, null, inspectorAdvancedControls, (0, _element.createElement)(TagName, blockProps, isPlaceholder && (0, _element.createElement)(_placeholder.default, {
    setAttributes: setAttributes,
    innerBlocks: innerBlocks
  }), isEntityAvailable && (0, _element.createElement)(_blockEditor.BlockControls, null, (0, _element.createElement)(_components.ToolbarGroup, {
    className: "wp-block-template-part__block-control-group"
  }, (0, _element.createElement)(_namePanel.default, {
    postId: templatePartId
  }), (0, _element.createElement)(_components.Dropdown, {
    className: "wp-block-template-part__preview-dropdown-button",
    contentClassName: "wp-block-template-part__preview-dropdown-content",
    position: "bottom right left",
    renderToggle: function renderToggle(_ref2) {
      var isOpen = _ref2.isOpen,
          onToggle = _ref2.onToggle;
      return (0, _element.createElement)(_components.ToolbarButton, {
        "aria-expanded": isOpen,
        icon: isOpen ? _icons.chevronUp : _icons.chevronDown,
        label: (0, _i18n.__)('Choose another'),
        onClick: onToggle // Disable when open to prevent odd FireFox bug causing reopening.
        // As noted in https://github.com/WordPress/gutenberg/pull/24990#issuecomment-689094119 .
        ,
        disabled: isOpen
      });
    },
    renderContent: function renderContent(_ref3) {
      var onClose = _ref3.onClose;
      return (0, _element.createElement)(_selection.default, {
        setAttributes: setAttributes,
        onClose: onClose
      });
    }
  }))), isEntityAvailable && (0, _element.createElement)(_innerBlocks.default, {
    postId: templatePartId,
    hasInnerBlocks: innerBlocks.length > 0
  }), !isPlaceholder && !isResolved && (0, _element.createElement)(_components.Spinner, null)));
}
//# sourceMappingURL=index.js.map