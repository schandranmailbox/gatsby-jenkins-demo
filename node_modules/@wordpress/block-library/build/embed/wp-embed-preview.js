"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = WpEmbedPreview;

var _element = require("@wordpress/element");

/**
 * WordPress dependencies
 */

/** @typedef {import('@wordpress/element').WPSyntheticEvent} WPSyntheticEvent */
function WpEmbedPreview(_ref) {
  var html = _ref.html;
  var ref = (0, _element.useRef)();
  (0, _element.useEffect)(function () {
    var ownerDocument = ref.current.ownerDocument;
    var defaultView = ownerDocument.defaultView;
    var FocusEvent = defaultView.FocusEvent;
    /**
     * Checks for WordPress embed events signaling the height change when iframe
     * content loads or iframe's window is resized.  The event is sent from
     * WordPress core via the window.postMessage API.
     *
     * References:
     * window.postMessage: https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage
     * WordPress core embed-template on load: https://github.com/WordPress/WordPress/blob/HEAD/wp-includes/js/wp-embed-template.js#L143
     * WordPress core embed-template on resize: https://github.com/WordPress/WordPress/blob/HEAD/wp-includes/js/wp-embed-template.js#L187
     *
     * @param {WPSyntheticEvent} event Message event.
     */

    function resizeWPembeds(_ref2) {
      var _ref2$data = _ref2.data;
      _ref2$data = _ref2$data === void 0 ? {} : _ref2$data;
      var secret = _ref2$data.secret,
          message = _ref2$data.message,
          value = _ref2$data.value;

      if ([secret, message, value].some(function (attribute) {
        return !attribute;
      }) || message !== 'height') {
        return;
      }

      ownerDocument.querySelectorAll("iframe[data-secret=\"".concat(secret, "\"")).forEach(function (iframe) {
        if (+iframe.height !== value) {
          iframe.height = value;
        }
      });
    }
    /**
     * Checks whether the wp embed iframe is the activeElement,
     * if it is dispatch a focus event.
     */


    function checkFocus() {
      var activeElement = ownerDocument.activeElement;

      if (activeElement.tagName !== 'IFRAME' || activeElement.parentNode !== ref.current) {
        return;
      }

      var focusEvent = new FocusEvent('focus', {
        bubbles: true
      });
      activeElement.dispatchEvent(focusEvent);
    }

    defaultView.addEventListener('message', resizeWPembeds);
    defaultView.addEventListener('blur', checkFocus);
    return function () {
      defaultView.removeEventListener('message', resizeWPembeds);
      defaultView.removeEventListener('blur', checkFocus);
    };
  }, []);

  var __html = (0, _element.useMemo)(function () {
    var doc = new window.DOMParser().parseFromString(html, 'text/html');
    var iframe = doc.querySelector('iframe');

    if (iframe) {
      iframe.removeAttribute('style');
    }

    var blockQuote = doc.querySelector('blockquote');

    if (blockQuote) {
      blockQuote.style.display = 'none';
    }

    return doc.body.innerHTML;
  }, [html]);

  return (0, _element.createElement)("div", {
    ref: ref,
    className: "wp-block-embed__wrapper",
    dangerouslySetInnerHTML: {
      __html: __html
    }
  });
}
//# sourceMappingURL=wp-embed-preview.js.map