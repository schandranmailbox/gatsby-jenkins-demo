"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classnames2 = _interopRequireDefault(require("classnames"));

var _blockEditor = require("@wordpress/block-editor");

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _icons = require("@wordpress/icons");

var _blocks = require("@wordpress/blocks");

var _state = require("./state");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var BACKGROUND_COLORS = [{
  color: '#f3f4f5',
  name: 'Subtle light gray',
  slug: 'subtle-light-gray'
}, {
  color: '#e9fbe5',
  name: 'Subtle pale green',
  slug: 'subtle-pale-green'
}, {
  color: '#e7f5fe',
  name: 'Subtle pale blue',
  slug: 'subtle-pale-blue'
}, {
  color: '#fcf0ef',
  name: 'Subtle pale pink',
  slug: 'subtle-pale-pink'
}];
var ALIGNMENT_CONTROLS = [{
  icon: _icons.alignLeft,
  title: (0, _i18n.__)('Align column left'),
  align: 'left'
}, {
  icon: _icons.alignCenter,
  title: (0, _i18n.__)('Align column center'),
  align: 'center'
}, {
  icon: _icons.alignRight,
  title: (0, _i18n.__)('Align column right'),
  align: 'right'
}];
var withCustomBackgroundColors = (0, _blockEditor.createCustomColorsHOC)(BACKGROUND_COLORS);
var cellAriaLabel = {
  head: (0, _i18n.__)('Header cell text'),
  body: (0, _i18n.__)('Body cell text'),
  foot: (0, _i18n.__)('Footer cell text')
};
var placeholder = {
  head: (0, _i18n.__)('Header label'),
  foot: (0, _i18n.__)('Footer label')
};

function TSection(_ref) {
  var name = _ref.name,
      props = (0, _objectWithoutProperties2.default)(_ref, ["name"]);
  var TagName = "t".concat(name);
  return (0, _element.createElement)(TagName, props);
}

function TableEdit(_ref2) {
  var attributes = _ref2.attributes,
      backgroundColor = _ref2.backgroundColor,
      setBackgroundColor = _ref2.setBackgroundColor,
      setAttributes = _ref2.setAttributes,
      insertBlocksAfter = _ref2.insertBlocksAfter,
      isSelected = _ref2.isSelected;
  var hasFixedLayout = attributes.hasFixedLayout,
      caption = attributes.caption,
      head = attributes.head,
      foot = attributes.foot;

  var _useState = (0, _element.useState)(2),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      initialRowCount = _useState2[0],
      setInitialRowCount = _useState2[1];

  var _useState3 = (0, _element.useState)(2),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      initialColumnCount = _useState4[0],
      setInitialColumnCount = _useState4[1];

  var _useState5 = (0, _element.useState)(),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      selectedCell = _useState6[0],
      setSelectedCell = _useState6[1];
  /**
   * Updates the initial column count used for table creation.
   *
   * @param {number} count New initial column count.
   */


  function onChangeInitialColumnCount(count) {
    setInitialColumnCount(count);
  }
  /**
   * Updates the initial row count used for table creation.
   *
   * @param {number} count New initial row count.
   */


  function onChangeInitialRowCount(count) {
    setInitialRowCount(count);
  }
  /**
   * Creates a table based on dimensions in local state.
   *
   * @param {Object} event Form submit event.
   */


  function onCreateTable(event) {
    event.preventDefault();
    setAttributes((0, _state.createTable)({
      rowCount: parseInt(initialRowCount, 10) || 2,
      columnCount: parseInt(initialColumnCount, 10) || 2
    }));
  }
  /**
   * Toggles whether the table has a fixed layout or not.
   */


  function onChangeFixedLayout() {
    setAttributes({
      hasFixedLayout: !hasFixedLayout
    });
  }
  /**
   * Changes the content of the currently selected cell.
   *
   * @param {Array} content A RichText content value.
   */


  function onChange(content) {
    if (!selectedCell) {
      return;
    }

    setAttributes((0, _state.updateSelectedCell)(attributes, selectedCell, function (cellAttributes) {
      return _objectSpread(_objectSpread({}, cellAttributes), {}, {
        content: content
      });
    }));
  }
  /**
   * Align text within the a column.
   *
   * @param {string} align The new alignment to apply to the column.
   */


  function onChangeColumnAlignment(align) {
    if (!selectedCell) {
      return;
    } // Convert the cell selection to a column selection so that alignment
    // is applied to the entire column.


    var columnSelection = {
      type: 'column',
      columnIndex: selectedCell.columnIndex
    };
    var newAttributes = (0, _state.updateSelectedCell)(attributes, columnSelection, function (cellAttributes) {
      return _objectSpread(_objectSpread({}, cellAttributes), {}, {
        align: align
      });
    });
    setAttributes(newAttributes);
  }
  /**
   * Get the alignment of the currently selected cell.
   *
   * @return {string} The new alignment to apply to the column.
   */


  function getCellAlignment() {
    if (!selectedCell) {
      return;
    }

    return (0, _state.getCellAttribute)(attributes, selectedCell, 'align');
  }
  /**
   * Add or remove a `head` table section.
   */


  function onToggleHeaderSection() {
    setAttributes((0, _state.toggleSection)(attributes, 'head'));
  }
  /**
   * Add or remove a `foot` table section.
   */


  function onToggleFooterSection() {
    setAttributes((0, _state.toggleSection)(attributes, 'foot'));
  }
  /**
   * Inserts a row at the currently selected row index, plus `delta`.
   *
   * @param {number} delta Offset for selected row index at which to insert.
   */


  function onInsertRow(delta) {
    if (!selectedCell) {
      return;
    }

    var sectionName = selectedCell.sectionName,
        rowIndex = selectedCell.rowIndex;
    var newRowIndex = rowIndex + delta;
    setAttributes((0, _state.insertRow)(attributes, {
      sectionName: sectionName,
      rowIndex: newRowIndex
    })); // Select the first cell of the new row

    setSelectedCell({
      sectionName: sectionName,
      rowIndex: newRowIndex,
      columnIndex: 0,
      type: 'cell'
    });
  }
  /**
   * Inserts a row before the currently selected row.
   */


  function onInsertRowBefore() {
    onInsertRow(0);
  }
  /**
   * Inserts a row after the currently selected row.
   */


  function onInsertRowAfter() {
    onInsertRow(1);
  }
  /**
   * Deletes the currently selected row.
   */


  function onDeleteRow() {
    if (!selectedCell) {
      return;
    }

    var sectionName = selectedCell.sectionName,
        rowIndex = selectedCell.rowIndex;
    setSelectedCell();
    setAttributes((0, _state.deleteRow)(attributes, {
      sectionName: sectionName,
      rowIndex: rowIndex
    }));
  }
  /**
   * Inserts a column at the currently selected column index, plus `delta`.
   *
   * @param {number} delta Offset for selected column index at which to insert.
   */


  function onInsertColumn() {
    var delta = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    if (!selectedCell) {
      return;
    }

    var columnIndex = selectedCell.columnIndex;
    var newColumnIndex = columnIndex + delta;
    setAttributes((0, _state.insertColumn)(attributes, {
      columnIndex: newColumnIndex
    })); // Select the first cell of the new column

    setSelectedCell({
      rowIndex: 0,
      columnIndex: newColumnIndex,
      type: 'cell'
    });
  }
  /**
   * Inserts a column before the currently selected column.
   */


  function onInsertColumnBefore() {
    onInsertColumn(0);
  }
  /**
   * Inserts a column after the currently selected column.
   */


  function onInsertColumnAfter() {
    onInsertColumn(1);
  }
  /**
   * Deletes the currently selected column.
   */


  function onDeleteColumn() {
    if (!selectedCell) {
      return;
    }

    var sectionName = selectedCell.sectionName,
        columnIndex = selectedCell.columnIndex;
    setSelectedCell();
    setAttributes((0, _state.deleteColumn)(attributes, {
      sectionName: sectionName,
      columnIndex: columnIndex
    }));
  }

  (0, _element.useEffect)(function () {
    if (!isSelected) {
      setSelectedCell();
    }
  }, [isSelected]);
  var sections = ['head', 'body', 'foot'].filter(function (name) {
    return !(0, _state.isEmptyTableSection)(attributes[name]);
  });
  var tableControls = [{
    icon: _icons.tableRowBefore,
    title: (0, _i18n.__)('Insert row before'),
    isDisabled: !selectedCell,
    onClick: onInsertRowBefore
  }, {
    icon: _icons.tableRowAfter,
    title: (0, _i18n.__)('Insert row after'),
    isDisabled: !selectedCell,
    onClick: onInsertRowAfter
  }, {
    icon: _icons.tableRowDelete,
    title: (0, _i18n.__)('Delete row'),
    isDisabled: !selectedCell,
    onClick: onDeleteRow
  }, {
    icon: _icons.tableColumnBefore,
    title: (0, _i18n.__)('Insert column before'),
    isDisabled: !selectedCell,
    onClick: onInsertColumnBefore
  }, {
    icon: _icons.tableColumnAfter,
    title: (0, _i18n.__)('Insert column after'),
    isDisabled: !selectedCell,
    onClick: onInsertColumnAfter
  }, {
    icon: _icons.tableColumnDelete,
    title: (0, _i18n.__)('Delete column'),
    isDisabled: !selectedCell,
    onClick: onDeleteColumn
  }];
  var renderedSections = ['head', 'body', 'foot'].map(function (name) {
    return (0, _element.createElement)(TSection, {
      name: name,
      key: name
    }, attributes[name].map(function (_ref3, rowIndex) {
      var cells = _ref3.cells;
      return (0, _element.createElement)("tr", {
        key: rowIndex
      }, cells.map(function (_ref4, columnIndex) {
        var content = _ref4.content,
            CellTag = _ref4.tag,
            scope = _ref4.scope,
            align = _ref4.align;
        return (0, _element.createElement)(_blockEditor.RichText, {
          tagName: CellTag,
          key: columnIndex,
          className: (0, _classnames2.default)((0, _defineProperty2.default)({}, "has-text-align-".concat(align), align), 'wp-block-table__cell-content'),
          scope: CellTag === 'th' ? scope : undefined,
          value: content,
          onChange: onChange,
          unstableOnFocus: function unstableOnFocus() {
            setSelectedCell({
              sectionName: name,
              rowIndex: rowIndex,
              columnIndex: columnIndex,
              type: 'cell'
            });
          },
          "aria-label": cellAriaLabel[name],
          placeholder: placeholder[name]
        });
      }));
    }));
  });
  var isEmpty = !sections.length;
  return (0, _element.createElement)("figure", (0, _blockEditor.useBlockProps)(), !isEmpty && (0, _element.createElement)(_blockEditor.BlockControls, null, (0, _element.createElement)(_components.ToolbarGroup, null, (0, _element.createElement)(_components.ToolbarItem, null, function (toggleProps) {
    return (0, _element.createElement)(_components.DropdownMenu, {
      hasArrowIndicator: true,
      icon: _icons.table,
      toggleProps: toggleProps,
      label: (0, _i18n.__)('Edit table'),
      controls: tableControls
    });
  })), (0, _element.createElement)(_blockEditor.AlignmentToolbar, {
    label: (0, _i18n.__)('Change column alignment'),
    alignmentControls: ALIGNMENT_CONTROLS,
    value: getCellAlignment(),
    onChange: function onChange(nextAlign) {
      return onChangeColumnAlignment(nextAlign);
    }
  })), !isEmpty && (0, _element.createElement)(_blockEditor.InspectorControls, null, (0, _element.createElement)(_components.PanelBody, {
    title: (0, _i18n.__)('Table settings'),
    className: "blocks-table-settings"
  }, (0, _element.createElement)(_components.ToggleControl, {
    label: (0, _i18n.__)('Fixed width table cells'),
    checked: !!hasFixedLayout,
    onChange: onChangeFixedLayout
  }), (0, _element.createElement)(_components.ToggleControl, {
    label: (0, _i18n.__)('Header section'),
    checked: !!(head && head.length),
    onChange: onToggleHeaderSection
  }), (0, _element.createElement)(_components.ToggleControl, {
    label: (0, _i18n.__)('Footer section'),
    checked: !!(foot && foot.length),
    onChange: onToggleFooterSection
  })), (0, _element.createElement)(_blockEditor.PanelColorSettings, {
    title: (0, _i18n.__)('Color settings'),
    initialOpen: false,
    colorSettings: [{
      value: backgroundColor.color,
      onChange: setBackgroundColor,
      label: (0, _i18n.__)('Background color'),
      disableCustomColors: true,
      colors: BACKGROUND_COLORS
    }]
  })), !isEmpty && (0, _element.createElement)("table", {
    className: (0, _classnames2.default)(backgroundColor.class, {
      'has-fixed-layout': hasFixedLayout,
      'has-background': !!backgroundColor.color
    })
  }, renderedSections), !isEmpty && (0, _element.createElement)(_blockEditor.RichText, {
    tagName: "figcaption",
    "aria-label": (0, _i18n.__)('Table caption text'),
    placeholder: (0, _i18n.__)('Write caption…'),
    value: caption,
    onChange: function onChange(value) {
      return setAttributes({
        caption: value
      });
    } // Deselect the selected table cell when the caption is focused.
    ,
    unstableOnFocus: function unstableOnFocus() {
      return setSelectedCell();
    },
    __unstableOnSplitAtEnd: function __unstableOnSplitAtEnd() {
      return insertBlocksAfter((0, _blocks.createBlock)('core/paragraph'));
    }
  }), isEmpty && (0, _element.createElement)(_components.Placeholder, {
    label: (0, _i18n.__)('Table'),
    icon: (0, _element.createElement)(_blockEditor.BlockIcon, {
      icon: _icons.blockTable,
      showColors: true
    }),
    instructions: (0, _i18n.__)('Insert a table for sharing data.')
  }, (0, _element.createElement)("form", {
    className: "blocks-table__placeholder-form",
    onSubmit: onCreateTable
  }, (0, _element.createElement)(_components.TextControl, {
    type: "number",
    label: (0, _i18n.__)('Column count'),
    value: initialColumnCount,
    onChange: onChangeInitialColumnCount,
    min: "1",
    className: "blocks-table__placeholder-input"
  }), (0, _element.createElement)(_components.TextControl, {
    type: "number",
    label: (0, _i18n.__)('Row count'),
    value: initialRowCount,
    onChange: onChangeInitialRowCount,
    min: "1",
    className: "blocks-table__placeholder-input"
  }), (0, _element.createElement)(_components.Button, {
    className: "blocks-table__placeholder-button",
    isPrimary: true,
    type: "submit"
  }, (0, _i18n.__)('Create Table')))));
}

var _default = withCustomBackgroundColors('backgroundColor')(TableEdit);

exports.default = _default;
//# sourceMappingURL=edit.js.map