"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useTransformImage;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _element = require("@wordpress/element");

var _hooks = require("@wordpress/hooks");

/**
 * WordPress dependencies
 */
function useTransformState(_ref) {
  var url = _ref.url,
      naturalWidth = _ref.naturalWidth,
      naturalHeight = _ref.naturalHeight;

  var _useState = (0, _element.useState)(),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      editedUrl = _useState2[0],
      setEditedUrl = _useState2[1];

  var _useState3 = (0, _element.useState)(),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      crop = _useState4[0],
      setCrop = _useState4[1];

  var _useState5 = (0, _element.useState)({
    x: 0,
    y: 0
  }),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      position = _useState6[0],
      setPosition = _useState6[1];

  var _useState7 = (0, _element.useState)(),
      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
      zoom = _useState8[0],
      setZoom = _useState8[1];

  var _useState9 = (0, _element.useState)(),
      _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
      rotation = _useState10[0],
      setRotation = _useState10[1];

  var _useState11 = (0, _element.useState)(),
      _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
      aspect = _useState12[0],
      setAspect = _useState12[1];

  var _useState13 = (0, _element.useState)(),
      _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
      defaultAspect = _useState14[0],
      setDefaultAspect = _useState14[1];

  var initializeTransformValues = (0, _element.useCallback)(function () {
    setPosition({
      x: 0,
      y: 0
    });
    setZoom(100);
    setRotation(0);
    setAspect(naturalWidth / naturalHeight);
    setDefaultAspect(naturalWidth / naturalHeight);
  }, [naturalWidth, naturalHeight, setPosition, setZoom, setRotation, setAspect, setDefaultAspect]);
  var rotateClockwise = (0, _element.useCallback)(function () {
    var angle = (rotation + 90) % 360;
    var naturalAspectRatio = naturalWidth / naturalHeight;

    if (rotation % 180 === 90) {
      naturalAspectRatio = naturalHeight / naturalWidth;
    }

    if (angle === 0) {
      setEditedUrl();
      setRotation(angle);
      setAspect(1 / aspect);
      setPosition({
        x: -(position.y * naturalAspectRatio),
        y: position.x * naturalAspectRatio
      });
      return;
    }

    function editImage(event) {
      var canvas = document.createElement('canvas');
      var translateX = 0;
      var translateY = 0;

      if (angle % 180) {
        canvas.width = event.target.height;
        canvas.height = event.target.width;
      } else {
        canvas.width = event.target.width;
        canvas.height = event.target.height;
      }

      if (angle === 90 || angle === 180) {
        translateX = canvas.width;
      }

      if (angle === 270 || angle === 180) {
        translateY = canvas.height;
      }

      var context = canvas.getContext('2d');
      context.translate(translateX, translateY);
      context.rotate(angle * Math.PI / 180);
      context.drawImage(event.target, 0, 0);
      canvas.toBlob(function (blob) {
        setEditedUrl(URL.createObjectURL(blob));
        setRotation(angle);
        setAspect(1 / aspect);
        setPosition({
          x: -(position.y * naturalAspectRatio),
          y: position.x * naturalAspectRatio
        });
      });
    }

    var el = new window.Image();
    el.src = url;
    el.onload = editImage;
    var imgCrossOrigin = (0, _hooks.applyFilters)('media.crossOrigin', undefined, url);

    if (typeof imgCrossOrigin === 'string') {
      el.crossOrigin = imgCrossOrigin;
    }
  }, [rotation, naturalWidth, naturalHeight, setEditedUrl, setRotation, setAspect, setPosition]);
  return (0, _element.useMemo)(function () {
    return {
      editedUrl: editedUrl,
      setEditedUrl: setEditedUrl,
      crop: crop,
      setCrop: setCrop,
      position: position,
      setPosition: setPosition,
      zoom: zoom,
      setZoom: setZoom,
      rotation: rotation,
      setRotation: setRotation,
      rotateClockwise: rotateClockwise,
      aspect: aspect,
      setAspect: setAspect,
      defaultAspect: defaultAspect,
      initializeTransformValues: initializeTransformValues
    };
  }, [editedUrl, setEditedUrl, crop, setCrop, position, setPosition, zoom, setZoom, rotation, setRotation, rotateClockwise, aspect, setAspect, defaultAspect, initializeTransformValues]);
}

function useTransformImage(imageProperties, isEditing) {
  var transformState = useTransformState(imageProperties);
  var initializeTransformValues = transformState.initializeTransformValues;
  (0, _element.useEffect)(function () {
    if (isEditing) {
      initializeTransformValues();
    }
  }, [isEditing, initializeTransformValues]);
  return transformState;
}
//# sourceMappingURL=use-transform-image.js.map