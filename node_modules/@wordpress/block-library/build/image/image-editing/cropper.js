"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ImageCropper;

var _element = require("@wordpress/element");

var _reactEasyCrop = _interopRequireDefault(require("react-easy-crop"));

var _classnames = _interopRequireDefault(require("classnames"));

var _components = require("@wordpress/components");

var _constants = require("./constants");

var _context = require("./context");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function ImageCropper(_ref) {
  var url = _ref.url,
      width = _ref.width,
      height = _ref.height,
      clientWidth = _ref.clientWidth,
      naturalHeight = _ref.naturalHeight,
      naturalWidth = _ref.naturalWidth;

  var _useImageEditingConte = (0, _context.useImageEditingContext)(),
      isInProgress = _useImageEditingConte.isInProgress,
      editedUrl = _useImageEditingConte.editedUrl,
      position = _useImageEditingConte.position,
      zoom = _useImageEditingConte.zoom,
      aspect = _useImageEditingConte.aspect,
      setPosition = _useImageEditingConte.setPosition,
      setCrop = _useImageEditingConte.setCrop,
      setZoom = _useImageEditingConte.setZoom,
      rotation = _useImageEditingConte.rotation;

  var editedHeight = height || clientWidth * naturalHeight / naturalWidth;

  if (rotation % 180 === 90) {
    editedHeight = clientWidth * naturalWidth / naturalHeight;
  }

  return (0, _element.createElement)("div", {
    className: (0, _classnames.default)('wp-block-image__crop-area', {
      'is-applying': isInProgress
    }),
    style: {
      width: width || clientWidth,
      height: editedHeight
    }
  }, (0, _element.createElement)(_reactEasyCrop.default, {
    image: editedUrl || url,
    disabled: isInProgress,
    minZoom: _constants.MIN_ZOOM / 100,
    maxZoom: _constants.MAX_ZOOM / 100,
    crop: position,
    zoom: zoom / 100,
    aspect: aspect,
    onCropChange: setPosition,
    onCropComplete: function onCropComplete(newCropPercent) {
      setCrop(newCropPercent);
    },
    onZoomChange: function onZoomChange(newZoom) {
      setZoom(newZoom * 100);
    }
  }), isInProgress && (0, _element.createElement)(_components.Spinner, null));
}
//# sourceMappingURL=cropper.js.map