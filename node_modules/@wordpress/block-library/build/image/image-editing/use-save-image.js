"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useSaveImage;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _apiFetch = _interopRequireDefault(require("@wordpress/api-fetch"));

var _data = require("@wordpress/data");

var _element = require("@wordpress/element");

var _i18n = require("@wordpress/i18n");

var _notices = require("@wordpress/notices");

/**
 * WordPress dependencies
 */
function useSaveImage(_ref) {
  var crop = _ref.crop,
      rotation = _ref.rotation,
      height = _ref.height,
      width = _ref.width,
      aspect = _ref.aspect,
      url = _ref.url,
      id = _ref.id,
      onSaveImage = _ref.onSaveImage,
      onFinishEditing = _ref.onFinishEditing;

  var _useDispatch = (0, _data.useDispatch)(_notices.store),
      createErrorNotice = _useDispatch.createErrorNotice;

  var _useState = (0, _element.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isInProgress = _useState2[0],
      setIsInProgress = _useState2[1];

  var cancel = (0, _element.useCallback)(function () {
    setIsInProgress(false);
    onFinishEditing();
  }, [setIsInProgress, onFinishEditing]);
  var apply = (0, _element.useCallback)(function () {
    setIsInProgress(true);
    var attrs = {}; // The crop script may return some very small, sub-pixel values when the image was not cropped.
    // Crop only when the new size has changed by more than 0.1%.

    if (crop.width < 99.9 || crop.height < 99.9) {
      attrs = crop;
    }

    if (rotation > 0) {
      attrs.rotation = rotation;
    }

    attrs.src = url;
    (0, _apiFetch.default)({
      path: "/wp/v2/media/".concat(id, "/edit"),
      method: 'POST',
      data: attrs
    }).then(function (response) {
      onSaveImage({
        id: response.id,
        url: response.source_url,
        height: height && width ? width / aspect : undefined
      });
    }).catch(function (error) {
      createErrorNotice((0, _i18n.sprintf)(
      /* translators: 1. Error message */
      (0, _i18n.__)('Could not edit image. %s'), error.message), {
        id: 'image-editing-error',
        type: 'snackbar'
      });
    }).finally(function () {
      setIsInProgress(false);
      onFinishEditing();
    });
  }, [setIsInProgress, crop, rotation, height, width, aspect, url, onSaveImage, createErrorNotice, setIsInProgress, onFinishEditing]);
  return (0, _element.useMemo)(function () {
    return {
      isInProgress: isInProgress,
      apply: apply,
      cancel: cancel
    };
  }, [isInProgress, apply, cancel]);
}
//# sourceMappingURL=use-save-image.js.map