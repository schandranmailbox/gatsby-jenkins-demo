"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TracksEditor;

var _element = require("@wordpress/element");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _objectDestructuringEmpty2 = _interopRequireDefault(require("@babel/runtime/helpers/objectDestructuringEmpty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _blockEditor = require("@wordpress/block-editor");

var _icons = require("@wordpress/icons");

var _data = require("@wordpress/data");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var ALLOWED_TYPES = ['text/vtt'];
var DEFAULT_KIND = 'subtitles';
var KIND_OPTIONS = [{
  label: (0, _i18n.__)('Subtitles'),
  value: 'subtitles'
}, {
  label: (0, _i18n.__)('Captions'),
  value: 'captions'
}, {
  label: (0, _i18n.__)('Descriptions'),
  value: 'descriptions'
}, {
  label: (0, _i18n.__)('Chapters'),
  value: 'chapters'
}, {
  label: (0, _i18n.__)('Metadata'),
  value: 'metadata'
}];
var captionIcon = (0, _element.createElement)(_components.SVG, {
  width: "18",
  height: "14",
  viewBox: "0 0 18 14",
  role: "img",
  fill: "none"
}, (0, _element.createElement)(_components.Rect, {
  x: "0.75",
  y: "0.75",
  width: "16.5",
  height: "12.5",
  rx: "1.25",
  stroke: "black",
  strokeWidth: "1.5",
  fill: "none"
}), (0, _element.createElement)(_components.Path, {
  d: "M3 7H15",
  stroke: "black",
  strokeWidth: "1.5"
}), (0, _element.createElement)(_components.Path, {
  d: "M3 10L15 10",
  stroke: "black",
  strokeWidth: "1.5"
}));

function TrackList(_ref) {
  var tracks = _ref.tracks,
      onEditPress = _ref.onEditPress;
  var content;

  if (tracks.length === 0) {
    content = (0, _element.createElement)("p", {
      className: "block-library-video-tracks-editor__tracks-informative-message"
    }, (0, _i18n.__)('Tracks can be subtitles, captions, chapters, or descriptions. They help make your content more accessible to a wider range of users.'));
  } else {
    content = tracks.map(function (track, index) {
      return (0, _element.createElement)("div", {
        key: index,
        className: "block-library-video-tracks-editor__track-list-track"
      }, (0, _element.createElement)("span", null, track.label, " "), (0, _element.createElement)(_components.Button, {
        isTertiary: true,
        onClick: function onClick() {
          return onEditPress(index);
        },
        "aria-label": (0, _i18n.sprintf)(
        /* translators: %s: Label of the video text track e.g: "French subtitles" */
        (0, _i18n.__)('Edit %s'), track.label)
      }, (0, _i18n.__)('Edit')));
    });
  }

  return (0, _element.createElement)(_components.MenuGroup, {
    label: (0, _i18n.__)('Text tracks'),
    className: "block-library-video-tracks-editor__track-list"
  }, content);
}

function SingleTrackEditor(_ref2) {
  var track = _ref2.track,
      _onChange = _ref2.onChange,
      onClose = _ref2.onClose,
      onRemove = _ref2.onRemove;
  var _track$src = track.src,
      src = _track$src === void 0 ? '' : _track$src,
      _track$label = track.label,
      label = _track$label === void 0 ? '' : _track$label,
      _track$srcLang = track.srcLang,
      srcLang = _track$srcLang === void 0 ? '' : _track$srcLang,
      _track$kind = track.kind,
      kind = _track$kind === void 0 ? DEFAULT_KIND : _track$kind;
  var fileName = src.startsWith('blob:') ? '' : src.substring(src.lastIndexOf('/') + 1);
  return (0, _element.createElement)(_components.NavigableMenu, null, (0, _element.createElement)("div", {
    className: "block-library-video-tracks-editor__single-track-editor"
  }, (0, _element.createElement)("span", {
    className: "block-library-video-tracks-editor__single-track-editor-edit-track-label"
  }, (0, _i18n.__)('Edit track')), (0, _element.createElement)("span", null, (0, _i18n.__)('File'), ": ", (0, _element.createElement)("b", null, fileName)), (0, _element.createElement)("div", {
    className: "block-library-video-tracks-editor__single-track-editor-label-language"
  }, (0, _element.createElement)(_components.TextControl
  /* eslint-disable jsx-a11y/no-autofocus */
  , {
    autoFocus: true
    /* eslint-enable jsx-a11y/no-autofocus */
    ,
    onChange: function onChange(newLabel) {
      return _onChange(_objectSpread(_objectSpread({}, track), {}, {
        label: newLabel
      }));
    },
    label: (0, _i18n.__)('Label'),
    value: label,
    help: (0, _i18n.__)('Title of track')
  }), (0, _element.createElement)(_components.TextControl, {
    onChange: function onChange(newSrcLang) {
      return _onChange(_objectSpread(_objectSpread({}, track), {}, {
        srcLang: newSrcLang
      }));
    },
    label: (0, _i18n.__)('Source language'),
    value: srcLang,
    help: (0, _i18n.__)('Language tag (en, fr, etc.)')
  })), (0, _element.createElement)(_components.SelectControl, {
    className: "block-library-video-tracks-editor__single-track-editor-kind-select",
    options: KIND_OPTIONS,
    value: kind,
    label: (0, _i18n.__)('Kind'),
    onChange: function onChange(newKind) {
      if (newKind === DEFAULT_KIND) {
        newKind = undefined;
      }

      _onChange(_objectSpread(_objectSpread({}, track), {}, {
        kind: newKind
      }));
    }
  }), (0, _element.createElement)("div", {
    className: "block-library-video-tracks-editor__single-track-editor-buttons-container"
  }, (0, _element.createElement)(_components.Button, {
    isSecondary: true,
    onClick: function onClick() {
      var changes = {};
      var hasChanges = false;

      if (label === '') {
        changes.label = (0, _i18n.__)('English');
        hasChanges = true;
      }

      if (srcLang === '') {
        changes.srcLang = 'en';
        hasChanges = true;
      }

      if (hasChanges) {
        _onChange(_objectSpread(_objectSpread({}, track), changes));
      }

      onClose();
    }
  }, (0, _i18n.__)('Close')), (0, _element.createElement)(_components.Button, {
    isDestructive: true,
    isLink: true,
    onClick: onRemove
  }, (0, _i18n.__)('Remove track')))));
}

function TracksEditor(_ref3) {
  var _ref3$tracks = _ref3.tracks,
      tracks = _ref3$tracks === void 0 ? [] : _ref3$tracks,
      _onChange2 = _ref3.onChange;
  var mediaUpload = (0, _data.useSelect)(function (select) {
    return select('core/block-editor').getSettings().mediaUpload;
  }, []);

  var _useState = (0, _element.useState)(null),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      trackBeingEdited = _useState2[0],
      setTrackBeingEdited = _useState2[1];

  if (!mediaUpload) {
    return null;
  }

  return (0, _element.createElement)(_components.Dropdown, {
    contentClassName: "block-library-video-tracks-editor",
    renderToggle: function renderToggle(_ref4) {
      var isOpen = _ref4.isOpen,
          onToggle = _ref4.onToggle;
      return (0, _element.createElement)(_components.ToolbarGroup, null, (0, _element.createElement)(_components.ToolbarButton, {
        label: (0, _i18n.__)('Text tracks'),
        showTooltip: true,
        "aria-expanded": isOpen,
        "aria-haspopup": "true",
        onClick: onToggle,
        icon: captionIcon
      }));
    },
    renderContent: function renderContent(_ref5) {
      (0, _objectDestructuringEmpty2.default)(_ref5);

      if (trackBeingEdited !== null) {
        return (0, _element.createElement)(SingleTrackEditor, {
          track: tracks[trackBeingEdited],
          onChange: function onChange(newTrack) {
            var newTracks = (0, _toConsumableArray2.default)(tracks);
            newTracks[trackBeingEdited] = newTrack;

            _onChange2(newTracks);
          },
          onClose: function onClose() {
            return setTrackBeingEdited(null);
          },
          onRemove: function onRemove() {
            _onChange2(tracks.filter(function (_track, index) {
              return index !== trackBeingEdited;
            }));

            setTrackBeingEdited(null);
          }
        });
      }

      return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_components.NavigableMenu, null, (0, _element.createElement)(TrackList, {
        tracks: tracks,
        onEditPress: setTrackBeingEdited
      }), (0, _element.createElement)(_components.MenuGroup, {
        className: "block-library-video-tracks-editor__add-tracks-container",
        label: (0, _i18n.__)('Add tracks')
      }, (0, _element.createElement)(_blockEditor.MediaUpload, {
        onSelect: function onSelect(_ref6) {
          var url = _ref6.url;
          var trackIndex = tracks.length;

          _onChange2([].concat((0, _toConsumableArray2.default)(tracks), [{
            src: url
          }]));

          setTrackBeingEdited(trackIndex);
        },
        allowedTypes: ALLOWED_TYPES,
        render: function render(_ref7) {
          var open = _ref7.open;
          return (0, _element.createElement)(_components.MenuItem, {
            icon: _icons.media,
            onClick: open
          }, (0, _i18n.__)('Open Media Library'));
        }
      }), (0, _element.createElement)(_blockEditor.MediaUploadCheck, null, (0, _element.createElement)(_components.FormFileUpload, {
        onChange: function onChange(event) {
          var files = event.target.files;
          var trackIndex = tracks.length;
          mediaUpload({
            allowedTypes: ALLOWED_TYPES,
            filesList: files,
            onFileChange: function onFileChange(_ref8) {
              var _ref9 = (0, _slicedToArray2.default)(_ref8, 1),
                  url = _ref9[0].url;

              var newTracks = (0, _toConsumableArray2.default)(tracks);

              if (!newTracks[trackIndex]) {
                newTracks[trackIndex] = {};
              }

              newTracks[trackIndex] = _objectSpread(_objectSpread({}, tracks[trackIndex]), {}, {
                src: url
              });

              _onChange2(newTracks);

              setTrackBeingEdited(trackIndex);
            }
          });
        },
        accept: ".vtt,text/vtt",
        render: function render(_ref10) {
          var openFileDialog = _ref10.openFileDialog;
          return (0, _element.createElement)(_components.MenuItem, {
            icon: _icons.upload,
            onClick: function onClick() {
              openFileDialog();
            }
          }, (0, _i18n.__)('Upload'));
        }
      })))));
    }
  });
}
//# sourceMappingURL=tracks-editor.js.map