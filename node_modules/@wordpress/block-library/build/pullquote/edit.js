"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classnames3 = _interopRequireDefault(require("classnames"));

var _lodash = require("lodash");

var _i18n = require("@wordpress/i18n");

var _blockEditor = require("@wordpress/block-editor");

var _blocks = require("@wordpress/blocks");

var _figure = require("./figure");

var _blockquote = require("./blockquote");

var _shared = require("./shared");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function PullQuoteEdit(_ref) {
  var colorUtils = _ref.colorUtils,
      textColor = _ref.textColor,
      _ref$attributes = _ref.attributes,
      value = _ref$attributes.value,
      citation = _ref$attributes.citation,
      setAttributes = _ref.setAttributes,
      setTextColor = _ref.setTextColor,
      setMainColor = _ref.setMainColor,
      mainColor = _ref.mainColor,
      isSelected = _ref.isSelected,
      insertBlocksAfter = _ref.insertBlocksAfter;
  var wasTextColorAutomaticallyComputed = (0, _element.useRef)(false);
  var blockProps = (0, _blockEditor.useBlockProps)();
  var _blockProps$style = blockProps.style,
      style = _blockProps$style === void 0 ? {} : _blockProps$style,
      className = blockProps.className;
  var isSolidColorStyle = (0, _lodash.includes)(className, _shared.SOLID_COLOR_CLASS);

  var newBlockProps = _objectSpread(_objectSpread({}, blockProps), {}, {
    className: (0, _classnames3.default)(className, (0, _defineProperty2.default)({
      'has-background': isSolidColorStyle && mainColor.color
    }, mainColor.class, isSolidColorStyle && mainColor.class)),
    style: isSolidColorStyle ? _objectSpread(_objectSpread({}, style), {}, {
      backgroundColor: mainColor.color
    }) : _objectSpread(_objectSpread({}, style), {}, {
      borderColor: mainColor.color
    })
  });

  function pullQuoteMainColorSetter(colorValue) {
    var needTextColor = !textColor.color || wasTextColorAutomaticallyComputed.current;
    var shouldSetTextColor = isSolidColorStyle && needTextColor;

    if (isSolidColorStyle) {
      // If we use the solid color style, set the color using the normal mechanism.
      setMainColor(colorValue);
    } else {
      // If we use the default style, set the color as a custom color to force the usage of an inline style.
      // Default style uses a border color for which classes are not available.
      setAttributes({
        customMainColor: colorValue
      });
    }

    if (shouldSetTextColor) {
      if (colorValue) {
        wasTextColorAutomaticallyComputed.current = true;
        setTextColor(colorUtils.getMostReadableColor(colorValue));
      } else if (wasTextColorAutomaticallyComputed.current) {
        // We have to unset our previously computed text color on unsetting the main color.
        wasTextColorAutomaticallyComputed.current = false;
        setTextColor();
      }
    }
  }

  function pullQuoteTextColorSetter(colorValue) {
    setTextColor(colorValue);
    wasTextColorAutomaticallyComputed.current = false;
  }

  (0, _element.useEffect)(function () {
    // If the block includes a named color and we switched from the
    // solid color style to the default style.
    if (mainColor && !isSolidColorStyle) {
      // Remove the named color, and set the color as a custom color.
      // This is done because named colors use classes, in the default style we use a border color,
      // and themes don't set classes for border colors.
      setAttributes({
        mainColor: undefined,
        customMainColor: mainColor.color
      });
    }
  }, [isSolidColorStyle, mainColor]);
  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_figure.Figure, newBlockProps, (0, _element.createElement)(_blockquote.BlockQuote, {
    style: {
      color: textColor.color
    },
    className: textColor.color && (0, _classnames3.default)('has-text-color', (0, _defineProperty2.default)({}, textColor.class, textColor.class))
  }, (0, _element.createElement)(_blockEditor.RichText, {
    identifier: "value",
    multiline: true,
    value: value,
    onChange: function onChange(nextValue) {
      return setAttributes({
        value: nextValue
      });
    },
    "aria-label": (0, _i18n.__)('Pullquote text'),
    placeholder: // translators: placeholder text used for the quote
    (0, _i18n.__)('Write quote…'),
    textAlign: "center"
  }), (!_blockEditor.RichText.isEmpty(citation) || isSelected) && (0, _element.createElement)(_blockEditor.RichText, {
    identifier: "citation",
    value: citation,
    "aria-label": (0, _i18n.__)('Pullquote citation text'),
    placeholder: // translators: placeholder text used for the citation
    (0, _i18n.__)('Write citation…'),
    onChange: function onChange(nextCitation) {
      return setAttributes({
        citation: nextCitation
      });
    },
    className: "wp-block-pullquote__citation",
    __unstableMobileNoFocusOnMount: true,
    textAlign: "center",
    __unstableOnSplitAtEnd: function __unstableOnSplitAtEnd() {
      return insertBlocksAfter((0, _blocks.createBlock)('core/paragraph'));
    }
  }))), _element.Platform.OS === 'web' && (0, _element.createElement)(_blockEditor.InspectorControls, null, (0, _element.createElement)(_blockEditor.PanelColorSettings, {
    title: (0, _i18n.__)('Color settings'),
    colorSettings: [{
      value: mainColor.color,
      onChange: pullQuoteMainColorSetter,
      label: (0, _i18n.__)('Main color')
    }, {
      value: textColor.color,
      onChange: pullQuoteTextColorSetter,
      label: (0, _i18n.__)('Text color')
    }]
  }, isSolidColorStyle && (0, _element.createElement)(_blockEditor.ContrastChecker, (0, _extends2.default)({
    textColor: textColor.color,
    backgroundColor: mainColor.color
  }, {
    isLargeText: false
  })))));
}

var _default = (0, _blockEditor.withColors)({
  mainColor: 'background-color',
  textColor: 'color'
})(PullQuoteEdit);

exports.default = _default;
//# sourceMappingURL=edit.js.map