"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classnames2 = _interopRequireDefault(require("classnames"));

var _blockEditor = require("@wordpress/block-editor");

var _components = require("@wordpress/components");

var _button = require("../button");

var _contentJustificationDropdown = _interopRequireDefault(require("./content-justification-dropdown"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
var ALLOWED_BLOCKS = [_button.name];
var BUTTONS_TEMPLATE = [['core/button']];

function ButtonsEdit(_ref) {
  var _classnames;

  var _ref$attributes = _ref.attributes,
      contentJustification = _ref$attributes.contentJustification,
      orientation = _ref$attributes.orientation,
      setAttributes = _ref.setAttributes;
  var blockProps = (0, _blockEditor.useBlockProps)({
    className: (0, _classnames2.default)((_classnames = {}, (0, _defineProperty2.default)(_classnames, "is-content-justification-".concat(contentJustification), contentJustification), (0, _defineProperty2.default)(_classnames, 'is-vertical', orientation === 'vertical'), _classnames))
  });
  var innerBlocksProps = (0, _blockEditor.__experimentalUseInnerBlocksProps)(blockProps, {
    allowedBlocks: ALLOWED_BLOCKS,
    template: BUTTONS_TEMPLATE,
    orientation: orientation,
    __experimentalLayout: {
      type: 'default',
      alignments: []
    },
    templateInsertUpdatesSelection: true
  });
  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_blockEditor.BlockControls, null, (0, _element.createElement)(_components.ToolbarGroup, null, (0, _element.createElement)(_components.ToolbarItem, null, function (toggleProps) {
    return (0, _element.createElement)(_contentJustificationDropdown.default, {
      toggleProps: toggleProps,
      value: contentJustification,
      onChange: function onChange(updatedValue) {
        setAttributes({
          contentJustification: updatedValue
        });
      }
    });
  }))), (0, _element.createElement)("div", innerBlocksProps));
}

var _default = ButtonsEdit;
exports.default = _default;
//# sourceMappingURL=edit.js.map