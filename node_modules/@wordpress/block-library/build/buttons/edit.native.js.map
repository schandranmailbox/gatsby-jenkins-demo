{"version":3,"sources":["@wordpress/block-library/src/buttons/edit.native.js"],"names":["ALLOWED_BLOCKS","buttonBlockName","BUTTONS_TEMPLATE","ButtonsEdit","contentJustification","attributes","clientId","isSelected","setAttributes","blockWidth","resizeObserver","sizes","maxWidth","setMaxWidth","spacing","styles","marginLeft","select","getBlockCount","_getBlockOrder","getBlockOrder","getBlockParents","getSelectedBlockClientId","selectedBlockClientId","selectedBlockParents","isInnerButtonSelected","shouldDelete","insertBlock","removeBlock","selectBlock","margins","parent","marginRight","width","onAddNextButton","selectedId","order","selectedButtonIndex","findIndex","i","index","length","insertedBlock","onChangeContentJustification","updatedValue","renderFooterAppender","appenderContainer","shouldRenderFooterAppender","toggleProps","current","undefined","type","alignments"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { debounce } from 'lodash';\nimport { View } from 'react-native';\n\n/**\n * WordPress dependencies\n */\nimport { BlockControls, InnerBlocks } from '@wordpress/block-editor';\nimport { createBlock } from '@wordpress/blocks';\nimport { useResizeObserver } from '@wordpress/compose';\nimport { useDispatch, useSelect } from '@wordpress/data';\nimport { useState, useEffect, useRef } from '@wordpress/element';\nimport { ToolbarGroup, ToolbarItem } from '@wordpress/components';\n\n/**\n * Internal dependencies\n */\nimport { name as buttonBlockName } from '../button/';\nimport styles from './editor.scss';\nimport ContentJustificationDropdown from './content-justification-dropdown';\n\nconst ALLOWED_BLOCKS = [ buttonBlockName ];\nconst BUTTONS_TEMPLATE = [ [ 'core/button' ] ];\n\nexport default function ButtonsEdit( {\n\tattributes: { contentJustification },\n\tclientId,\n\tisSelected,\n\tsetAttributes,\n\tblockWidth,\n} ) {\n\tconst [ resizeObserver, sizes ] = useResizeObserver();\n\tconst [ maxWidth, setMaxWidth ] = useState( 0 );\n\tconst { marginLeft: spacing } = styles.spacing;\n\n\tconst { getBlockOrder, isInnerButtonSelected, shouldDelete } = useSelect(\n\t\t( select ) => {\n\t\t\tconst {\n\t\t\t\tgetBlockCount,\n\t\t\t\tgetBlockOrder: _getBlockOrder,\n\t\t\t\tgetBlockParents,\n\t\t\t\tgetSelectedBlockClientId,\n\t\t\t} = select( 'core/block-editor' );\n\t\t\tconst selectedBlockClientId = getSelectedBlockClientId();\n\t\t\tconst selectedBlockParents = getBlockParents(\n\t\t\t\tselectedBlockClientId,\n\t\t\t\ttrue\n\t\t\t);\n\n\t\t\treturn {\n\t\t\t\tgetBlockOrder: _getBlockOrder,\n\t\t\t\tisInnerButtonSelected: selectedBlockParents[ 0 ] === clientId,\n\t\t\t\t// The purpose of `shouldDelete` check is giving the ability to\n\t\t\t\t// pass to mobile toolbar function called `onDelete` which removes\n\t\t\t\t// the whole `Buttons` container along with the last inner button\n\t\t\t\t// when there is exactly one button.\n\t\t\t\tshouldDelete: getBlockCount( clientId ) === 1,\n\t\t\t};\n\t\t},\n\t\t[ clientId ]\n\t);\n\n\tconst { insertBlock, removeBlock, selectBlock } = useDispatch(\n\t\t'core/block-editor'\n\t);\n\n\tuseEffect( () => {\n\t\tconst margins = 2 * styles.parent.marginRight;\n\t\tconst { width } = sizes || {};\n\t\tif ( width ) {\n\t\t\tsetMaxWidth( width - margins );\n\t\t}\n\t}, [ sizes ] );\n\n\tconst onAddNextButton = debounce( ( selectedId ) => {\n\t\tconst order = getBlockOrder( clientId );\n\t\tconst selectedButtonIndex = order.findIndex(\n\t\t\t( i ) => i === selectedId\n\t\t);\n\n\t\tconst index =\n\t\t\tselectedButtonIndex === -1 ? order.length + 1 : selectedButtonIndex;\n\n\t\tconst insertedBlock = createBlock( 'core/button' );\n\n\t\tinsertBlock( insertedBlock, index, clientId );\n\t\tselectBlock( insertedBlock.clientId );\n\t}, 200 );\n\n\tfunction onChangeContentJustification( updatedValue ) {\n\t\tsetAttributes( {\n\t\t\tcontentJustification: updatedValue,\n\t\t} );\n\t}\n\n\tconst renderFooterAppender = useRef( () => (\n\t\t<View style={ styles.appenderContainer }>\n\t\t\t<InnerBlocks.ButtonBlockAppender\n\t\t\t\tisFloating={ true }\n\t\t\t\tonAddBlock={ onAddNextButton }\n\t\t\t/>\n\t\t</View>\n\t) );\n\n\tconst shouldRenderFooterAppender = isSelected || isInnerButtonSelected;\n\n\treturn (\n\t\t<>\n\t\t\t<BlockControls>\n\t\t\t\t<ToolbarGroup>\n\t\t\t\t\t<ToolbarItem>\n\t\t\t\t\t\t{ ( toggleProps ) => (\n\t\t\t\t\t\t\t<ContentJustificationDropdown\n\t\t\t\t\t\t\t\ttoggleProps={ toggleProps }\n\t\t\t\t\t\t\t\tvalue={ contentJustification }\n\t\t\t\t\t\t\t\tonChange={ onChangeContentJustification }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) }\n\t\t\t\t\t</ToolbarItem>\n\t\t\t\t</ToolbarGroup>\n\t\t\t</BlockControls>\n\t\t\t{ resizeObserver }\n\t\t\t<InnerBlocks\n\t\t\t\tallowedBlocks={ ALLOWED_BLOCKS }\n\t\t\t\ttemplate={ BUTTONS_TEMPLATE }\n\t\t\t\trenderFooterAppender={\n\t\t\t\t\tshouldRenderFooterAppender && renderFooterAppender.current\n\t\t\t\t}\n\t\t\t\torientation=\"horizontal\"\n\t\t\t\thorizontalAlignment={ contentJustification }\n\t\t\t\tonDeleteBlock={\n\t\t\t\t\tshouldDelete ? () => removeBlock( clientId ) : undefined\n\t\t\t\t}\n\t\t\t\tonAddBlock={ onAddNextButton }\n\t\t\t\tparentWidth={ maxWidth }\n\t\t\t\tmarginHorizontal={ spacing }\n\t\t\t\tmarginVertical={ spacing }\n\t\t\t\t__experimentalLayout={ { type: 'default', alignments: [] } }\n\t\t\t\ttemplateInsertUpdatesSelection\n\t\t\t\tblockWidth={ blockWidth }\n\t\t\t/>\n\t\t</>\n\t);\n}\n"]}