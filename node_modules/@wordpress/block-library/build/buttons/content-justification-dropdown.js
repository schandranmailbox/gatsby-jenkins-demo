"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ContentJustificationDropdown;

var _element = require("@wordpress/element");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _icons = require("@wordpress/icons");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var DEFAULT_ALLOWED_VALUES = ['left', 'center', 'right'];
var CONTROLS = {
  left: {
    icon: _icons.justifyLeft,
    title: (0, _i18n.__)('Justify content left')
  },
  center: {
    icon: _icons.justifyCenter,
    title: (0, _i18n.__)('Justify content center')
  },
  right: {
    icon: _icons.justifyRight,
    title: (0, _i18n.__)('Justify content right')
  }
};
var DEFAULT_ICON = CONTROLS.left.icon;
/**
 * Dropdown for selecting a content justification option.
 *
 * @param {Object}   props                 Component props.
 * @param {string[]} [props.allowedValues] List of options to include. Default:
 *                                         ['left', 'center', 'right'].
 * @param {()=>void} props.onChange        Callback to run when an option is
 *                                         selected in the dropdown.
 * @param {Object}   props.toggleProps     Props to pass to the dropdown toggle.
 * @param {string}   props.value           The current content justification
 *                                         value.
 *
 * @return {WPComponent} The component.
 */

function ContentJustificationDropdown(_ref) {
  var _CONTROLS$value$icon, _CONTROLS$value;

  var onChange = _ref.onChange,
      _ref$allowedValues = _ref.allowedValues,
      allowedValues = _ref$allowedValues === void 0 ? DEFAULT_ALLOWED_VALUES : _ref$allowedValues,
      toggleProps = _ref.toggleProps,
      value = _ref.value;
  return (0, _element.createElement)(_components.DropdownMenu, {
    icon: (_CONTROLS$value$icon = (_CONTROLS$value = CONTROLS[value]) === null || _CONTROLS$value === void 0 ? void 0 : _CONTROLS$value.icon) !== null && _CONTROLS$value$icon !== void 0 ? _CONTROLS$value$icon : DEFAULT_ICON,
    label: (0, _i18n.__)('Change content justification'),
    controls: allowedValues.map(function (allowedValue) {
      return _objectSpread(_objectSpread({}, CONTROLS[allowedValue]), {}, {
        isActive: value === allowedValue,
        role: 'menuitemradio',
        onClick: function onClick() {
          return onChange(value === allowedValue ? undefined : allowedValue);
        }
      });
    }),
    toggleProps: toggleProps
  });
}
//# sourceMappingURL=content-justification-dropdown.js.map