import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { useEntityProp } from '@wordpress/core-data';
import { useSelect } from '@wordpress/data';
import { Icon, ToggleControl, PanelBody, withNotices } from '@wordpress/components';
import { InspectorControls, BlockControls, MediaPlaceholder, MediaReplaceFlow, BlockIcon, useBlockProps } from '@wordpress/block-editor';
import { __, sprintf } from '@wordpress/i18n';
import { postFeaturedImage } from '@wordpress/icons';
var ALLOWED_MEDIA_TYPES = ['image'];
var placeholderChip = createElement("div", {
  className: "post-featured-image_placeholder"
}, createElement(Icon, {
  icon: postFeaturedImage
}), createElement("p", null, " ", __('Featured Image')));

function PostFeaturedImageDisplay(_ref) {
  var isLink = _ref.attributes.isLink,
      setAttributes = _ref.setAttributes,
      _ref$context = _ref.context,
      postId = _ref$context.postId,
      postType = _ref$context.postType,
      noticeUI = _ref.noticeUI,
      noticeOperations = _ref.noticeOperations;

  var _useEntityProp = useEntityProp('postType', postType, 'featured_media', postId),
      _useEntityProp2 = _slicedToArray(_useEntityProp, 2),
      featuredImage = _useEntityProp2[0],
      setFeaturedImage = _useEntityProp2[1];

  var media = useSelect(function (select) {
    return featuredImage && select('core').getMedia(featuredImage);
  }, [featuredImage]);

  var onSelectImage = function onSelectImage(value) {
    if (value !== null && value !== void 0 && value.id) {
      setFeaturedImage(value.id);
    }
  };

  function onUploadError(message) {
    noticeOperations.removeAllNotices();
    noticeOperations.createErrorNotice(message);
  }

  var image;

  if (!featuredImage) {
    image = createElement(MediaPlaceholder, {
      icon: createElement(BlockIcon, {
        icon: postFeaturedImage
      }),
      onSelect: onSelectImage,
      notices: noticeUI,
      onError: onUploadError,
      accept: "image/*",
      allowedTypes: ALLOWED_MEDIA_TYPES,
      labels: {
        title: __('Featured image'),
        instructions: __('Upload a media file or pick one from your media library.')
      }
    });
  } else {
    // We have a Featured image so show a Placeholder if is loading.
    image = !media ? placeholderChip : createElement("img", {
      src: media.source_url,
      alt: media.alt_text || __('Featured image')
    });
  }

  return createElement(Fragment, null, createElement(InspectorControls, null, createElement(PanelBody, {
    title: __('Link settings')
  }, createElement(ToggleControl, {
    label: sprintf( // translators: %s: Name of the post type e.g: "post".
    __('Link to %s'), postType),
    onChange: function onChange() {
      return setAttributes({
        isLink: !isLink
      });
    },
    checked: isLink
  }))), createElement(BlockControls, null, !!media && createElement(MediaReplaceFlow, {
    mediaId: featuredImage,
    mediaURL: media.source_url,
    allowedTypes: ALLOWED_MEDIA_TYPES,
    accept: "image/*",
    onSelect: onSelectImage,
    onError: onUploadError
  })), createElement("div", useBlockProps(), image));
}

var PostFeaturedImageWithNotices = withNotices(PostFeaturedImageDisplay);
export default function PostFeaturedImageEdit(props) {
  var _props$context;

  if (!((_props$context = props.context) !== null && _props$context !== void 0 && _props$context.postId)) {
    return placeholderChip;
  }

  return createElement(PostFeaturedImageWithNotices, props);
}
//# sourceMappingURL=edit.js.map