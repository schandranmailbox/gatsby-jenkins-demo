import _extends from "@babel/runtime/helpers/esm/extends";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import { View, Dimensions } from 'react-native';
import { dropRight, times, map, compact, delay } from 'lodash';
/**
 * WordPress dependencies
 */

import { __ } from '@wordpress/i18n';
import { PanelBody, RangeControl, FooterMessageControl, UnitControl, getValueAndUnit, GlobalStylesContext, alignmentHelpers } from '@wordpress/components';
import { InspectorControls, InnerBlocks, BlockControls, BlockVerticalAlignmentToolbar, BlockVariationPicker } from '@wordpress/block-editor';
import { withDispatch, useSelect } from '@wordpress/data';
import { useEffect, useState, useContext, useMemo, useCallback } from '@wordpress/element';
import { useResizeObserver } from '@wordpress/compose';
import { createBlock } from '@wordpress/blocks';
import { columns } from '@wordpress/icons';
/**
 * Internal dependencies
 */

import variations from './variations';
import styles from './editor.scss';
import { hasExplicitPercentColumnWidths, getMappedColumnWidths, getRedistributedColumnWidths, toWidthPrecision, getWidths, getWidthWithUnit, isPercentageUnit, CSS_UNITS } from './utils';
import { getColumnsInRow, calculateContainerWidth, getContentWidths } from './columnCalculations.native';
import ColumnsPreview from '../column/column-preview';
/**
 * Allowed blocks constant is passed to InnerBlocks precisely as specified here.
 * The contents of the array should never change.
 * The array should contain the name of each block that is allowed.
 * In columns block, the only block we allow is 'core/column'.
 *
 * @constant
 * @type {string[]}
 */

var ALLOWED_BLOCKS = ['core/column'];
/**
 * Number of columns to assume for template in case the user opts to skip
 * template option selection.
 *
 * @type {number}
 */

var DEFAULT_COLUMNS_NUM = 2;
/**
 * Minimum number of columns in a row
 *
 * @type {number}
 */

var MIN_COLUMNS_NUM = 1;
var isWider = alignmentHelpers.isWider,
    isFullWidth = alignmentHelpers.isFullWidth;

function ColumnsEditContainer(_ref) {
  var attributes = _ref.attributes,
      updateAlignment = _ref.updateAlignment,
      updateColumns = _ref.updateColumns,
      columnCount = _ref.columnCount,
      isSelected = _ref.isSelected,
      onDeleteBlock = _ref.onDeleteBlock,
      innerColumns = _ref.innerColumns,
      updateInnerColumnWidth = _ref.updateInnerColumnWidth,
      editorSidebarOpened = _ref.editorSidebarOpened;

  var _useResizeObserver = useResizeObserver(),
      _useResizeObserver2 = _slicedToArray(_useResizeObserver, 2),
      resizeListener = _useResizeObserver2[0],
      sizes = _useResizeObserver2[1];

  var _useState = useState(MIN_COLUMNS_NUM),
      _useState2 = _slicedToArray(_useState, 2),
      columnsInRow = _useState2[0],
      setColumnsInRow = _useState2[1];

  var screenWidth = Math.floor(Dimensions.get('window').width);
  var globalStyles = useContext(GlobalStylesContext);
  var verticalAlignment = attributes.verticalAlignment,
      align = attributes.align;

  var _ref2 = sizes || {},
      width = _ref2.width;

  useEffect(function () {
    if (columnCount === 0) {
      var newColumnCount = columnCount || DEFAULT_COLUMNS_NUM;
      updateColumns(columnCount, newColumnCount);
    }
  }, []);
  useEffect(function () {
    if (width) {
      if (getColumnsInRow(width, columnCount) !== columnsInRow) {
        setColumnsInRow(getColumnsInRow(width, columnCount));
      }
    }
  }, [width, columnCount]);

  var renderAppender = function renderAppender() {
    var isEqualWidth = width === screenWidth;

    if (isSelected) {
      return createElement(View, {
        style: (isWider(screenWidth, 'mobile') || isEqualWidth) && styles.columnAppender
      }, createElement(InnerBlocks.ButtonBlockAppender, {
        onAddBlock: onAddBlock
      }));
    }

    return null;
  };

  var contentWidths = useMemo(function () {
    return getContentWidths(columnsInRow, width, columnCount, innerColumns, globalStyles);
  }, [width, columnsInRow, columnCount, innerColumns, globalStyles]);
  var onAddBlock = useCallback(function () {
    updateColumns(columnCount, columnCount + 1);
  }, [columnCount]);

  var onChangeWidth = function onChangeWidth(nextWidth, valueUnit, columnId) {
    var widthWithUnit = getWidthWithUnit(nextWidth, valueUnit);
    updateInnerColumnWidth(widthWithUnit, columnId);
  };

  var onChangeUnit = function onChangeUnit(nextUnit, index, columnId) {
    var widthWithoutUnit = parseFloat(getWidths(innerColumns)[index]);
    var widthWithUnit = getWidthWithUnit(widthWithoutUnit, nextUnit);
    updateInnerColumnWidth(widthWithUnit, columnId);
  };

  var _onChange = function onChange(nextWidth, valueUnit, columnId) {
    if (isPercentageUnit(valueUnit) || !valueUnit) {
      return;
    }

    onChangeWidth(nextWidth, valueUnit, columnId);
  };

  var getColumnsSliders = function getColumnsSliders() {
    if (!editorSidebarOpened || !isSelected) {
      return null;
    }

    return innerColumns.map(function (column, index) {
      var _ref3 = getValueAndUnit(column.attributes.width) || {},
          _ref3$valueUnit = _ref3.valueUnit,
          valueUnit = _ref3$valueUnit === void 0 ? '%' : _ref3$valueUnit;

      return createElement(UnitControl, {
        label: "Column ".concat(index + 1),
        key: "".concat(column.clientId, "-").concat(getWidths(innerColumns).length),
        min: 1,
        max: isPercentageUnit(valueUnit) || !valueUnit ? 100 : undefined,
        decimalNum: 1,
        value: getWidths(innerColumns)[index],
        onChange: function onChange(nextWidth) {
          _onChange(nextWidth, valueUnit, column.clientId);
        },
        onUnitChange: function onUnitChange(nextUnit) {
          return onChangeUnit(nextUnit, index, column.clientId);
        },
        onComplete: function onComplete(nextWidth) {
          onChangeWidth(nextWidth, valueUnit, column.clientId);
        },
        unit: valueUnit,
        units: CSS_UNITS,
        preview: createElement(ColumnsPreview, {
          columnWidths: getWidths(innerColumns, false),
          selectedColumnIndex: index
        })
      });
    });
  };

  return createElement(Fragment, null, createElement(InspectorControls, null, createElement(PanelBody, {
    title: __('Columns Settings')
  }, createElement(RangeControl, {
    label: __('Number of columns'),
    icon: columns,
    value: columnCount,
    onChange: function onChange(value) {
      return updateColumns(columnCount, value);
    },
    min: MIN_COLUMNS_NUM,
    max: columnCount + 1,
    type: "stepper"
  }), getColumnsSliders()), createElement(PanelBody, null, createElement(FooterMessageControl, {
    label: __('Note: Column layout may vary between themes and screen sizes')
  }))), createElement(BlockControls, null, createElement(BlockVerticalAlignmentToolbar, {
    onChange: updateAlignment,
    value: verticalAlignment
  })), createElement(View, {
    style: isSelected && styles.innerBlocksSelected
  }, resizeListener, width && createElement(InnerBlocks, {
    renderAppender: renderAppender,
    orientation: columnsInRow > 1 ? 'horizontal' : undefined,
    horizontal: true,
    allowedBlocks: ALLOWED_BLOCKS,
    contentResizeMode: "stretch",
    onAddBlock: onAddBlock,
    onDeleteBlock: columnCount === 1 ? onDeleteBlock : undefined,
    blockWidth: width,
    contentStyle: contentWidths,
    parentWidth: isFullWidth(align) && columnCount === 0 ? screenWidth : calculateContainerWidth(width, columnsInRow)
  })));
}

var ColumnsEditContainerWrapper = withDispatch(function (dispatch, ownProps, registry) {
  return {
    /**
     * Update all child Column blocks with a new vertical alignment setting
     * based on whatever alignment is passed in. This allows change to parent
     * to overide anything set on a individual column basis.
     *
     * @param {string} verticalAlignment the vertical alignment setting
     */
    updateAlignment: function updateAlignment(verticalAlignment) {
      var clientId = ownProps.clientId,
          setAttributes = ownProps.setAttributes;

      var _dispatch = dispatch('core/block-editor'),
          updateBlockAttributes = _dispatch.updateBlockAttributes;

      var _registry$select = registry.select('core/block-editor'),
          getBlockOrder = _registry$select.getBlockOrder; // Update own alignment.


      setAttributes({
        verticalAlignment: verticalAlignment
      }); // Update all child Column Blocks to match

      var innerBlockClientIds = getBlockOrder(clientId);
      innerBlockClientIds.forEach(function (innerBlockClientId) {
        updateBlockAttributes(innerBlockClientId, {
          verticalAlignment: verticalAlignment
        });
      });
    },
    updateInnerColumnWidth: function updateInnerColumnWidth(value, columnId) {
      var _dispatch2 = dispatch('core/block-editor'),
          updateBlockAttributes = _dispatch2.updateBlockAttributes;

      updateBlockAttributes(columnId, {
        width: value
      });
    },
    updateBlockSettings: function updateBlockSettings(settings) {
      var clientId = ownProps.clientId;

      var _dispatch3 = dispatch('core/block-editor'),
          updateBlockListSettings = _dispatch3.updateBlockListSettings;

      updateBlockListSettings(clientId, settings);
    },

    /**
     * Updates the column columnCount, including necessary revisions to child Column
     * blocks to grant required or redistribute available space.
     *
     * @param {number} previousColumns Previous column columnCount.
     * @param {number} newColumns      New column columnCount.
     */
    updateColumns: function updateColumns(previousColumns, newColumns) {
      var clientId = ownProps.clientId;

      var _dispatch4 = dispatch('core/block-editor'),
          replaceInnerBlocks = _dispatch4.replaceInnerBlocks;

      var _registry$select2 = registry.select('core/block-editor'),
          getBlocks = _registry$select2.getBlocks,
          getBlockAttributes = _registry$select2.getBlockAttributes;

      var innerBlocks = getBlocks(clientId);
      var hasExplicitWidths = hasExplicitPercentColumnWidths(innerBlocks); // Redistribute available width for existing inner blocks.

      var isAddingColumn = newColumns > previousColumns; // Get verticalAlignment from Columns block to set the same to new Column

      var _ref4 = getBlockAttributes(clientId) || {},
          verticalAlignment = _ref4.verticalAlignment;

      if (isAddingColumn && hasExplicitWidths) {
        // If adding a new column, assign width to the new column equal to
        // as if it were `1 / columns` of the total available space.
        var newColumnWidth = toWidthPrecision(100 / newColumns); // Redistribute in consideration of pending block insertion as
        // constraining the available working width.

        var widths = getRedistributedColumnWidths(innerBlocks, 100 - newColumnWidth);
        innerBlocks = [].concat(_toConsumableArray(getMappedColumnWidths(innerBlocks, widths)), _toConsumableArray(times(newColumns - previousColumns, function () {
          return createBlock('core/column', {
            width: newColumnWidth,
            verticalAlignment: verticalAlignment
          });
        })));
      } else if (isAddingColumn) {
        innerBlocks = [].concat(_toConsumableArray(innerBlocks), _toConsumableArray(times(newColumns - previousColumns, function () {
          return createBlock('core/column', {
            verticalAlignment: verticalAlignment
          });
        })));
      } else {
        // The removed column will be the last of the inner blocks.
        innerBlocks = dropRight(innerBlocks, previousColumns - newColumns);

        if (hasExplicitWidths) {
          // Redistribute as if block is already removed.
          var _widths = getRedistributedColumnWidths(innerBlocks, 100);

          innerBlocks = getMappedColumnWidths(innerBlocks, _widths);
        }
      }

      replaceInnerBlocks(clientId, innerBlocks);
    },
    onAddNextColumn: function onAddNextColumn() {
      var clientId = ownProps.clientId;

      var _dispatch5 = dispatch('core/block-editor'),
          replaceInnerBlocks = _dispatch5.replaceInnerBlocks,
          selectBlock = _dispatch5.selectBlock;

      var _registry$select3 = registry.select('core/block-editor'),
          getBlocks = _registry$select3.getBlocks,
          getBlockAttributes = _registry$select3.getBlockAttributes; // Get verticalAlignment from Columns block to set the same to new Column


      var _getBlockAttributes = getBlockAttributes(clientId),
          verticalAlignment = _getBlockAttributes.verticalAlignment;

      var innerBlocks = getBlocks(clientId);
      var insertedBlock = createBlock('core/column', {
        verticalAlignment: verticalAlignment
      });
      replaceInnerBlocks(clientId, [].concat(_toConsumableArray(innerBlocks), [insertedBlock]), true);
      selectBlock(insertedBlock.clientId);
    },
    onDeleteBlock: function onDeleteBlock() {
      var clientId = ownProps.clientId;

      var _dispatch6 = dispatch('core/block-editor'),
          removeBlock = _dispatch6.removeBlock;

      removeBlock(clientId);
    }
  };
})(ColumnsEditContainer);

var ColumnsEdit = function ColumnsEdit(props) {
  var clientId = props.clientId,
      isSelected = props.isSelected;

  var _useSelect = useSelect(function (select) {
    var _getBlockAttributes2;

    var _select = select('core/block-editor'),
        getBlockCount = _select.getBlockCount,
        getBlock = _select.getBlock,
        getBlockParents = _select.getBlockParents,
        getBlockAttributes = _select.getBlockAttributes;

    var _select2 = select('core/edit-post'),
        isEditorSidebarOpened = _select2.isEditorSidebarOpened;

    var block = getBlock(clientId);
    var innerBlocks = block === null || block === void 0 ? void 0 : block.innerBlocks;
    var isContentEmpty = map(innerBlocks, function (innerBlock) {
      return innerBlock.innerBlocks.length;
    });
    var parents = getBlockParents(clientId, true);
    return {
      columnCount: getBlockCount(clientId),
      isDefaultColumns: !compact(isContentEmpty).length,
      innerColumns: innerBlocks,
      hasParents: !!parents.length,
      parentBlockAlignment: (_getBlockAttributes2 = getBlockAttributes(parents[0])) === null || _getBlockAttributes2 === void 0 ? void 0 : _getBlockAttributes2.align,
      editorSidebarOpened: isEditorSidebarOpened()
    };
  }, [clientId]),
      columnCount = _useSelect.columnCount,
      isDefaultColumns = _useSelect.isDefaultColumns,
      _useSelect$innerColum = _useSelect.innerColumns,
      innerColumns = _useSelect$innerColum === void 0 ? [] : _useSelect$innerColum,
      hasParents = _useSelect.hasParents,
      parentBlockAlignment = _useSelect.parentBlockAlignment,
      editorSidebarOpened = _useSelect.editorSidebarOpened;

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isVisible = _useState4[0],
      setIsVisible = _useState4[1];

  useEffect(function () {
    if (isSelected && isDefaultColumns) {
      delay(function () {
        return setIsVisible(true);
      }, 100);
    }
  }, []);
  return createElement(Fragment, null, createElement(ColumnsEditContainerWrapper, _extends({
    columnCount: columnCount,
    innerColumns: innerColumns,
    hasParents: hasParents,
    parentBlockAlignment: parentBlockAlignment,
    editorSidebarOpened: editorSidebarOpened
  }, props)), createElement(BlockVariationPicker, {
    variations: variations,
    onClose: function onClose() {
      return setIsVisible(false);
    },
    clientId: clientId,
    isVisible: isVisible
  }));
};

export default ColumnsEdit;
//# sourceMappingURL=edit.native.js.map