import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { useSelect, useDispatch } from '@wordpress/data';
import { useEntityBlockEditor, useEntityProp, store as coreStore } from '@wordpress/core-data';
import { Placeholder, Spinner, ToolbarGroup, ToolbarButton, TextControl, PanelBody } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { __experimentalUseInnerBlocksProps as useInnerBlocksProps, __experimentalUseNoRecursiveRenders as useNoRecursiveRenders, InnerBlocks, BlockControls, InspectorControls, useBlockProps, Warning } from '@wordpress/block-editor';
import { store as reusableBlocksStore } from '@wordpress/reusable-blocks';
import { ungroup } from '@wordpress/icons';
export default function ReusableBlockEdit(_ref) {
  var ref = _ref.attributes.ref,
      clientId = _ref.clientId;

  var _useNoRecursiveRender = useNoRecursiveRenders(ref),
      _useNoRecursiveRender2 = _slicedToArray(_useNoRecursiveRender, 2),
      hasAlreadyRendered = _useNoRecursiveRender2[0],
      RecursionProvider = _useNoRecursiveRender2[1];

  var _useSelect = useSelect(function (select) {
    var persistedBlock = select(coreStore).getEntityRecord('postType', 'wp_block', ref);
    var hasResolvedBlock = select(coreStore).hasFinishedResolution('getEntityRecord', ['postType', 'wp_block', ref]);
    return {
      hasResolved: hasResolvedBlock,
      isMissing: hasResolvedBlock && !persistedBlock
    };
  }, [ref, clientId]),
      isMissing = _useSelect.isMissing,
      hasResolved = _useSelect.hasResolved;

  var _useDispatch = useDispatch(reusableBlocksStore),
      convertBlockToStatic = _useDispatch.__experimentalConvertBlockToStatic;

  var _useEntityBlockEditor = useEntityBlockEditor('postType', 'wp_block', {
    id: ref
  }),
      _useEntityBlockEditor2 = _slicedToArray(_useEntityBlockEditor, 3),
      blocks = _useEntityBlockEditor2[0],
      onInput = _useEntityBlockEditor2[1],
      onChange = _useEntityBlockEditor2[2];

  var _useEntityProp = useEntityProp('postType', 'wp_block', 'title', ref),
      _useEntityProp2 = _slicedToArray(_useEntityProp, 2),
      title = _useEntityProp2[0],
      setTitle = _useEntityProp2[1];

  var innerBlocksProps = useInnerBlocksProps({}, {
    value: blocks,
    onInput: onInput,
    onChange: onChange,
    renderAppender: blocks !== null && blocks !== void 0 && blocks.length ? undefined : InnerBlocks.ButtonBlockAppender
  });
  var blockProps = useBlockProps();

  if (hasAlreadyRendered) {
    return createElement("div", blockProps, createElement(Warning, null, __('Block cannot be rendered inside itself.')));
  }

  if (isMissing) {
    return createElement("div", blockProps, createElement(Warning, null, __('Block has been deleted or is unavailable.')));
  }

  if (!hasResolved) {
    return createElement("div", blockProps, createElement(Placeholder, null, createElement(Spinner, null)));
  }

  return createElement(RecursionProvider, null, createElement("div", blockProps, createElement(BlockControls, null, createElement(ToolbarGroup, null, createElement(ToolbarButton, {
    onClick: function onClick() {
      return convertBlockToStatic(clientId);
    },
    label: __('Convert to regular blocks'),
    icon: ungroup,
    showTooltip: true
  }))), createElement(InspectorControls, null, createElement(PanelBody, null, createElement(TextControl, {
    label: __('Name'),
    value: title,
    onChange: setTitle
  }))), createElement("div", {
    className: "block-library-block__reusable-block-container"
  }, createElement("div", innerBlocksProps))));
}
//# sourceMappingURL=edit.js.map