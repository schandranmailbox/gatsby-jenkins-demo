import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { __ } from '@wordpress/i18n';
import { ToggleControl, SelectControl } from '@wordpress/components';
import { useMemo, useCallback } from '@wordpress/element';
var options = [{
  value: 'auto',
  label: __('Auto')
}, {
  value: 'metadata',
  label: __('Metadata')
}, {
  value: 'none',
  label: __('None')
}];

var VideoSettings = function VideoSettings(_ref) {
  var setAttributes = _ref.setAttributes,
      attributes = _ref.attributes;
  var autoplay = attributes.autoplay,
      controls = attributes.controls,
      loop = attributes.loop,
      muted = attributes.muted,
      playsInline = attributes.playsInline,
      preload = attributes.preload;
  var getAutoplayHelp = useCallback(function (checked) {
    return checked ? __('Note: Autoplaying videos may cause usability issues for some visitors.') : null;
  }, []);
  var toggleFactory = useMemo(function () {
    var toggleAttribute = function toggleAttribute(attribute) {
      return function (newValue) {
        setAttributes(_defineProperty({}, attribute, newValue));
      };
    };

    return {
      autoplay: toggleAttribute('autoplay'),
      loop: toggleAttribute('loop'),
      muted: toggleAttribute('muted'),
      controls: toggleAttribute('controls'),
      playsInline: toggleAttribute('playsInline')
    };
  }, []);
  var onChangePreload = useCallback(function (value) {
    setAttributes({
      preload: value
    });
  }, []);
  return createElement(Fragment, null, createElement(ToggleControl, {
    label: __('Autoplay'),
    onChange: toggleFactory.autoplay,
    checked: autoplay,
    help: getAutoplayHelp
  }), createElement(ToggleControl, {
    label: __('Loop'),
    onChange: toggleFactory.loop,
    checked: loop
  }), createElement(ToggleControl, {
    label: __('Muted'),
    onChange: toggleFactory.muted,
    checked: muted
  }), createElement(ToggleControl, {
    label: __('Playback controls'),
    onChange: toggleFactory.controls,
    checked: controls
  }), createElement(ToggleControl, {
    label: __('Play inline'),
    onChange: toggleFactory.playsInline,
    checked: playsInline
  }), createElement(SelectControl, {
    label: __('Preload'),
    value: preload,
    onChange: onChangePreload,
    options: options
  }));
};

export default VideoSettings;
//# sourceMappingURL=edit-common-settings.js.map