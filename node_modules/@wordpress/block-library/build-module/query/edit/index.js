import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { createElement, Fragment } from "@wordpress/element";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * WordPress dependencies
 */
import { useSelect } from '@wordpress/data';
import { useInstanceId } from '@wordpress/compose';
import { useEffect } from '@wordpress/element';
import { BlockControls, useBlockProps, __experimentalUseInnerBlocksProps as useInnerBlocksProps } from '@wordpress/block-editor';
/**
 * Internal dependencies
 */

import QueryToolbar from './query-toolbar';
import QueryProvider from './query-provider';
import QueryInspectorControls from './query-inspector-controls';
import QueryPlaceholder from './query-placeholder';
import { DEFAULTS_POSTS_PER_PAGE } from '../constants';
var TEMPLATE = [['core/query-loop']];
export function QueryContent(_ref) {
  var attributes = _ref.attributes,
      postId = _ref.context.postId,
      setAttributes = _ref.setAttributes;
  var queryId = attributes.queryId,
      query = attributes.query,
      layout = attributes.layout;
  var instanceId = useInstanceId(QueryContent);
  var blockProps = useBlockProps();
  var innerBlocksProps = useInnerBlocksProps({}, {
    template: TEMPLATE
  });

  var _useSelect = useSelect(function (select) {
    var _select = select('core/block-editor'),
        getSettings = _select.getSettings;

    return {
      postsPerPage: +getSettings().postsPerPage || DEFAULTS_POSTS_PER_PAGE
    };
  }, []),
      postsPerPage = _useSelect.postsPerPage; // Changes in query property (which is an object) need to be in the same callback,
  // because updates are batched after the render and changes in different query properties
  // would cause to overide previous wanted changes.


  useEffect(function () {
    var _query$exclude;

    var newQuery = {};

    if (postId && !((_query$exclude = query.exclude) !== null && _query$exclude !== void 0 && _query$exclude.length)) {
      newQuery.exclude = [postId];
    }

    if (!query.perPage && postsPerPage) {
      newQuery.perPage = postsPerPage;
    }

    if (!!Object.keys(newQuery).length) {
      updateQuery(newQuery);
    }
  }, [query.perPage, query.exclude, query.inherit, postId]); // We need this for multi-query block pagination.
  // Query parameters for each block are scoped to their ID.

  useEffect(function () {
    if (!queryId) {
      setAttributes({
        queryId: instanceId
      });
    }
  }, [queryId, instanceId]);

  var updateQuery = function updateQuery(newQuery) {
    return setAttributes({
      query: _objectSpread(_objectSpread({}, query), newQuery)
    });
  };

  var updateLayout = function updateLayout(newLayout) {
    return setAttributes({
      layout: _objectSpread(_objectSpread({}, layout), newLayout)
    });
  };

  return createElement(Fragment, null, createElement(QueryInspectorControls, {
    attributes: attributes,
    setQuery: updateQuery,
    setLayout: updateLayout
  }), createElement(BlockControls, null, createElement(QueryToolbar, {
    attributes: attributes,
    setQuery: updateQuery,
    setLayout: updateLayout
  })), createElement("div", blockProps, createElement(QueryProvider, null, createElement("div", innerBlocksProps))));
}

var QueryEdit = function QueryEdit(props) {
  var clientId = props.clientId;
  var hasInnerBlocks = useSelect(function (select) {
    return !!select('core/block-editor').getBlocks(clientId).length;
  }, [clientId]);
  var Component = hasInnerBlocks ? QueryContent : QueryPlaceholder;
  return createElement(Component, props);
};

export default QueryEdit;
export * from './query-provider';
//# sourceMappingURL=index.js.map