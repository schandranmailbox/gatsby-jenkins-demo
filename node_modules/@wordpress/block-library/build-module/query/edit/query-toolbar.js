import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { ToolbarGroup, Dropdown, ToolbarButton, BaseControl, __experimentalNumberControl as NumberControl } from '@wordpress/components';
import { useInstanceId } from '@wordpress/compose';
import { __ } from '@wordpress/i18n';
import { settings, list, grid } from '@wordpress/icons';
export default function QueryToolbar(_ref) {
  var _ref$attributes = _ref.attributes,
      query = _ref$attributes.query,
      layout = _ref$attributes.layout,
      setQuery = _ref.setQuery,
      setLayout = _ref.setLayout;
  var maxPageInputId = useInstanceId(QueryToolbar, 'blocks-query-pagination-max-page-input');
  var layoutControls = [{
    icon: list,
    title: __('List view'),
    onClick: function onClick() {
      return setLayout({
        type: 'list'
      });
    },
    isActive: (layout === null || layout === void 0 ? void 0 : layout.type) === 'list'
  }, {
    icon: grid,
    title: __('Grid view'),
    onClick: function onClick() {
      return setLayout({
        type: 'flex',
        columns: (layout === null || layout === void 0 ? void 0 : layout.columns) || 3
      });
    },
    isActive: (layout === null || layout === void 0 ? void 0 : layout.type) === 'flex'
  }];
  return createElement(Fragment, null, !query.inherit && createElement(ToolbarGroup, null, createElement(Dropdown, {
    contentClassName: "block-library-query-toolbar__popover",
    renderToggle: function renderToggle(_ref2) {
      var onToggle = _ref2.onToggle;
      return createElement(ToolbarButton, {
        icon: settings,
        label: __('Display settings'),
        onClick: onToggle
      });
    },
    renderContent: function renderContent() {
      return createElement(Fragment, null, createElement(BaseControl, null, createElement(NumberControl, {
        __unstableInputWidth: "60px",
        label: __('Items per Page'),
        labelPosition: "edge",
        min: 1,
        max: 100,
        onChange: function onChange(value) {
          var _value;

          return setQuery({
            perPage: (_value = +value) !== null && _value !== void 0 ? _value : -1
          });
        },
        step: "1",
        value: query.perPage,
        isDragEnabled: false
      })), createElement(BaseControl, null, createElement(NumberControl, {
        __unstableInputWidth: "60px",
        label: __('Offset'),
        labelPosition: "edge",
        min: 0,
        max: 100,
        onChange: function onChange(value) {
          return setQuery({
            offset: +value
          });
        },
        step: "1",
        value: query.offset,
        isDragEnabled: false
      })), createElement(BaseControl, {
        id: maxPageInputId,
        help: __('Limit the pages you want to show, even if the query has more results. To show all pages use 0 (zero).')
      }, createElement(NumberControl, {
        id: maxPageInputId,
        __unstableInputWidth: "60px",
        label: __('Max page to show'),
        labelPosition: "edge",
        min: 0,
        onChange: function onChange(value) {
          return setQuery({
            pages: +value
          });
        },
        step: "1",
        value: query.pages,
        isDragEnabled: false
      })));
    }
  })), createElement(ToolbarGroup, {
    controls: layoutControls
  }));
}
//# sourceMappingURL=query-toolbar.js.map