import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import classNames from 'classnames';
/**
 * WordPress dependencies
 */

import { Fragment, useEffect } from '@wordpress/element';
import { BlockControls, __experimentalUseInnerBlocksProps as useInnerBlocksProps, useBlockProps, InspectorControls, ContrastChecker, PanelColorSettings, withColors } from '@wordpress/block-editor';
import { DropdownMenu, MenuGroup, MenuItem, PanelBody, ToggleControl, ToolbarItem, ToolbarGroup } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { check } from '@wordpress/icons';
var ALLOWED_BLOCKS = ['core/social-link'];
var sizeOptions = [{
  name: __('Small'),
  value: 'has-small-icon-size'
}, {
  name: __('Normal'),
  value: 'has-normal-icon-size'
}, {
  name: __('Large'),
  value: 'has-large-icon-size'
}, {
  name: __('Huge'),
  value: 'has-huge-icon-size'
}];
export function SocialLinksEdit(props) {
  var _attributes$className;

  var attributes = props.attributes,
      iconBackgroundColor = props.iconBackgroundColor,
      iconColor = props.iconColor,
      setAttributes = props.setAttributes,
      setIconBackgroundColor = props.setIconBackgroundColor,
      setIconColor = props.setIconColor;
  var iconBackgroundColorValue = attributes.iconBackgroundColorValue,
      iconColorValue = attributes.iconColorValue,
      openInNewTab = attributes.openInNewTab,
      size = attributes.size; // Remove icon background color if logos only style selected.

  var logosOnly = ((_attributes$className = attributes.className) === null || _attributes$className === void 0 ? void 0 : _attributes$className.indexOf('is-style-logos-only')) >= 0;
  useEffect(function () {
    if (logosOnly) {
      setAttributes({
        iconBackgroundColor: undefined,
        customIconBackgroundColor: undefined,
        iconBackgroundColorValue: undefined
      });
    }
  }, [logosOnly, setAttributes]);
  var SocialPlaceholder = createElement("div", {
    className: "wp-block-social-links__social-placeholder"
  }, createElement("div", {
    className: "wp-social-link"
  }), createElement("div", {
    className: "wp-block-social-links__social-placeholder-icons"
  }, createElement("div", {
    className: "wp-social-link wp-social-link-twitter"
  }), createElement("div", {
    className: "wp-social-link wp-social-link-facebook"
  }), createElement("div", {
    className: "wp-social-link wp-social-link-instagram"
  }))); // Fallback color values are used maintain selections in case switching
  // themes and named colors in palette do not match.

  var className = classNames(size, {
    'has-icon-color': iconColor.color || iconColorValue,
    'has-icon-background-color': iconBackgroundColor.color || iconBackgroundColorValue
  });
  var style = {
    '--wp--social-links--icon-color': iconColor.color || iconColorValue,
    '--wp--social-links--icon-background-color': iconBackgroundColor.color || iconBackgroundColorValue
  };
  var blockProps = useBlockProps({
    className: className,
    style: style
  });
  var innerBlocksProps = useInnerBlocksProps(blockProps, {
    allowedBlocks: ALLOWED_BLOCKS,
    orientation: 'horizontal',
    placeholder: SocialPlaceholder,
    templateLock: false,
    __experimentalAppenderTagName: 'li'
  });
  var POPOVER_PROPS = {
    position: 'bottom right',
    isAlternate: true
  };
  return createElement(Fragment, null, createElement(BlockControls, null, createElement(ToolbarGroup, null, createElement(ToolbarItem, null, function (toggleProps) {
    return createElement(DropdownMenu, {
      label: __('Size'),
      text: __('Size'),
      icon: null,
      popoverProps: POPOVER_PROPS,
      toggleProps: toggleProps
    }, function (_ref) {
      var onClose = _ref.onClose;
      return createElement(MenuGroup, null, sizeOptions.map(function (entry) {
        return createElement(MenuItem, {
          icon: (size === entry.value || !size && entry.value === 'has-normal-icon-size') && check,
          isSelected: size === entry.value,
          key: entry.value,
          onClick: function onClick() {
            setAttributes({
              size: entry.value
            });
          },
          onClose: onClose,
          role: "menuitemradio"
        }, entry.name);
      }));
    });
  }))), createElement(InspectorControls, null, createElement(PanelBody, {
    title: __('Link settings')
  }, createElement(ToggleControl, {
    label: __('Open links in new tab'),
    checked: openInNewTab,
    onChange: function onChange() {
      return setAttributes({
        openInNewTab: !openInNewTab
      });
    }
  })), createElement(PanelColorSettings, {
    title: __('Color settings'),
    colorSettings: [{
      // Use custom attribute as fallback to prevent loss of named color selection when
      // switching themes to a new theme that does not have a matching named color.
      value: iconColor.color || iconColorValue,
      onChange: function onChange(colorValue) {
        setIconColor(colorValue); // Set explicit color value used to add CSS variable in save.js

        setAttributes({
          iconColorValue: colorValue
        });
      },
      label: __('Icon color')
    }, !logosOnly && {
      // Use custom attribute as fallback to prevent loss of named color selection when
      // switching themes to a new theme that does not have a matching named color.
      value: iconBackgroundColor.color || iconBackgroundColorValue,
      onChange: function onChange(colorValue) {
        setIconBackgroundColor(colorValue); // Set explicit color value used to add CSS variable in save.js

        setAttributes({
          iconBackgroundColorValue: colorValue
        });
      },
      label: __('Icon background color')
    }]
  }), !logosOnly && createElement(ContrastChecker, _extends({
    textColor: iconColorValue,
    backgroundColor: iconBackgroundColorValue
  }, {
    isLargeText: false
  }))), createElement("ul", innerBlocksProps));
}
var iconColorAttributes = {
  iconColor: 'icon-color',
  iconBackgroundColor: 'icon-background-color'
};
export default withColors(iconColorAttributes)(SocialLinksEdit);
//# sourceMappingURL=edit.js.map