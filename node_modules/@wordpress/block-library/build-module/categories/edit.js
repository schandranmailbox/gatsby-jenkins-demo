import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import { times, unescape } from 'lodash';
/**
 * WordPress dependencies
 */

import { PanelBody, Placeholder, Spinner, ToggleControl, VisuallyHidden } from '@wordpress/components';
import { useInstanceId } from '@wordpress/compose';
import { useSelect } from '@wordpress/data';
import { InspectorControls, useBlockProps } from '@wordpress/block-editor';
import { __ } from '@wordpress/i18n';
import { pin } from '@wordpress/icons';
export default function CategoriesEdit(_ref) {
  var _ref$attributes = _ref.attributes,
      displayAsDropdown = _ref$attributes.displayAsDropdown,
      showHierarchy = _ref$attributes.showHierarchy,
      showPostCounts = _ref$attributes.showPostCounts,
      setAttributes = _ref.setAttributes;
  var selectId = useInstanceId(CategoriesEdit, 'blocks-category-select');

  var _useSelect = useSelect(function (select) {
    var _select = select('core'),
        getEntityRecords = _select.getEntityRecords;

    var _select2 = select('core/data'),
        isResolving = _select2.isResolving;

    var query = {
      per_page: -1,
      hide_empty: true
    };
    return {
      categories: getEntityRecords('taxonomy', 'category', query),
      isRequesting: isResolving('core', 'getEntityRecords', ['taxonomy', 'category', query])
    };
  }, []),
      categories = _useSelect.categories,
      isRequesting = _useSelect.isRequesting;

  var getCategoriesList = function getCategoriesList(parentId) {
    if (!(categories !== null && categories !== void 0 && categories.length)) {
      return [];
    }

    if (parentId === null) {
      return categories;
    }

    return categories.filter(function (_ref2) {
      var parent = _ref2.parent;
      return parent === parentId;
    });
  };

  var getCategoryListClassName = function getCategoryListClassName(level) {
    return "wp-block-categories__list wp-block-categories__list-level-".concat(level);
  };

  var toggleAttribute = function toggleAttribute(attributeName) {
    return function (newValue) {
      return setAttributes(_defineProperty({}, attributeName, newValue));
    };
  };

  var renderCategoryName = function renderCategoryName(name) {
    return !name ? __('(Untitled)') : unescape(name).trim();
  };

  var renderCategoryList = function renderCategoryList() {
    var parentId = showHierarchy ? 0 : null;
    var categoriesList = getCategoriesList(parentId);
    return createElement("ul", {
      className: getCategoryListClassName(0)
    }, categoriesList.map(function (category) {
      return renderCategoryListItem(category, 0);
    }));
  };

  var renderCategoryListItem = function renderCategoryListItem(category, level) {
    var childCategories = getCategoriesList(category.id);
    var id = category.id,
        link = category.link,
        count = category.count,
        name = category.name;
    return createElement("li", {
      key: id
    }, createElement("a", {
      href: link,
      target: "_blank",
      rel: "noreferrer noopener"
    }, renderCategoryName(name)), showPostCounts && createElement("span", {
      className: "wp-block-categories__post-count"
    }, " (".concat(count, ")")), showHierarchy && !!childCategories.length && createElement("ul", {
      className: getCategoryListClassName(level + 1)
    }, childCategories.map(function (childCategory) {
      return renderCategoryListItem(childCategory, level + 1);
    })));
  };

  var renderCategoryDropdown = function renderCategoryDropdown() {
    var parentId = showHierarchy ? 0 : null;
    var categoriesList = getCategoriesList(parentId);
    return createElement(Fragment, null, createElement(VisuallyHidden, {
      as: "label",
      htmlFor: selectId
    }, __('Categories')), createElement("select", {
      id: selectId,
      className: "wp-block-categories__dropdown"
    }, categoriesList.map(function (category) {
      return renderCategoryDropdownItem(category, 0);
    })));
  };

  var renderCategoryDropdownItem = function renderCategoryDropdownItem(category, level) {
    var id = category.id,
        count = category.count,
        name = category.name;
    var childCategories = getCategoriesList(id);
    return [createElement("option", {
      key: id
    }, times(level * 3, function () {
      return '\xa0';
    }), renderCategoryName(name), showPostCounts && " (".concat(count, ")")), showHierarchy && !!childCategories.length && childCategories.map(function (childCategory) {
      return renderCategoryDropdownItem(childCategory, level + 1);
    })];
  };

  return createElement("div", useBlockProps(), createElement(InspectorControls, null, createElement(PanelBody, {
    title: __('Categories settings')
  }, createElement(ToggleControl, {
    label: __('Display as dropdown'),
    checked: displayAsDropdown,
    onChange: toggleAttribute('displayAsDropdown')
  }), createElement(ToggleControl, {
    label: __('Show hierarchy'),
    checked: showHierarchy,
    onChange: toggleAttribute('showHierarchy')
  }), createElement(ToggleControl, {
    label: __('Show post counts'),
    checked: showPostCounts,
    onChange: toggleAttribute('showPostCounts')
  }))), isRequesting && createElement(Placeholder, {
    icon: pin,
    label: __('Categories')
  }, createElement(Spinner, null)), !isRequesting && (displayAsDropdown ? renderCategoryDropdown() : renderCategoryList()));
}
//# sourceMappingURL=edit.js.map