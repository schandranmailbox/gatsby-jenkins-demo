import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { getBlobByURL, isBlobURL, revokeBlobURL } from '@wordpress/blob';
import { __unstableGetAnimateClassName as getAnimateClassName, withNotices, ToolbarGroup, ToolbarButton } from '@wordpress/components';
import { useSelect } from '@wordpress/data';
import { BlockControls, BlockIcon, MediaPlaceholder, MediaReplaceFlow, RichText, useBlockProps } from '@wordpress/block-editor';
import { useEffect, useState, useRef } from '@wordpress/element';
import { useCopyOnClick } from '@wordpress/compose';
import { __, _x } from '@wordpress/i18n';
import { file as icon } from '@wordpress/icons';
/**
 * Internal dependencies
 */

import FileBlockInspector from './inspector';

function ClipboardToolbarButton(_ref) {
  var text = _ref.text,
      disabled = _ref.disabled;
  var ref = useRef();
  var hasCopied = useCopyOnClick(ref, text);
  return createElement(ToolbarButton, {
    className: "components-clipboard-toolbar-button",
    ref: ref,
    disabled: disabled
  }, hasCopied ? __('Copied!') : __('Copy URL'));
}

function FileEdit(_ref2) {
  var attributes = _ref2.attributes,
      setAttributes = _ref2.setAttributes,
      noticeUI = _ref2.noticeUI,
      noticeOperations = _ref2.noticeOperations;
  var id = attributes.id,
      fileName = attributes.fileName,
      href = attributes.href,
      textLinkHref = attributes.textLinkHref,
      textLinkTarget = attributes.textLinkTarget,
      showDownloadButton = attributes.showDownloadButton,
      downloadButtonText = attributes.downloadButtonText;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      hasError = _useState2[0],
      setHasError = _useState2[1];

  var _useSelect = useSelect(function (select) {
    return {
      media: id === undefined ? undefined : select('core').getMedia(id),
      mediaUpload: select('core/block-editor').getSettings().mediaUpload
    };
  }, [id]),
      media = _useSelect.media,
      mediaUpload = _useSelect.mediaUpload;

  useEffect(function () {
    // Upload a file drag-and-dropped into the editor
    if (isBlobURL(href)) {
      var file = getBlobByURL(href);
      mediaUpload({
        filesList: [file],
        onFileChange: function onFileChange(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 1),
              newMedia = _ref4[0];

          return onSelectFile(newMedia);
        },
        onError: function onError(message) {
          setHasError(true);
          noticeOperations.createErrorNotice(message);
        }
      });
      revokeBlobURL(href);
    }

    if (downloadButtonText === undefined) {
      setAttributes({
        downloadButtonText: _x('Download', 'button label')
      });
    }
  }, []);

  function onSelectFile(newMedia) {
    if (newMedia && newMedia.url) {
      setHasError(false);
      setAttributes({
        href: newMedia.url,
        fileName: newMedia.title,
        textLinkHref: newMedia.url,
        id: newMedia.id
      });
    }
  }

  function onUploadError(message) {
    setHasError(true);
    noticeOperations.removeAllNotices();
    noticeOperations.createErrorNotice(message);
  }

  function changeLinkDestinationOption(newHref) {
    // Choose Media File or Attachment Page (when file is in Media Library)
    setAttributes({
      textLinkHref: newHref
    });
  }

  function changeOpenInNewWindow(newValue) {
    setAttributes({
      textLinkTarget: newValue ? '_blank' : false
    });
  }

  function changeShowDownloadButton(newValue) {
    setAttributes({
      showDownloadButton: newValue
    });
  }

  var attachmentPage = media && media.link;
  var blockProps = useBlockProps({
    className: classnames(isBlobURL(href) && getAnimateClassName({
      type: 'loading'
    }), {
      'is-transient': isBlobURL(href)
    })
  });

  if (!href || hasError) {
    return createElement("div", blockProps, createElement(MediaPlaceholder, {
      icon: createElement(BlockIcon, {
        icon: icon
      }),
      labels: {
        title: __('File'),
        instructions: __('Upload a file or pick one from your media library.')
      },
      onSelect: onSelectFile,
      notices: noticeUI,
      onError: onUploadError,
      accept: "*"
    }));
  }

  return createElement(Fragment, null, createElement(FileBlockInspector, _extends({
    hrefs: {
      href: href,
      textLinkHref: textLinkHref,
      attachmentPage: attachmentPage
    }
  }, {
    openInNewWindow: !!textLinkTarget,
    showDownloadButton: showDownloadButton,
    changeLinkDestinationOption: changeLinkDestinationOption,
    changeOpenInNewWindow: changeOpenInNewWindow,
    changeShowDownloadButton: changeShowDownloadButton
  })), createElement(BlockControls, null, createElement(ToolbarGroup, null, createElement(MediaReplaceFlow, {
    mediaId: id,
    mediaURL: href,
    accept: "*",
    onSelect: onSelectFile,
    onError: onUploadError
  }), createElement(ClipboardToolbarButton, {
    text: href,
    disabled: isBlobURL(href)
  }))), createElement("div", blockProps, createElement("div", {
    className: 'wp-block-file__content-wrapper'
  }, createElement("div", {
    className: "wp-block-file__textlink"
  }, createElement(RichText, {
    tagName: "div" // must be block-level or else cursor disappears
    ,
    value: fileName,
    placeholder: __('Write file name…'),
    withoutInteractiveFormatting: true,
    onChange: function onChange(text) {
      return setAttributes({
        fileName: text
      });
    }
  })), showDownloadButton && createElement("div", {
    className: 'wp-block-file__button-richtext-wrapper'
  }, createElement(RichText, {
    tagName: "div" // must be block-level or else cursor disappears
    ,
    "aria-label": __('Download button text'),
    className: 'wp-block-file__button',
    value: downloadButtonText,
    withoutInteractiveFormatting: true,
    placeholder: __('Add text…'),
    onChange: function onChange(text) {
      return setAttributes({
        downloadButtonText: text
      });
    }
  })))));
}

export default withNotices(FileEdit);
//# sourceMappingURL=edit.js.map