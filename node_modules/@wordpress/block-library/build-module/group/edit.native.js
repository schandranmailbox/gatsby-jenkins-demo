import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * External dependencies
 */
import { View, Dimensions } from 'react-native';
/**
 * WordPress dependencies
 */

import { withSelect } from '@wordpress/data';
import { compose, withPreferredColorScheme, useResizeObserver } from '@wordpress/compose';
import { InnerBlocks } from '@wordpress/block-editor';
import { useCallback } from '@wordpress/element';
import { alignmentHelpers } from '@wordpress/components';
/**
 * Internal dependencies
 */

import styles from './editor.scss';
var isWider = alignmentHelpers.isWider,
    isFullWidth = alignmentHelpers.isFullWidth;

function GroupEdit(_ref) {
  var attributes = _ref.attributes,
      hasInnerBlocks = _ref.hasInnerBlocks,
      isSelected = _ref.isSelected,
      isLastInnerBlockSelected = _ref.isLastInnerBlockSelected,
      getStylesFromColorScheme = _ref.getStylesFromColorScheme,
      mergedStyle = _ref.mergedStyle,
      blockWidth = _ref.blockWidth;
  var align = attributes.align;

  var _useResizeObserver = useResizeObserver(),
      _useResizeObserver2 = _slicedToArray(_useResizeObserver, 2),
      resizeObserver = _useResizeObserver2[0],
      sizes = _useResizeObserver2[1];

  var _ref2 = sizes || {
    width: 0
  },
      width = _ref2.width;

  var screenWidth = Math.floor(Dimensions.get('window').width);
  var isEqualWidth = width === screenWidth;
  var renderAppender = useCallback(function () {
    return createElement(View, {
      style: (isWider(screenWidth, 'mobile') || isEqualWidth || isFullWidth(align)) && (hasInnerBlocks ? styles.groupAppender : styles.wideGroupAppender)
    }, createElement(InnerBlocks.ButtonBlockAppender, null));
  }, [align, hasInnerBlocks, width]);

  if (!isSelected && !hasInnerBlocks) {
    return createElement(View, {
      style: [getStylesFromColorScheme(styles.groupPlaceholder, styles.groupPlaceholderDark), !hasInnerBlocks && _objectSpread(_objectSpread({}, styles.marginVerticalDense), styles.marginHorizontalNone)]
    });
  }

  return createElement(View, {
    style: [isSelected && hasInnerBlocks && styles.innerBlocks, mergedStyle, isSelected && hasInnerBlocks && (mergedStyle === null || mergedStyle === void 0 ? void 0 : mergedStyle.backgroundColor) && styles.hasBackgroundAppender, isLastInnerBlockSelected && (mergedStyle === null || mergedStyle === void 0 ? void 0 : mergedStyle.backgroundColor) && styles.isLastInnerBlockSelected]
  }, resizeObserver, createElement(InnerBlocks, {
    renderAppender: isSelected && renderAppender,
    parentWidth: width,
    blockWidth: blockWidth
  }));
}

export default compose([withSelect(function (select, _ref3) {
  var _getBlockAttributes;

  var clientId = _ref3.clientId;

  var _select = select('core/block-editor'),
      getBlock = _select.getBlock,
      getBlockIndex = _select.getBlockIndex,
      hasSelectedInnerBlock = _select.hasSelectedInnerBlock,
      getBlockRootClientId = _select.getBlockRootClientId,
      getSelectedBlockClientId = _select.getSelectedBlockClientId,
      getBlockAttributes = _select.getBlockAttributes;

  var block = getBlock(clientId);
  var hasInnerBlocks = !!(block && block.innerBlocks.length);
  var isInnerBlockSelected = hasInnerBlocks && hasSelectedInnerBlock(clientId, true);
  var isLastInnerBlockSelected = false;

  if (isInnerBlockSelected) {
    var innerBlocks = block.innerBlocks;
    var selectedBlockClientId = getSelectedBlockClientId();
    var totalInnerBlocks = innerBlocks.length - 1;
    var blockIndex = getBlockIndex(selectedBlockClientId, clientId);
    isLastInnerBlockSelected = totalInnerBlocks === blockIndex;
  }

  var parentId = getBlockRootClientId(clientId);
  var parentBlockAlignment = (_getBlockAttributes = getBlockAttributes(parentId)) === null || _getBlockAttributes === void 0 ? void 0 : _getBlockAttributes.align;
  return {
    hasInnerBlocks: hasInnerBlocks,
    isLastInnerBlockSelected: isLastInnerBlockSelected,
    parentBlockAlignment: parentBlockAlignment
  };
}), withPreferredColorScheme])(GroupEdit);
//# sourceMappingURL=edit.native.js.map