import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { useSelect } from '@wordpress/data';
import { BlockControls, InspectorAdvancedControls, useBlockProps, Warning } from '@wordpress/block-editor';
import { SelectControl, Dropdown, ToolbarGroup, ToolbarButton, Spinner } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { chevronUp, chevronDown } from '@wordpress/icons';
/**
 * Internal dependencies
 */

import TemplatePartNamePanel from './name-panel';
import TemplatePartInnerBlocks from './inner-blocks';
import TemplatePartPlaceholder from './placeholder';
import TemplatePartSelection from './selection';
export default function TemplatePartEdit(_ref) {
  var _ref$attributes = _ref.attributes,
      slug = _ref$attributes.slug,
      theme = _ref$attributes.theme,
      _ref$attributes$tagNa = _ref$attributes.tagName,
      TagName = _ref$attributes$tagNa === void 0 ? 'div' : _ref$attributes$tagNa,
      setAttributes = _ref.setAttributes,
      clientId = _ref.clientId;
  var templatePartId = theme && slug ? theme + '//' + slug : null; // Set the postId block attribute if it did not exist,
  // but wait until the inner blocks have loaded to allow
  // new edits to trigger this.

  var _useSelect = useSelect(function (select) {
    var _select = select('core'),
        getEntityRecord = _select.getEntityRecord,
        hasFinishedResolution = _select.hasFinishedResolution;

    var _select2 = select('core/block-editor'),
        getBlocks = _select2.getBlocks;

    var getEntityArgs = ['postType', 'wp_template_part', templatePartId];
    var entityRecord = templatePartId ? getEntityRecord.apply(void 0, getEntityArgs) : null;
    var hasResolvedEntity = templatePartId ? hasFinishedResolution('getEntityRecord', getEntityArgs) : false;
    return {
      innerBlocks: getBlocks(clientId),
      isResolved: hasResolvedEntity,
      isMissing: hasResolvedEntity && !entityRecord
    };
  }, [templatePartId, clientId]),
      isResolved = _useSelect.isResolved,
      innerBlocks = _useSelect.innerBlocks,
      isMissing = _useSelect.isMissing;

  var blockProps = useBlockProps();
  var isPlaceholder = !slug;
  var isEntityAvailable = !isPlaceholder && !isMissing;

  if (!isPlaceholder && isMissing) {
    return createElement(TagName, blockProps, createElement(Warning, null, __('Template part has been deleted or is unavailable.')));
  }

  var inspectorAdvancedControls = createElement(InspectorAdvancedControls, null, createElement(SelectControl, {
    label: __('HTML element'),
    options: [{
      label: __('Default (<div>)'),
      value: 'div'
    }, {
      label: '<header>',
      value: 'header'
    }, {
      label: '<main>',
      value: 'main'
    }, {
      label: '<section>',
      value: 'section'
    }, {
      label: '<article>',
      value: 'article'
    }, {
      label: '<aside>',
      value: 'aside'
    }, {
      label: '<footer>',
      value: 'footer'
    }],
    value: TagName,
    onChange: function onChange(value) {
      return setAttributes({
        tagName: value
      });
    }
  }));
  return createElement(Fragment, null, inspectorAdvancedControls, createElement(TagName, blockProps, isPlaceholder && createElement(TemplatePartPlaceholder, {
    setAttributes: setAttributes,
    innerBlocks: innerBlocks
  }), isEntityAvailable && createElement(BlockControls, null, createElement(ToolbarGroup, {
    className: "wp-block-template-part__block-control-group"
  }, createElement(TemplatePartNamePanel, {
    postId: templatePartId
  }), createElement(Dropdown, {
    className: "wp-block-template-part__preview-dropdown-button",
    contentClassName: "wp-block-template-part__preview-dropdown-content",
    position: "bottom right left",
    renderToggle: function renderToggle(_ref2) {
      var isOpen = _ref2.isOpen,
          onToggle = _ref2.onToggle;
      return createElement(ToolbarButton, {
        "aria-expanded": isOpen,
        icon: isOpen ? chevronUp : chevronDown,
        label: __('Choose another'),
        onClick: onToggle // Disable when open to prevent odd FireFox bug causing reopening.
        // As noted in https://github.com/WordPress/gutenberg/pull/24990#issuecomment-689094119 .
        ,
        disabled: isOpen
      });
    },
    renderContent: function renderContent(_ref3) {
      var onClose = _ref3.onClose;
      return createElement(TemplatePartSelection, {
        setAttributes: setAttributes,
        onClose: onClose
      });
    }
  }))), isEntityAvailable && createElement(TemplatePartInnerBlocks, {
    postId: templatePartId,
    hasInnerBlocks: innerBlocks.length > 0
  }), !isPlaceholder && !isResolved && createElement(Spinner, null)));
}
//# sourceMappingURL=index.js.map