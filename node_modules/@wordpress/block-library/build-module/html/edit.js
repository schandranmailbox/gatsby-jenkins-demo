import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { __ } from '@wordpress/i18n';
import { useState } from '@wordpress/element';
import { BlockControls, PlainText, transformStyles, useBlockProps } from '@wordpress/block-editor';
import { ToolbarButton, Disabled, SandBox, ToolbarGroup } from '@wordpress/components';
import { useSelect } from '@wordpress/data';
export default function HTMLEdit(_ref) {
  var attributes = _ref.attributes,
      setAttributes = _ref.setAttributes,
      isSelected = _ref.isSelected;

  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      isPreview = _useState2[0],
      setIsPreview = _useState2[1];

  var styles = useSelect(function (select) {
    // Default styles used to unset some of the styles
    // that might be inherited from the editor style.
    var defaultStyles = "\n\t\t\thtml,body,:root {\n\t\t\t\tmargin: 0 !important;\n\t\t\t\tpadding: 0 !important;\n\t\t\t\toverflow: visible !important;\n\t\t\t\tmin-height: auto !important;\n\t\t\t}\n\t\t";
    return [defaultStyles].concat(_toConsumableArray(transformStyles(select('core/block-editor').getSettings().styles)));
  }, []);

  function switchToPreview() {
    setIsPreview(true);
  }

  function switchToHTML() {
    setIsPreview(false);
  }

  return createElement("div", useBlockProps({
    className: 'block-library-html__edit'
  }), createElement(BlockControls, null, createElement(ToolbarGroup, null, createElement(ToolbarButton, {
    className: "components-tab-button",
    isPressed: !isPreview,
    onClick: switchToHTML
  }, createElement("span", null, "HTML")), createElement(ToolbarButton, {
    className: "components-tab-button",
    isPressed: isPreview,
    onClick: switchToPreview
  }, createElement("span", null, __('Preview'))))), createElement(Disabled.Consumer, null, function (isDisabled) {
    return isPreview || isDisabled ? createElement(Fragment, null, createElement(SandBox, {
      html: attributes.content,
      styles: styles
    }), !isSelected && createElement("div", {
      className: "block-library-html__preview-overlay"
    })) : createElement(PlainText, {
      value: attributes.content,
      onChange: function onChange(content) {
        return setAttributes({
          content: content
        });
      },
      placeholder: __('Write HTMLâ€¦'),
      "aria-label": __('HTML')
    });
  }));
}
//# sourceMappingURL=edit.js.map