import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { some } from 'lodash';
/**
 * WordPress dependencies
 */

import { createBlock, parse } from '@wordpress/blocks';
import { Button, DropdownMenu, MenuGroup, MenuItem, Spinner } from '@wordpress/components';
import { useSelect } from '@wordpress/data';
import { forwardRef, useCallback, useState, useEffect } from '@wordpress/element';
import { __ } from '@wordpress/i18n';
import { chevronDown } from '@wordpress/icons';
/**
 * Internal dependencies
 */

import createDataTree from './create-data-tree';
import PlaceholderPreview from './placeholder-preview';
/**
 * A recursive function that maps menu item nodes to blocks.
 *
 * @param {Object[]} menuItems An array of menu items.
 * @return {WPBlock[]} An array of blocks.
 */

function mapMenuItemsToBlocks(menuItems) {
  return menuItems.map(function (menuItem) {
    var _menuItem$xfn, _menuItem$classes, _menuItem$children;

    if (menuItem.type === 'block') {
      var _parse = parse(menuItem.content.raw),
          _parse2 = _slicedToArray(_parse, 1),
          block = _parse2[0];

      if (!block) {
        return createBlock('core/freeform', {
          content: menuItem.content
        });
      }

      return block;
    }

    var attributes = {
      label: !menuItem.title.rendered ? __('(no title)') : menuItem.title.rendered,
      opensInNewTab: menuItem.target === '_blank'
    };

    if (menuItem.url) {
      attributes.url = menuItem.url;
    }

    if (menuItem.description) {
      attributes.description = menuItem.description;
    }

    if ((_menuItem$xfn = menuItem.xfn) !== null && _menuItem$xfn !== void 0 && _menuItem$xfn.length && some(menuItem.xfn)) {
      attributes.rel = menuItem.xfn.join(' ');
    }

    if ((_menuItem$classes = menuItem.classes) !== null && _menuItem$classes !== void 0 && _menuItem$classes.length && some(menuItem.classes)) {
      attributes.className = menuItem.classes.join(' ');
    }

    var innerBlocks = (_menuItem$children = menuItem.children) !== null && _menuItem$children !== void 0 && _menuItem$children.length ? mapMenuItemsToBlocks(menuItem.children) : [];
    return createBlock('core/navigation-link', attributes, innerBlocks);
  });
}
/**
 * Convert a flat menu item structure to a nested blocks structure.
 *
 * @param {Object[]} menuItems An array of menu items.
 *
 * @return {WPBlock[]} An array of blocks.
 */


function convertMenuItemsToBlocks(menuItems) {
  if (!menuItems) {
    return null;
  }

  var menuTree = createDataTree(menuItems);
  return mapMenuItemsToBlocks(menuTree);
}
/**
 * Convert pages to blocks.
 *
 * @param {Object[]} pages An array of pages.
 *
 * @return {WPBlock[]} An array of blocks.
 */


function convertPagesToBlocks(pages) {
  if (!pages) {
    return null;
  }

  return pages.map(function (_ref) {
    var title = _ref.title,
        type = _ref.type,
        url = _ref.link,
        id = _ref.id;
    return createBlock('core/navigation-link', {
      type: type,
      id: id,
      url: url,
      label: !title.rendered ? __('(no title)') : title.rendered,
      opensInNewTab: false
    });
  });
}

function NavigationPlaceholder(_ref2, ref) {
  var onCreate = _ref2.onCreate;

  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      selectedMenu = _useState2[0],
      setSelectedMenu = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isCreatingFromMenu = _useState4[0],
      setIsCreatingFromMenu = _useState4[1];

  var _useSelect = useSelect(function (select) {
    var _select = select('core'),
        getEntityRecords = _select.getEntityRecords,
        getMenus = _select.getMenus,
        getMenuItems = _select.getMenuItems,
        isResolving = _select.isResolving,
        hasFinishedResolution = _select.hasFinishedResolution;

    var pagesParameters = ['postType', 'page', {
      parent: 0,
      order: 'asc',
      orderby: 'id',
      per_page: -1
    }];
    var menusParameters = [{
      per_page: -1
    }];
    var hasSelectedMenu = selectedMenu !== undefined;
    var menuItemsParameters = hasSelectedMenu ? [{
      menus: selectedMenu,
      per_page: -1
    }] : undefined;
    return {
      pages: getEntityRecords.apply(void 0, pagesParameters),
      isResolvingPages: isResolving('getEntityRecords', pagesParameters),
      hasResolvedPages: hasFinishedResolution('getEntityRecords', pagesParameters),
      menus: getMenus.apply(void 0, menusParameters),
      isResolvingMenus: isResolving('getMenus', menusParameters),
      hasResolvedMenus: hasFinishedResolution('getMenus', menusParameters),
      menuItems: hasSelectedMenu ? getMenuItems.apply(void 0, _toConsumableArray(menuItemsParameters)) : undefined,
      hasResolvedMenuItems: hasSelectedMenu ? hasFinishedResolution('getMenuItems', menuItemsParameters) : false
    };
  }, [selectedMenu]),
      pages = _useSelect.pages,
      isResolvingPages = _useSelect.isResolvingPages,
      hasResolvedPages = _useSelect.hasResolvedPages,
      menus = _useSelect.menus,
      isResolvingMenus = _useSelect.isResolvingMenus,
      hasResolvedMenus = _useSelect.hasResolvedMenus,
      menuItems = _useSelect.menuItems,
      hasResolvedMenuItems = _useSelect.hasResolvedMenuItems;

  var hasPages = !!(hasResolvedPages && pages !== null && pages !== void 0 && pages.length);
  var hasMenus = !!(hasResolvedMenus && menus !== null && menus !== void 0 && menus.length);
  var isLoading = isResolvingPages || isResolvingMenus;
  var createFromMenu = useCallback(function () {
    var blocks = convertMenuItemsToBlocks(menuItems);
    var selectNavigationBlock = true;
    onCreate(blocks, selectNavigationBlock);
  });

  var onCreateFromMenu = function onCreateFromMenu() {
    // If we have menu items, create the block right away.
    if (hasResolvedMenuItems) {
      createFromMenu();
      return;
    } // Otherwise, create the block when resolution finishes.


    setIsCreatingFromMenu(true);
  };

  var onCreateEmptyMenu = function onCreateEmptyMenu() {
    onCreate([]);
  };

  var onCreateAllPages = function onCreateAllPages() {
    var blocks = convertPagesToBlocks(pages);
    var selectNavigationBlock = true;
    onCreate(blocks, selectNavigationBlock);
  };

  useEffect(function () {
    // If the user selected a menu but we had to wait for menu items to
    // finish resolving, then create the block once resolution finishes.
    if (isCreatingFromMenu && hasResolvedMenuItems) {
      createFromMenu();
      setIsCreatingFromMenu(false);
    }
  }, [isCreatingFromMenu, hasResolvedMenuItems]);
  return createElement("div", {
    className: "wp-block-navigation-placeholder"
  }, createElement(PlaceholderPreview, null), createElement("div", {
    className: "wp-block-navigation-placeholder__controls"
  }, isLoading && createElement("div", {
    ref: ref
  }, createElement(Spinner, null)), !isLoading && createElement("div", {
    ref: ref,
    className: "wp-block-navigation-placeholder__actions"
  }, hasMenus ? createElement(DropdownMenu, {
    text: __('Existing menu'),
    icon: chevronDown,
    className: "wp-block-navigation-placeholder__actions__dropdown"
  }, function (_ref3) {
    var onClose = _ref3.onClose;
    return createElement(MenuGroup, null, menus.map(function (menu) {
      return createElement(MenuItem, {
        onClick: function onClick() {
          setSelectedMenu(menu.id);
          onCreateFromMenu();
        },
        onClose: onClose,
        key: menu.id
      }, menu.name);
    }));
  }) : undefined, hasPages ? createElement(Button, {
    onClick: onCreateAllPages
  }, __('Add all pages')) : undefined, createElement(Button, {
    onClick: onCreateEmptyMenu
  }, __('Start empty')))));
}

export default forwardRef(NavigationPlaceholder);
//# sourceMappingURL=placeholder.js.map