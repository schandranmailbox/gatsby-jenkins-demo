import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { createElement } from "@wordpress/element";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * External dependencies
 */
import classnames from 'classnames';
import { omit } from 'lodash';
/**
 * WordPress dependencies
 */

import { getColorClassName, RichText, useBlockProps } from '@wordpress/block-editor';
var blockSupports = {
  className: false,
  anchor: true
};
var blockAttributes = {
  align: {
    type: 'string'
  },
  content: {
    type: 'string',
    source: 'html',
    selector: 'h1,h2,h3,h4,h5,h6',
    default: ''
  },
  level: {
    type: 'number',
    default: 2
  },
  placeholder: {
    type: 'string'
  }
};

var migrateCustomColors = function migrateCustomColors(attributes) {
  if (!attributes.customTextColor) {
    return attributes;
  }

  var style = {
    color: {
      text: attributes.customTextColor
    }
  };
  return _objectSpread(_objectSpread({}, omit(attributes, ['customTextColor'])), {}, {
    style: style
  });
};

var TEXT_ALIGN_OPTIONS = ['left', 'right', 'center'];

var migrateTextAlign = function migrateTextAlign(attributes) {
  var align = attributes.align,
      rest = _objectWithoutProperties(attributes, ["align"]);

  return TEXT_ALIGN_OPTIONS.includes(align) ? _objectSpread(_objectSpread({}, rest), {}, {
    textAlign: align
  }) : attributes;
};

var deprecated = [{
  supports: {
    align: ['wide', 'full'],
    anchor: true,
    className: false,
    color: {
      link: true
    },
    fontSize: true,
    lineHeight: true,
    __experimentalSelector: {
      'core/heading/h1': 'h1',
      'core/heading/h2': 'h2',
      'core/heading/h3': 'h3',
      'core/heading/h4': 'h4',
      'core/heading/h5': 'h5',
      'core/heading/h6': 'h6'
    },
    __unstablePasteTextInline: true
  },
  attributes: blockAttributes,
  isEligible: function isEligible(_ref) {
    var align = _ref.align;
    return TEXT_ALIGN_OPTIONS.includes(align);
  },
  migrate: migrateTextAlign,
  save: function save(_ref2) {
    var attributes = _ref2.attributes;
    var align = attributes.align,
        content = attributes.content,
        level = attributes.level;
    var TagName = 'h' + level;
    var className = classnames(_defineProperty({}, "has-text-align-".concat(align), align));
    return createElement(TagName, useBlockProps.save({
      className: className
    }), createElement(RichText.Content, {
      value: content
    }));
  }
}, {
  supports: blockSupports,
  attributes: _objectSpread(_objectSpread({}, blockAttributes), {}, {
    customTextColor: {
      type: 'string'
    },
    textColor: {
      type: 'string'
    }
  }),
  migrate: function migrate(attributes) {
    return migrateCustomColors(migrateTextAlign(attributes));
  },
  save: function save(_ref3) {
    var _classnames2;

    var attributes = _ref3.attributes;
    var align = attributes.align,
        content = attributes.content,
        customTextColor = attributes.customTextColor,
        level = attributes.level,
        textColor = attributes.textColor;
    var tagName = 'h' + level;
    var textClass = getColorClassName('color', textColor);
    var className = classnames((_classnames2 = {}, _defineProperty(_classnames2, textClass, textClass), _defineProperty(_classnames2, 'has-text-color', textColor || customTextColor), _defineProperty(_classnames2, "has-text-align-".concat(align), align), _classnames2));
    return createElement(RichText.Content, {
      className: className ? className : undefined,
      tagName: tagName,
      style: {
        color: textClass ? undefined : customTextColor
      },
      value: content
    });
  }
}, {
  attributes: _objectSpread(_objectSpread({}, blockAttributes), {}, {
    customTextColor: {
      type: 'string'
    },
    textColor: {
      type: 'string'
    }
  }),
  migrate: function migrate(attributes) {
    return migrateCustomColors(migrateTextAlign(attributes));
  },
  save: function save(_ref4) {
    var _classnames3;

    var attributes = _ref4.attributes;
    var align = attributes.align,
        content = attributes.content,
        customTextColor = attributes.customTextColor,
        level = attributes.level,
        textColor = attributes.textColor;
    var tagName = 'h' + level;
    var textClass = getColorClassName('color', textColor);
    var className = classnames((_classnames3 = {}, _defineProperty(_classnames3, textClass, textClass), _defineProperty(_classnames3, "has-text-align-".concat(align), align), _classnames3));
    return createElement(RichText.Content, {
      className: className ? className : undefined,
      tagName: tagName,
      style: {
        color: textClass ? undefined : customTextColor
      },
      value: content
    });
  },
  supports: blockSupports
}, {
  supports: blockSupports,
  attributes: _objectSpread(_objectSpread({}, blockAttributes), {}, {
    customTextColor: {
      type: 'string'
    },
    textColor: {
      type: 'string'
    }
  }),
  migrate: function migrate(attributes) {
    return migrateCustomColors(migrateTextAlign(attributes));
  },
  save: function save(_ref5) {
    var attributes = _ref5.attributes;
    var align = attributes.align,
        level = attributes.level,
        content = attributes.content,
        textColor = attributes.textColor,
        customTextColor = attributes.customTextColor;
    var tagName = 'h' + level;
    var textClass = getColorClassName('color', textColor);
    var className = classnames(_defineProperty({}, textClass, textClass));
    return createElement(RichText.Content, {
      className: className ? className : undefined,
      tagName: tagName,
      style: {
        textAlign: align,
        color: textClass ? undefined : customTextColor
      },
      value: content
    });
  }
}];
export default deprecated;
//# sourceMappingURL=deprecated.js.map