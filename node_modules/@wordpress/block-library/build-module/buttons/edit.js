import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { BlockControls, useBlockProps, __experimentalUseInnerBlocksProps as useInnerBlocksProps } from '@wordpress/block-editor';
import { ToolbarGroup, ToolbarItem } from '@wordpress/components';
/**
 * Internal dependencies
 */

import { name as buttonBlockName } from '../button';
import ContentJustificationDropdown from './content-justification-dropdown';
var ALLOWED_BLOCKS = [buttonBlockName];
var BUTTONS_TEMPLATE = [['core/button']];

function ButtonsEdit(_ref) {
  var _classnames;

  var _ref$attributes = _ref.attributes,
      contentJustification = _ref$attributes.contentJustification,
      orientation = _ref$attributes.orientation,
      setAttributes = _ref.setAttributes;
  var blockProps = useBlockProps({
    className: classnames((_classnames = {}, _defineProperty(_classnames, "is-content-justification-".concat(contentJustification), contentJustification), _defineProperty(_classnames, 'is-vertical', orientation === 'vertical'), _classnames))
  });
  var innerBlocksProps = useInnerBlocksProps(blockProps, {
    allowedBlocks: ALLOWED_BLOCKS,
    template: BUTTONS_TEMPLATE,
    orientation: orientation,
    __experimentalLayout: {
      type: 'default',
      alignments: []
    },
    templateInsertUpdatesSelection: true
  });
  return createElement(Fragment, null, createElement(BlockControls, null, createElement(ToolbarGroup, null, createElement(ToolbarItem, null, function (toggleProps) {
    return createElement(ContentJustificationDropdown, {
      toggleProps: toggleProps,
      value: contentJustification,
      onChange: function onChange(updatedValue) {
        setAttributes({
          contentJustification: updatedValue
        });
      }
    });
  }))), createElement("div", innerBlocksProps));
}

export default ButtonsEdit;
//# sourceMappingURL=edit.js.map