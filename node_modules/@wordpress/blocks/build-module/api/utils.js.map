{"version":3,"sources":["@wordpress/blocks/src/api/utils.js"],"names":["every","has","isFunction","isString","startCase","reduce","default","tinycolor","mostReadable","Component","isValidElement","__","sprintf","__unstableStripHTML","stripHTML","select","getBlockType","getDefaultBlockName","createBlock","ICON_COLORS","isUnmodifiedDefaultBlock","block","defaultBlockName","name","newDefaultBlock","blockType","attributes","value","key","isValidIcon","icon","normalizeIconObject","src","tinyBgColor","background","foreground","includeFallbackColors","level","size","toHexString","shadowColor","setAlpha","toRgbString","normalizeBlockType","blockTypeOrName","getBlockLabel","context","slug","entity","getEntityRecord","theme","title","rendered","getLabel","__experimentalLabel","label","getAccessibleBlockLabel","position","direction","hasPosition","undefined","hasLabel","sanitizeBlockAttributes","Error","accumulator","schema","hasOwnProperty","indexOf","source","Array","isArray"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { every, has, isFunction, isString, startCase, reduce } from 'lodash';\nimport { default as tinycolor, mostReadable } from 'tinycolor2';\n\n/**\n * WordPress dependencies\n */\nimport { Component, isValidElement } from '@wordpress/element';\nimport { __, sprintf } from '@wordpress/i18n';\nimport { __unstableStripHTML as stripHTML } from '@wordpress/dom';\nimport { select } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { getBlockType, getDefaultBlockName } from './registration';\nimport { createBlock } from './factory';\n\n/**\n * Array of icon colors containing a color to be used if the icon color\n * was not explicitly set but the icon background color was.\n *\n * @type {Object}\n */\nconst ICON_COLORS = [ '#191e23', '#f8f9f9' ];\n\n/**\n * Determines whether the block is a default block\n * and its attributes are equal to the default attributes\n * which means the block is unmodified.\n *\n * @param  {WPBlock} block Block Object\n *\n * @return {boolean}       Whether the block is an unmodified default block\n */\nexport function isUnmodifiedDefaultBlock( block ) {\n\tconst defaultBlockName = getDefaultBlockName();\n\tif ( block.name !== defaultBlockName ) {\n\t\treturn false;\n\t}\n\n\t// Cache a created default block if no cache exists or the default block\n\t// name changed.\n\tif (\n\t\t! isUnmodifiedDefaultBlock.block ||\n\t\tisUnmodifiedDefaultBlock.block.name !== defaultBlockName\n\t) {\n\t\tisUnmodifiedDefaultBlock.block = createBlock( defaultBlockName );\n\t}\n\n\tconst newDefaultBlock = isUnmodifiedDefaultBlock.block;\n\tconst blockType = getBlockType( defaultBlockName );\n\n\treturn every(\n\t\tblockType.attributes,\n\t\t( value, key ) =>\n\t\t\tnewDefaultBlock.attributes[ key ] === block.attributes[ key ]\n\t);\n}\n\n/**\n * Function that checks if the parameter is a valid icon.\n *\n * @param {*} icon  Parameter to be checked.\n *\n * @return {boolean} True if the parameter is a valid icon and false otherwise.\n */\n\nexport function isValidIcon( icon ) {\n\treturn (\n\t\t!! icon &&\n\t\t( isString( icon ) ||\n\t\t\tisValidElement( icon ) ||\n\t\t\tisFunction( icon ) ||\n\t\t\ticon instanceof Component )\n\t);\n}\n\n/**\n * Function that receives an icon as set by the blocks during the registration\n * and returns a new icon object that is normalized so we can rely on just on possible icon structure\n * in the codebase.\n *\n * @param {WPBlockTypeIconRender} icon Render behavior of a block type icon;\n *                                     one of a Dashicon slug, an element, or a\n *                                     component.\n *\n * @return {WPBlockTypeIconDescriptor} Object describing the icon.\n */\nexport function normalizeIconObject( icon ) {\n\tif ( isValidIcon( icon ) ) {\n\t\treturn { src: icon };\n\t}\n\n\tif ( has( icon, [ 'background' ] ) ) {\n\t\tconst tinyBgColor = tinycolor( icon.background );\n\n\t\treturn {\n\t\t\t...icon,\n\t\t\tforeground: icon.foreground\n\t\t\t\t? icon.foreground\n\t\t\t\t: mostReadable( tinyBgColor, ICON_COLORS, {\n\t\t\t\t\t\tincludeFallbackColors: true,\n\t\t\t\t\t\tlevel: 'AA',\n\t\t\t\t\t\tsize: 'large',\n\t\t\t\t  } ).toHexString(),\n\t\t\tshadowColor: tinyBgColor.setAlpha( 0.3 ).toRgbString(),\n\t\t};\n\t}\n\n\treturn icon;\n}\n\n/**\n * Normalizes block type passed as param. When string is passed then\n * it converts it to the matching block type object.\n * It passes the original object otherwise.\n *\n * @param {string|Object} blockTypeOrName  Block type or name.\n *\n * @return {?Object} Block type.\n */\nexport function normalizeBlockType( blockTypeOrName ) {\n\tif ( isString( blockTypeOrName ) ) {\n\t\treturn getBlockType( blockTypeOrName );\n\t}\n\n\treturn blockTypeOrName;\n}\n\n/**\n * Get the label for the block, usually this is either the block title,\n * or the value of the block's `label` function when that's specified.\n *\n * @param {Object} blockType  The block type.\n * @param {Object} attributes The values of the block's attributes.\n * @param {Object} context    The intended use for the label.\n *\n * @return {string} The block label.\n */\nexport function getBlockLabel( blockType, attributes, context = 'visual' ) {\n\t// Attempt to find entity title if block is a template part.\n\t// Require slug to request, otherwise entity is uncreated and will throw 404.\n\tif ( 'core/template-part' === blockType.name && attributes.slug ) {\n\t\tconst entity = select( 'core' ).getEntityRecord(\n\t\t\t'postType',\n\t\t\t'wp_template_part',\n\t\t\tattributes.theme + '//' + attributes.slug\n\t\t);\n\t\tif ( entity ) {\n\t\t\treturn startCase( entity.title?.rendered || entity.slug );\n\t\t}\n\t}\n\n\tconst { __experimentalLabel: getLabel, title } = blockType;\n\n\tconst label = getLabel && getLabel( attributes, { context } );\n\n\tif ( ! label ) {\n\t\treturn title;\n\t}\n\n\t// Strip any HTML (i.e. RichText formatting) before returning.\n\treturn stripHTML( label );\n}\n\n/**\n * Get a label for the block for use by screenreaders, this is more descriptive\n * than the visual label and includes the block title and the value of the\n * `getLabel` function if it's specified.\n *\n * @param {Object}  blockType              The block type.\n * @param {Object}  attributes             The values of the block's attributes.\n * @param {?number} position               The position of the block in the block list.\n * @param {string}  [direction='vertical'] The direction of the block layout.\n *\n * @return {string} The block label.\n */\nexport function getAccessibleBlockLabel(\n\tblockType,\n\tattributes,\n\tposition,\n\tdirection = 'vertical'\n) {\n\t// `title` is already localized, `label` is a user-supplied value.\n\tconst { title } = blockType;\n\tconst label = getBlockLabel( blockType, attributes, 'accessibility' );\n\tconst hasPosition = position !== undefined;\n\n\t// getBlockLabel returns the block title as a fallback when there's no label,\n\t// if it did return the title, this function needs to avoid adding the\n\t// title twice within the accessible label. Use this `hasLabel` boolean to\n\t// handle that.\n\tconst hasLabel = label && label !== title;\n\n\tif ( hasPosition && direction === 'vertical' ) {\n\t\tif ( hasLabel ) {\n\t\t\treturn sprintf(\n\t\t\t\t/* translators: accessibility text. 1: The block title. 2: The block row number. 3: The block label.. */\n\t\t\t\t__( '%1$s Block. Row %2$d. %3$s' ),\n\t\t\t\ttitle,\n\t\t\t\tposition,\n\t\t\t\tlabel\n\t\t\t);\n\t\t}\n\n\t\treturn sprintf(\n\t\t\t/* translators: accessibility text. 1: The block title. 2: The block row number. */\n\t\t\t__( '%1$s Block. Row %2$d' ),\n\t\t\ttitle,\n\t\t\tposition\n\t\t);\n\t} else if ( hasPosition && direction === 'horizontal' ) {\n\t\tif ( hasLabel ) {\n\t\t\treturn sprintf(\n\t\t\t\t/* translators: accessibility text. 1: The block title. 2: The block column number. 3: The block label.. */\n\t\t\t\t__( '%1$s Block. Column %2$d. %3$s' ),\n\t\t\t\ttitle,\n\t\t\t\tposition,\n\t\t\t\tlabel\n\t\t\t);\n\t\t}\n\n\t\treturn sprintf(\n\t\t\t/* translators: accessibility text. 1: The block title. 2: The block column number. */\n\t\t\t__( '%1$s Block. Column %2$d' ),\n\t\t\ttitle,\n\t\t\tposition\n\t\t);\n\t}\n\n\tif ( hasLabel ) {\n\t\treturn sprintf(\n\t\t\t/* translators: accessibility text. %1: The block title. %2: The block label. */\n\t\t\t__( '%1$s Block. %2$s' ),\n\t\t\ttitle,\n\t\t\tlabel\n\t\t);\n\t}\n\n\treturn sprintf(\n\t\t/* translators: accessibility text. %s: The block title. */\n\t\t__( '%s Block' ),\n\t\ttitle\n\t);\n}\n\n/**\n * Ensure attributes contains only values defined by block type, and merge\n * default values for missing attributes.\n *\n * @param {string} name       The block's name.\n * @param {Object} attributes The block's attributes.\n * @return {Object} The sanitized attributes.\n */\nexport function sanitizeBlockAttributes( name, attributes ) {\n\t// Get the type definition associated with a registered block.\n\tconst blockType = getBlockType( name );\n\n\tif ( undefined === blockType ) {\n\t\tthrow new Error( `Block type '${ name }' is not registered.` );\n\t}\n\n\treturn reduce(\n\t\tblockType.attributes,\n\t\t( accumulator, schema, key ) => {\n\t\t\tconst value = attributes[ key ];\n\n\t\t\tif ( undefined !== value ) {\n\t\t\t\taccumulator[ key ] = value;\n\t\t\t} else if ( schema.hasOwnProperty( 'default' ) ) {\n\t\t\t\taccumulator[ key ] = schema.default;\n\t\t\t}\n\n\t\t\tif ( [ 'node', 'children' ].indexOf( schema.source ) !== -1 ) {\n\t\t\t\t// Ensure value passed is always an array, which we're expecting in\n\t\t\t\t// the RichText component to handle the deprecated value.\n\t\t\t\tif ( typeof accumulator[ key ] === 'string' ) {\n\t\t\t\t\taccumulator[ key ] = [ accumulator[ key ] ];\n\t\t\t\t} else if ( ! Array.isArray( accumulator[ key ] ) ) {\n\t\t\t\t\taccumulator[ key ] = [];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn accumulator;\n\t\t},\n\t\t{}\n\t);\n}\n"]}