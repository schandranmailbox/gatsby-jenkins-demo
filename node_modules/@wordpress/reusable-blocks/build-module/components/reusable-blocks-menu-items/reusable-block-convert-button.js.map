{"version":3,"sources":["@wordpress/reusable-blocks/src/components/reusable-blocks-menu-items/reusable-block-convert-button.js"],"names":["hasBlockSupport","isReusableBlock","BlockSettingsMenuControls","useCallback","MenuItem","reusableBlock","useDispatch","useSelect","__","store","noticesStore","ReusableBlockConvertButton","clientIds","rootClientId","canConvert","select","canUser","getBlocksByClientId","canInsertBlockType","blocks","isReusable","length","getEntityRecord","attributes","ref","_canConvert","every","block","isValid","name","convertBlocksToReusable","__experimentalConvertBlocksToReusable","createSuccessNotice","createErrorNotice","onConvert","type","message","onClose"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { hasBlockSupport, isReusableBlock } from '@wordpress/blocks';\nimport { BlockSettingsMenuControls } from '@wordpress/block-editor';\nimport { useCallback } from '@wordpress/element';\nimport { MenuItem } from '@wordpress/components';\nimport { reusableBlock } from '@wordpress/icons';\nimport { useDispatch, useSelect } from '@wordpress/data';\nimport { __ } from '@wordpress/i18n';\nimport { store as noticesStore } from '@wordpress/notices';\n\n/**\n * Internal dependencies\n */\nimport { store } from '../../store';\n\n/**\n * Menu control to convert block(s) to reusable block.\n *\n * @param {Object}   props              Component props.\n * @param {string[]} props.clientIds    Client ids of selected blocks.\n * @param {string}   props.rootClientId ID of the currently selected top-level block.\n * @return {import('@wordpress/element').WPComponent} The menu control or null.\n */\nexport default function ReusableBlockConvertButton( {\n\tclientIds,\n\trootClientId,\n} ) {\n\tconst canConvert = useSelect(\n\t\t( select ) => {\n\t\t\tconst { canUser } = select( 'core' );\n\t\t\tconst { getBlocksByClientId, canInsertBlockType } = select(\n\t\t\t\t'core/block-editor'\n\t\t\t);\n\n\t\t\tconst blocks = getBlocksByClientId( clientIds ) ?? [];\n\n\t\t\tconst isReusable =\n\t\t\t\tblocks.length === 1 &&\n\t\t\t\tblocks[ 0 ] &&\n\t\t\t\tisReusableBlock( blocks[ 0 ] ) &&\n\t\t\t\t!! select( 'core' ).getEntityRecord(\n\t\t\t\t\t'postType',\n\t\t\t\t\t'wp_block',\n\t\t\t\t\tblocks[ 0 ].attributes.ref\n\t\t\t\t);\n\n\t\t\tconst _canConvert =\n\t\t\t\t// Hide when this is already a reusable block.\n\t\t\t\t! isReusable &&\n\t\t\t\t// Hide when reusable blocks are disabled.\n\t\t\t\tcanInsertBlockType( 'core/block', rootClientId ) &&\n\t\t\t\tblocks.every(\n\t\t\t\t\t( block ) =>\n\t\t\t\t\t\t// Guard against the case where a regular block has *just* been converted.\n\t\t\t\t\t\t!! block &&\n\t\t\t\t\t\t// Hide on invalid blocks.\n\t\t\t\t\t\tblock.isValid &&\n\t\t\t\t\t\t// Hide when block doesn't support being made reusable.\n\t\t\t\t\t\thasBlockSupport( block.name, 'reusable', true )\n\t\t\t\t) &&\n\t\t\t\t// Hide when current doesn't have permission to do that.\n\t\t\t\t!! canUser( 'create', 'blocks' );\n\n\t\t\treturn _canConvert;\n\t\t},\n\t\t[ clientIds ]\n\t);\n\n\tconst {\n\t\t__experimentalConvertBlocksToReusable: convertBlocksToReusable,\n\t} = useDispatch( store );\n\n\tconst { createSuccessNotice, createErrorNotice } = useDispatch(\n\t\tnoticesStore\n\t);\n\tconst onConvert = useCallback(\n\t\tasync function () {\n\t\t\ttry {\n\t\t\t\tawait convertBlocksToReusable( clientIds );\n\t\t\t\tcreateSuccessNotice( __( 'Block created.' ), {\n\t\t\t\t\ttype: 'snackbar',\n\t\t\t\t} );\n\t\t\t} catch ( error ) {\n\t\t\t\tcreateErrorNotice( error.message, {\n\t\t\t\t\ttype: 'snackbar',\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\t\t[ clientIds ]\n\t);\n\n\tif ( ! canConvert ) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<BlockSettingsMenuControls>\n\t\t\t{ ( { onClose } ) => (\n\t\t\t\t<MenuItem\n\t\t\t\t\ticon={ reusableBlock }\n\t\t\t\t\tonClick={ () => {\n\t\t\t\t\t\tonConvert();\n\t\t\t\t\t\tonClose();\n\t\t\t\t\t} }\n\t\t\t\t>\n\t\t\t\t\t{ __( 'Add to Reusable blocks' ) }\n\t\t\t\t</MenuItem>\n\t\t\t) }\n\t\t</BlockSettingsMenuControls>\n\t);\n}\n"]}