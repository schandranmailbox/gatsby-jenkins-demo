{"version":3,"sources":["@wordpress/reusable-blocks/src/components/reusable-blocks-menu-items/reusable-block-convert-button.js"],"names":["ReusableBlockConvertButton","clientIds","rootClientId","canConvert","select","canUser","getBlocksByClientId","canInsertBlockType","blocks","isReusable","length","getEntityRecord","attributes","ref","_canConvert","every","block","isValid","name","store","convertBlocksToReusable","__experimentalConvertBlocksToReusable","noticesStore","createSuccessNotice","createErrorNotice","onConvert","type","message","onClose","reusableBlock"],"mappings":";;;;;;;;;AAKA;;;;;;AAFA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AAKA;;AAfA;AACA;AACA;;AAUA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,0BAAT,OAGX;AAAA,MAFHC,SAEG,QAFHA,SAEG;AAAA,MADHC,YACG,QADHA,YACG;AACH,MAAMC,UAAU,GAAG,qBAClB,UAAEC,MAAF,EAAc;AAAA;;AAAA,kBACOA,MAAM,CAAE,MAAF,CADb;AAAA,QACLC,OADK,WACLA,OADK;;AAAA,mBAEuCD,MAAM,CACzD,mBADyD,CAF7C;AAAA,QAELE,mBAFK,YAELA,mBAFK;AAAA,QAEgBC,kBAFhB,YAEgBA,kBAFhB;;AAMb,QAAMC,MAAM,2BAAGF,mBAAmB,CAAEL,SAAF,CAAtB,uEAAuC,EAAnD;AAEA,QAAMQ,UAAU,GACfD,MAAM,CAACE,MAAP,KAAkB,CAAlB,IACAF,MAAM,CAAE,CAAF,CADN,IAEA,6BAAiBA,MAAM,CAAE,CAAF,CAAvB,CAFA,IAGA,CAAC,CAAEJ,MAAM,CAAE,MAAF,CAAN,CAAiBO,eAAjB,CACF,UADE,EAEF,UAFE,EAGFH,MAAM,CAAE,CAAF,CAAN,CAAYI,UAAZ,CAAuBC,GAHrB,CAJJ;;AAUA,QAAMC,WAAW,GAChB;AACA,KAAEL,UAAF,IACA;AACAF,IAAAA,kBAAkB,CAAE,YAAF,EAAgBL,YAAhB,CAFlB,IAGAM,MAAM,CAACO,KAAP,CACC,UAAEC,KAAF;AAAA,aACC;AACA,SAAC,CAAEA,KAAH,IACA;AACAA,QAAAA,KAAK,CAACC,OAFN,IAGA;AACA,qCAAiBD,KAAK,CAACE,IAAvB,EAA6B,UAA7B,EAAyC,IAAzC;AAND;AAAA,KADD,CAHA,IAYA;AACA,KAAC,CAAEb,OAAO,CAAE,QAAF,EAAY,QAAZ,CAfX;;AAiBA,WAAOS,WAAP;AACA,GArCiB,EAsClB,CAAEb,SAAF,CAtCkB,CAAnB;;AADG,qBA4CC,uBAAakB,YAAb,CA5CD;AAAA,MA2CqCC,uBA3CrC,gBA2CFC,qCA3CE;;AAAA,sBA8CgD,uBAClDC,cADkD,CA9ChD;AAAA,MA8CKC,mBA9CL,iBA8CKA,mBA9CL;AAAA,MA8C0BC,iBA9C1B,iBA8C0BA,iBA9C1B;;AAiDH,MAAMC,SAAS,GAAG,gHACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEQL,uBAAuB,CAAEnB,SAAF,CAF/B;;AAAA;AAGEsB,YAAAA,mBAAmB,CAAE,cAAI,gBAAJ,CAAF,EAA0B;AAC5CG,cAAAA,IAAI,EAAE;AADsC,aAA1B,CAAnB;AAHF;AAAA;;AAAA;AAAA;AAAA;AAOEF,YAAAA,iBAAiB,CAAE,YAAMG,OAAR,EAAiB;AACjCD,cAAAA,IAAI,EAAE;AAD2B,aAAjB,CAAjB;;AAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADiB,IAajB,CAAEzB,SAAF,CAbiB,CAAlB;;AAgBA,MAAK,CAAEE,UAAP,EAAoB;AACnB,WAAO,IAAP;AACA;;AAED,SACC,4BAAC,sCAAD,QACG;AAAA,QAAIyB,OAAJ,SAAIA,OAAJ;AAAA,WACD,4BAAC,oBAAD;AACC,MAAA,IAAI,EAAGC,oBADR;AAEC,MAAA,OAAO,EAAG,mBAAM;AACfJ,QAAAA,SAAS;AACTG,QAAAA,OAAO;AACP;AALF,OAOG,cAAI,wBAAJ,CAPH,CADC;AAAA,GADH,CADD;AAeA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { hasBlockSupport, isReusableBlock } from '@wordpress/blocks';\nimport { BlockSettingsMenuControls } from '@wordpress/block-editor';\nimport { useCallback } from '@wordpress/element';\nimport { MenuItem } from '@wordpress/components';\nimport { reusableBlock } from '@wordpress/icons';\nimport { useDispatch, useSelect } from '@wordpress/data';\nimport { __ } from '@wordpress/i18n';\nimport { store as noticesStore } from '@wordpress/notices';\n\n/**\n * Internal dependencies\n */\nimport { store } from '../../store';\n\n/**\n * Menu control to convert block(s) to reusable block.\n *\n * @param {Object}   props              Component props.\n * @param {string[]} props.clientIds    Client ids of selected blocks.\n * @param {string}   props.rootClientId ID of the currently selected top-level block.\n * @return {import('@wordpress/element').WPComponent} The menu control or null.\n */\nexport default function ReusableBlockConvertButton( {\n\tclientIds,\n\trootClientId,\n} ) {\n\tconst canConvert = useSelect(\n\t\t( select ) => {\n\t\t\tconst { canUser } = select( 'core' );\n\t\t\tconst { getBlocksByClientId, canInsertBlockType } = select(\n\t\t\t\t'core/block-editor'\n\t\t\t);\n\n\t\t\tconst blocks = getBlocksByClientId( clientIds ) ?? [];\n\n\t\t\tconst isReusable =\n\t\t\t\tblocks.length === 1 &&\n\t\t\t\tblocks[ 0 ] &&\n\t\t\t\tisReusableBlock( blocks[ 0 ] ) &&\n\t\t\t\t!! select( 'core' ).getEntityRecord(\n\t\t\t\t\t'postType',\n\t\t\t\t\t'wp_block',\n\t\t\t\t\tblocks[ 0 ].attributes.ref\n\t\t\t\t);\n\n\t\t\tconst _canConvert =\n\t\t\t\t// Hide when this is already a reusable block.\n\t\t\t\t! isReusable &&\n\t\t\t\t// Hide when reusable blocks are disabled.\n\t\t\t\tcanInsertBlockType( 'core/block', rootClientId ) &&\n\t\t\t\tblocks.every(\n\t\t\t\t\t( block ) =>\n\t\t\t\t\t\t// Guard against the case where a regular block has *just* been converted.\n\t\t\t\t\t\t!! block &&\n\t\t\t\t\t\t// Hide on invalid blocks.\n\t\t\t\t\t\tblock.isValid &&\n\t\t\t\t\t\t// Hide when block doesn't support being made reusable.\n\t\t\t\t\t\thasBlockSupport( block.name, 'reusable', true )\n\t\t\t\t) &&\n\t\t\t\t// Hide when current doesn't have permission to do that.\n\t\t\t\t!! canUser( 'create', 'blocks' );\n\n\t\t\treturn _canConvert;\n\t\t},\n\t\t[ clientIds ]\n\t);\n\n\tconst {\n\t\t__experimentalConvertBlocksToReusable: convertBlocksToReusable,\n\t} = useDispatch( store );\n\n\tconst { createSuccessNotice, createErrorNotice } = useDispatch(\n\t\tnoticesStore\n\t);\n\tconst onConvert = useCallback(\n\t\tasync function () {\n\t\t\ttry {\n\t\t\t\tawait convertBlocksToReusable( clientIds );\n\t\t\t\tcreateSuccessNotice( __( 'Block created.' ), {\n\t\t\t\t\ttype: 'snackbar',\n\t\t\t\t} );\n\t\t\t} catch ( error ) {\n\t\t\t\tcreateErrorNotice( error.message, {\n\t\t\t\t\ttype: 'snackbar',\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\t\t[ clientIds ]\n\t);\n\n\tif ( ! canConvert ) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<BlockSettingsMenuControls>\n\t\t\t{ ( { onClose } ) => (\n\t\t\t\t<MenuItem\n\t\t\t\t\ticon={ reusableBlock }\n\t\t\t\t\tonClick={ () => {\n\t\t\t\t\t\tonConvert();\n\t\t\t\t\t\tonClose();\n\t\t\t\t\t} }\n\t\t\t\t>\n\t\t\t\t\t{ __( 'Add to Reusable blocks' ) }\n\t\t\t\t</MenuItem>\n\t\t\t) }\n\t\t</BlockSettingsMenuControls>\n\t);\n}\n"]}