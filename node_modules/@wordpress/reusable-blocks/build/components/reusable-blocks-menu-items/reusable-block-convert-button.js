"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ReusableBlockConvertButton;

var _element = require("@wordpress/element");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _blocks = require("@wordpress/blocks");

var _blockEditor = require("@wordpress/block-editor");

var _components = require("@wordpress/components");

var _icons = require("@wordpress/icons");

var _data = require("@wordpress/data");

var _i18n = require("@wordpress/i18n");

var _notices = require("@wordpress/notices");

var _store = require("../../store");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * Menu control to convert block(s) to reusable block.
 *
 * @param {Object}   props              Component props.
 * @param {string[]} props.clientIds    Client ids of selected blocks.
 * @param {string}   props.rootClientId ID of the currently selected top-level block.
 * @return {import('@wordpress/element').WPComponent} The menu control or null.
 */
function ReusableBlockConvertButton(_ref) {
  var clientIds = _ref.clientIds,
      rootClientId = _ref.rootClientId;
  var canConvert = (0, _data.useSelect)(function (select) {
    var _getBlocksByClientId;

    var _select = select('core'),
        canUser = _select.canUser;

    var _select2 = select('core/block-editor'),
        getBlocksByClientId = _select2.getBlocksByClientId,
        canInsertBlockType = _select2.canInsertBlockType;

    var blocks = (_getBlocksByClientId = getBlocksByClientId(clientIds)) !== null && _getBlocksByClientId !== void 0 ? _getBlocksByClientId : [];
    var isReusable = blocks.length === 1 && blocks[0] && (0, _blocks.isReusableBlock)(blocks[0]) && !!select('core').getEntityRecord('postType', 'wp_block', blocks[0].attributes.ref);

    var _canConvert = // Hide when this is already a reusable block.
    !isReusable && // Hide when reusable blocks are disabled.
    canInsertBlockType('core/block', rootClientId) && blocks.every(function (block) {
      return (// Guard against the case where a regular block has *just* been converted.
        !!block && // Hide on invalid blocks.
        block.isValid && // Hide when block doesn't support being made reusable.
        (0, _blocks.hasBlockSupport)(block.name, 'reusable', true)
      );
    }) && // Hide when current doesn't have permission to do that.
    !!canUser('create', 'blocks');

    return _canConvert;
  }, [clientIds]);

  var _useDispatch = (0, _data.useDispatch)(_store.store),
      convertBlocksToReusable = _useDispatch.__experimentalConvertBlocksToReusable;

  var _useDispatch2 = (0, _data.useDispatch)(_notices.store),
      createSuccessNotice = _useDispatch2.createSuccessNotice,
      createErrorNotice = _useDispatch2.createErrorNotice;

  var onConvert = (0, _element.useCallback)( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return convertBlocksToReusable(clientIds);

          case 3:
            createSuccessNotice((0, _i18n.__)('Block created.'), {
              type: 'snackbar'
            });
            _context.next = 9;
            break;

          case 6:
            _context.prev = 6;
            _context.t0 = _context["catch"](0);
            createErrorNotice(_context.t0.message, {
              type: 'snackbar'
            });

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 6]]);
  })), [clientIds]);

  if (!canConvert) {
    return null;
  }

  return (0, _element.createElement)(_blockEditor.BlockSettingsMenuControls, null, function (_ref3) {
    var onClose = _ref3.onClose;
    return (0, _element.createElement)(_components.MenuItem, {
      icon: _icons.reusableBlock,
      onClick: function onClick() {
        onConvert();
        onClose();
      }
    }, (0, _i18n.__)('Add to Reusable blocks'));
  });
}
//# sourceMappingURL=reusable-block-convert-button.js.map