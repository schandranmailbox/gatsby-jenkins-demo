{"version":3,"sources":["@wordpress/viewport/src/listener.native.js"],"names":["forEach","reduce","Dimensions","dispatch","store","matchWidth","operator","breakpoint","get","width","Error","addDimensionsEventListener","breakpoints","operators","setIsMatching","matches","result","name","condition","key","join","addEventListener"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,OAAT,EAAkBC,MAAlB,QAAgC,QAAhC;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA;AACA;AACA;;AACA,SAASC,QAAT,QAAyB,iBAAzB;AAEA;AACA;AACA;;AACA,SAASC,KAAT,QAAsB,SAAtB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAEC,QAAF,EAAYC,UAAZ,EAA4B;AAAA,wBAC5BL,UAAU,CAACM,GAAX,CAAgB,QAAhB,CAD4B;AAAA,MACtCC,KADsC,mBACtCA,KADsC;;AAE9C,MAAKH,QAAQ,KAAK,WAAlB,EAAgC;AAC/B,WAAOG,KAAK,GAAGF,UAAf;AACA,GAFD,MAEO,IAAKD,QAAQ,KAAK,WAAlB,EAAgC;AACtC,WAAOG,KAAK,IAAIF,UAAhB;AACA;;AACD,QAAM,IAAIG,KAAJ,0CAA8CJ,QAA9C,EAAN;AACA,CARD;;AAUA,IAAMK,0BAA0B,GAAG,SAA7BA,0BAA6B,CAAEC,WAAF,EAAeC,SAAf,EAA8B;AAChE,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC3B,QAAMC,OAAO,GAAGd,MAAM,CACrBW,WADqB,EAErB,UAAEI,MAAF,EAAUP,KAAV,EAAiBQ,IAAjB,EAA2B;AAC1BjB,MAAAA,OAAO,CAAEa,SAAF,EAAa,UAAEK,SAAF,EAAaZ,QAAb,EAA2B;AAC9C,YAAMa,GAAG,GAAG,CAAEb,QAAF,EAAYW,IAAZ,EAAmBG,IAAnB,CAAyB,GAAzB,CAAZ;AACAJ,QAAAA,MAAM,CAAEG,GAAF,CAAN,GAAgBd,UAAU,CAAEa,SAAF,EAAaT,KAAb,CAA1B;AACA,OAHM,CAAP;AAKA,aAAOO,MAAP;AACA,KAToB,EAUrB,EAVqB,CAAtB;AAaAb,IAAAA,QAAQ,CAAEC,KAAF,CAAR,CAAkBU,aAAlB,CAAiCC,OAAjC;AACA,GAfD;;AAiBAb,EAAAA,UAAU,CAACmB,gBAAX,CAA6B,QAA7B,EAAuCP,aAAvC,EAlBgE,CAoBhE;;AACAA,EAAAA,aAAa;AACb,CAtBD;;AAwBA,eAAeH,0BAAf","sourcesContent":["/**\n * External dependencies\n */\nimport { forEach, reduce } from 'lodash';\nimport { Dimensions } from 'react-native';\n\n/**\n * WordPress dependencies\n */\nimport { dispatch } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { store } from './store';\n\nconst matchWidth = ( operator, breakpoint ) => {\n\tconst { width } = Dimensions.get( 'window' );\n\tif ( operator === 'max-width' ) {\n\t\treturn width < breakpoint;\n\t} else if ( operator === 'min-width' ) {\n\t\treturn width >= breakpoint;\n\t}\n\tthrow new Error( `Unsupported viewport operator: ${ operator }` );\n};\n\nconst addDimensionsEventListener = ( breakpoints, operators ) => {\n\tconst setIsMatching = () => {\n\t\tconst matches = reduce(\n\t\t\tbreakpoints,\n\t\t\t( result, width, name ) => {\n\t\t\t\tforEach( operators, ( condition, operator ) => {\n\t\t\t\t\tconst key = [ operator, name ].join( ' ' );\n\t\t\t\t\tresult[ key ] = matchWidth( condition, width );\n\t\t\t\t} );\n\n\t\t\t\treturn result;\n\t\t\t},\n\t\t\t{}\n\t\t);\n\n\t\tdispatch( store ).setIsMatching( matches );\n\t};\n\n\tDimensions.addEventListener( 'change', setIsMatching );\n\n\t// Set initial values\n\tsetIsMatching();\n};\n\nexport default addDimensionsEventListener;\n"]}