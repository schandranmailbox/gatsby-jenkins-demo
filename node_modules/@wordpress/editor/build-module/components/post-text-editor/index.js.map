{"version":3,"sources":["@wordpress/editor/src/components/post-text-editor/index.js"],"names":["Textarea","__","useState","useEffect","parse","useDispatch","useSelect","useInstanceId","VisuallyHidden","DEBOUNCE_TIME","PostTextEditor","postContent","select","getEditedPostContent","editPost","resetEditorBlocks","value","setValue","isDirty","setIsDirty","instanceId","saveText","blocks","timeoutId","setTimeout","clearTimeout","onChange","event","newValue","target","content","stopEditing"],"mappings":";;;AAAA;AACA;AACA;AACA,OAAOA,QAAP,MAAqB,yBAArB;AAEA;AACA;AACA;;AACA,SAASC,EAAT,QAAmB,iBAAnB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,oBAApC;AACA,SAASC,KAAT,QAAsB,mBAAtB;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,iBAAvC;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,cAAT,QAA+B,uBAA/B;AAEA,OAAO,IAAMC,aAAa,GAAG,GAAtB;AACP,eAAe,SAASC,cAAT,GAA0B;AACxC,MAAMC,WAAW,GAAGL,SAAS,CAC5B,UAAEM,MAAF;AAAA,WAAcA,MAAM,CAAE,aAAF,CAAN,CAAwBC,oBAAxB,EAAd;AAAA,GAD4B,EAE5B,EAF4B,CAA7B;;AADwC,qBAMAR,WAAW,CAAE,aAAF,CANX;AAAA,MAMhCS,QANgC,gBAMhCA,QANgC;AAAA,MAMtBC,iBANsB,gBAMtBA,iBANsB;;AAAA,kBAQZb,QAAQ,CAAES,WAAF,CARI;AAAA;AAAA,MAQhCK,KARgC;AAAA,MAQzBC,QARyB;;AAAA,mBASRf,QAAQ,CAAE,KAAF,CATA;AAAA;AAAA,MAShCgB,OATgC;AAAA,MASvBC,UATuB;;AAUxC,MAAMC,UAAU,GAAGb,aAAa,CAAEG,cAAF,CAAhC;;AAEA,MAAK,CAAEQ,OAAF,IAAaF,KAAK,KAAKL,WAA5B,EAA0C;AACzCM,IAAAA,QAAQ,CAAEN,WAAF,CAAR;AACA;;AAED,MAAMU,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACtB,QAAMC,MAAM,GAAGlB,KAAK,CAAEY,KAAF,CAApB;AACAD,IAAAA,iBAAiB,CAAEO,MAAF,CAAjB;AACA,GAHD;;AAKAnB,EAAAA,SAAS,CAAE,YAAM;AAChB,QAAMoB,SAAS,GAAGC,UAAU,CAAEH,QAAF,EAAYZ,aAAZ,CAA5B;AACA,WAAO,YAAM;AACZgB,MAAAA,YAAY,CAAEF,SAAF,CAAZ;AACA,KAFD;AAGA,GALQ,EAKN,CAAEP,KAAF,CALM,CAAT;AAOA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACC,MAAMU,QAAQ,GAAG,SAAXA,QAAW,CAAEC,KAAF,EAAa;AAC7B,QAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAab,KAA9B;AACAF,IAAAA,QAAQ,CAAE;AAAEgB,MAAAA,OAAO,EAAEF;AAAX,KAAF,CAAR;AACAX,IAAAA,QAAQ,CAAEW,QAAF,CAAR;AACAT,IAAAA,UAAU,CAAE,IAAF,CAAV;AACA,GALD;AAOA;AACD;AACA;AACA;AACA;;;AACC,MAAMY,WAAW,GAAG,SAAdA,WAAc,GAAM;AACzB,QAAKb,OAAL,EAAe;AACdG,MAAAA,QAAQ;AACRF,MAAAA,UAAU,CAAE,KAAF,CAAV;AACA;AACD,GALD;;AAOA,SACC,8BACC,cAAC,cAAD;AACC,IAAA,EAAE,EAAC,OADJ;AAEC,IAAA,OAAO,yBAAoBC,UAApB;AAFR,KAIGnB,EAAE,CAAE,mBAAF,CAJL,CADD,EAOC,cAAC,QAAD;AACC,IAAA,YAAY,EAAC,KADd;AAEC,IAAA,GAAG,EAAC,MAFL;AAGC,IAAA,KAAK,EAAGe,KAHT;AAIC,IAAA,QAAQ,EAAGU,QAJZ;AAKC,IAAA,MAAM,EAAGK,WALV;AAMC,IAAA,SAAS,EAAC,yBANX;AAOC,IAAA,EAAE,yBAAoBX,UAApB,CAPH;AAQC,IAAA,WAAW,EAAGnB,EAAE,CAAE,iCAAF;AARjB,IAPD,CADD;AAoBA","sourcesContent":["/**\n * External dependencies\n */\nimport Textarea from 'react-autosize-textarea';\n\n/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { useState, useEffect } from '@wordpress/element';\nimport { parse } from '@wordpress/blocks';\nimport { useDispatch, useSelect } from '@wordpress/data';\nimport { useInstanceId } from '@wordpress/compose';\nimport { VisuallyHidden } from '@wordpress/components';\n\nexport const DEBOUNCE_TIME = 300;\nexport default function PostTextEditor() {\n\tconst postContent = useSelect(\n\t\t( select ) => select( 'core/editor' ).getEditedPostContent(),\n\t\t[]\n\t);\n\n\tconst { editPost, resetEditorBlocks } = useDispatch( 'core/editor' );\n\n\tconst [ value, setValue ] = useState( postContent );\n\tconst [ isDirty, setIsDirty ] = useState( false );\n\tconst instanceId = useInstanceId( PostTextEditor );\n\n\tif ( ! isDirty && value !== postContent ) {\n\t\tsetValue( postContent );\n\t}\n\n\tconst saveText = () => {\n\t\tconst blocks = parse( value );\n\t\tresetEditorBlocks( blocks );\n\t};\n\n\tuseEffect( () => {\n\t\tconst timeoutId = setTimeout( saveText, DEBOUNCE_TIME );\n\t\treturn () => {\n\t\t\tclearTimeout( timeoutId );\n\t\t};\n\t}, [ value ] );\n\n\t/**\n\t * Handles a textarea change event to notify the onChange prop callback and\n\t * reflect the new value in the component's own state. This marks the start\n\t * of the user's edits, if not already changed, preventing future props\n\t * changes to value from replacing the rendered value. This is expected to\n\t * be followed by a reset to dirty state via `stopEditing`.\n\t *\n\t * @see stopEditing\n\t *\n\t * @param {Event} event Change event.\n\t */\n\tconst onChange = ( event ) => {\n\t\tconst newValue = event.target.value;\n\t\teditPost( { content: newValue } );\n\t\tsetValue( newValue );\n\t\tsetIsDirty( true );\n\t};\n\n\t/**\n\t * Function called when the user has completed their edits, responsible for\n\t * ensuring that changes, if made, are surfaced to the onPersist prop\n\t * callback and resetting dirty state.\n\t */\n\tconst stopEditing = () => {\n\t\tif ( isDirty ) {\n\t\t\tsaveText();\n\t\t\tsetIsDirty( false );\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<VisuallyHidden\n\t\t\t\tas=\"label\"\n\t\t\t\thtmlFor={ `post-content-${ instanceId }` }\n\t\t\t>\n\t\t\t\t{ __( 'Type text or HTML' ) }\n\t\t\t</VisuallyHidden>\n\t\t\t<Textarea\n\t\t\t\tautoComplete=\"off\"\n\t\t\t\tdir=\"auto\"\n\t\t\t\tvalue={ value }\n\t\t\t\tonChange={ onChange }\n\t\t\t\tonBlur={ stopEditing }\n\t\t\t\tclassName=\"editor-post-text-editor\"\n\t\t\t\tid={ `post-content-${ instanceId }` }\n\t\t\t\tplaceholder={ __( 'Start writing with text or HTML' ) }\n\t\t\t/>\n\t\t</>\n\t);\n}\n"]}