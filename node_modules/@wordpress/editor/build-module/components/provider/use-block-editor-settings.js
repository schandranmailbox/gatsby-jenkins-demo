import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * External dependencies
 */
import { map, pick, defaultTo, flatten, partialRight } from 'lodash';
/**
 * WordPress dependencies
 */

import { Platform, useMemo } from '@wordpress/element';
import { useDispatch, useSelect } from '@wordpress/data';
import { __ } from '@wordpress/i18n';
import { store as coreStore } from '@wordpress/core-data';
import apiFetch from '@wordpress/api-fetch';
import { addQueryArgs } from '@wordpress/url';
import { decodeEntities } from '@wordpress/html-entities';
/**
 * Internal dependencies
 */

import { mediaUpload } from '../../utils';
import { store as editorStore } from '../../store';
/**
 * Fetches link suggestions from the API. This function is an exact copy of a function found at:
 *
 * packages/edit-navigation/src/index.js
 *
 * It seems like there is no suitable package to import this from. Ideally it would be either part of core-data.
 * Until we refactor it, just copying the code is the simplest solution.
 *
 * @param {string} search
 * @param {Object} [searchArguments]
 * @param {number} [searchArguments.isInitialSuggestions]
 * @param {number} [searchArguments.type]
 * @param {number} [searchArguments.subtype]
 * @param {number} [searchArguments.page]
 * @param {Object} [editorSettings]
 * @param {boolean} [editorSettings.disablePostFormats=false]
 * @return {Promise<Object[]>} List of suggestions
 */

var fetchLinkSuggestions = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(search) {
    var _ref2,
        isInitialSuggestions,
        type,
        subtype,
        page,
        perPageArg,
        _ref3,
        _ref3$disablePostForm,
        disablePostFormats,
        perPage,
        queries,
        _args = arguments;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _ref2 = _args.length > 1 && _args[1] !== undefined ? _args[1] : {}, isInitialSuggestions = _ref2.isInitialSuggestions, type = _ref2.type, subtype = _ref2.subtype, page = _ref2.page, perPageArg = _ref2.perPage;
            _ref3 = _args.length > 2 && _args[2] !== undefined ? _args[2] : {}, _ref3$disablePostForm = _ref3.disablePostFormats, disablePostFormats = _ref3$disablePostForm === void 0 ? false : _ref3$disablePostForm;
            perPage = perPageArg || isInitialSuggestions ? 3 : 20;
            queries = [];

            if (!type || type === 'post') {
              queries.push(apiFetch({
                path: addQueryArgs('/wp/v2/search', {
                  search: search,
                  page: page,
                  per_page: perPage,
                  type: 'post',
                  subtype: subtype
                })
              }).catch(function () {
                return [];
              }) // fail by returning no results
              );
            }

            if (!type || type === 'term') {
              queries.push(apiFetch({
                path: addQueryArgs('/wp/v2/search', {
                  search: search,
                  page: page,
                  per_page: perPage,
                  type: 'term',
                  subtype: subtype
                })
              }).catch(function () {
                return [];
              }));
            }

            if (!disablePostFormats && (!type || type === 'post-format')) {
              queries.push(apiFetch({
                path: addQueryArgs('/wp/v2/search', {
                  search: search,
                  page: page,
                  per_page: perPage,
                  type: 'post-format',
                  subtype: subtype
                })
              }).catch(function () {
                return [];
              }));
            }

            return _context.abrupt("return", Promise.all(queries).then(function (results) {
              return map(flatten(results).filter(function (result) {
                return !!result.id;
              }).slice(0, perPage), function (result) {
                return {
                  id: result.id,
                  url: result.url,
                  title: decodeEntities(result.title) || __('(no title)'),
                  type: result.subtype || result.type
                };
              });
            }));

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function fetchLinkSuggestions(_x) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * React hook used to compute the block editor settings to use for the post editor.
 *
 * @param {Object}  settings    EditorProvider settings prop.
 * @param {boolean} hasTemplate Whether template mode is enabled.
 *
 * @return {Object} Block Editor Settings.
 */


function useBlockEditorSettings(settings, hasTemplate) {
  var _useSelect = useSelect(function (select) {
    var _select = select(editorStore),
        canUserUseUnfilteredHTML = _select.canUserUseUnfilteredHTML,
        isPostTitleSelected = _select.isPostTitleSelected;

    var _select2 = select(coreStore),
        canUser = _select2.canUser;

    return {
      canUseUnfilteredHTML: canUserUseUnfilteredHTML(),
      reusableBlocks: select('core').getEntityRecords('postType', 'wp_block',
      /**
       * Unbounded queries are not supported on native so as a workaround we set per_page with the maximum value.
       * Related issue: https://github.com/wordpress-mobile/gutenberg-mobile/issues/2661
       */
      {
        per_page: Platform.select({
          web: -1,
          native: 100
        })
      }),
      hasUploadPermissions: defaultTo(canUser('create', 'media'), true),
      // This selector is only defined on mobile.
      isTitleSelected: isPostTitleSelected && isPostTitleSelected()
    };
  }, []),
      reusableBlocks = _useSelect.reusableBlocks,
      hasUploadPermissions = _useSelect.hasUploadPermissions,
      canUseUnfilteredHTML = _useSelect.canUseUnfilteredHTML,
      isTitleSelected = _useSelect.isTitleSelected;

  var _useDispatch = useDispatch(editorStore),
      undo = _useDispatch.undo;

  return useMemo(function () {
    return _objectSpread(_objectSpread({}, pick(settings, ['__experimentalBlockDirectory', '__experimentalBlockPatterns', '__experimentalBlockPatternCategories', '__experimentalFeatures', '__experimentalGlobalStylesUserEntityId', '__experimentalGlobalStylesBaseStyles', '__experimentalPreferredStyleVariations', '__experimentalSetIsInserterOpened', 'alignWide', 'allowedBlockTypes', 'availableLegacyWidgets', 'bodyPlaceholder', 'codeEditingEnabled', 'colors', 'disableCustomColors', 'disableCustomFontSizes', 'disableCustomGradients', 'enableCustomUnits', 'enableCustomLineHeight', 'focusMode', 'fontSizes', 'gradients', 'hasFixedToolbar', 'hasReducedUI', 'imageEditing', 'imageSizes', 'imageDimensions', 'isRTL', 'keepCaretInsideBlock', 'maxWidth', 'onUpdateDefaultBlockStyles', 'styles', 'template', 'templateLock', 'titlePlaceholder'])), {}, {
      mediaUpload: hasUploadPermissions ? mediaUpload : undefined,
      __experimentalReusableBlocks: reusableBlocks,
      __experimentalFetchLinkSuggestions: partialRight(fetchLinkSuggestions, settings),
      __experimentalCanUserUseUnfilteredHTML: canUseUnfilteredHTML,
      __experimentalUndo: undo,
      __experimentalShouldInsertAtTheTop: isTitleSelected,
      outlineMode: hasTemplate
    });
  }, [settings, hasUploadPermissions, reusableBlocks, canUseUnfilteredHTML, undo, isTitleSelected, hasTemplate]);
}

export default useBlockEditorSettings;
//# sourceMappingURL=use-block-editor-settings.js.map