import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { find, get, includes, union } from 'lodash';
/**
 * WordPress dependencies
 */

import { __ } from '@wordpress/i18n';
import { Button, SelectControl } from '@wordpress/components';
import { useDispatch, useSelect } from '@wordpress/data';
import { useInstanceId } from '@wordpress/compose';
/**
 * Internal dependencies
 */

import PostFormatCheck from './check'; // All WP post formats, sorted alphabetically by translated name.

export var POST_FORMATS = [{
  id: 'aside',
  caption: __('Aside')
}, {
  id: 'audio',
  caption: __('Audio')
}, {
  id: 'chat',
  caption: __('Chat')
}, {
  id: 'gallery',
  caption: __('Gallery')
}, {
  id: 'image',
  caption: __('Image')
}, {
  id: 'link',
  caption: __('Link')
}, {
  id: 'quote',
  caption: __('Quote')
}, {
  id: 'standard',
  caption: __('Standard')
}, {
  id: 'status',
  caption: __('Status')
}, {
  id: 'video',
  caption: __('Video')
}].sort(function (a, b) {
  var normalizedA = a.caption.toUpperCase();
  var normalizedB = b.caption.toUpperCase();

  if (normalizedA < normalizedB) {
    return -1;
  }

  if (normalizedA > normalizedB) {
    return 1;
  }

  return 0;
});
export default function PostFormat() {
  var instanceId = useInstanceId(PostFormat);
  var postFormatSelectorId = "post-format-selector-".concat(instanceId);

  var _useSelect = useSelect(function (select) {
    var _select = select('core/editor'),
        getEditedPostAttribute = _select.getEditedPostAttribute,
        getSuggestedPostFormat = _select.getSuggestedPostFormat;

    var _postFormat = getEditedPostAttribute('format');

    var themeSupports = select('core').getThemeSupports();
    return {
      postFormat: _postFormat !== null && _postFormat !== void 0 ? _postFormat : 'standard',
      suggestedFormat: getSuggestedPostFormat(),
      // Ensure current format is always in the set.
      // The current format may not be a format supported by the theme.
      supportedFormats: union([_postFormat], get(themeSupports, ['formats'], []))
    };
  }, []),
      postFormat = _useSelect.postFormat,
      suggestedFormat = _useSelect.suggestedFormat,
      supportedFormats = _useSelect.supportedFormats;

  var formats = POST_FORMATS.filter(function (format) {
    return includes(supportedFormats, format.id);
  });
  var suggestion = find(formats, function (format) {
    return format.id === suggestedFormat;
  });

  var _useDispatch = useDispatch('core/editor'),
      editPost = _useDispatch.editPost;

  var onUpdatePostFormat = function onUpdatePostFormat(format) {
    return editPost({
      format: format
    });
  };

  return createElement(PostFormatCheck, null, createElement("div", {
    className: "editor-post-format"
  }, createElement("div", {
    className: "editor-post-format__content"
  }, createElement("label", {
    htmlFor: postFormatSelectorId
  }, __('Post Format')), createElement(SelectControl, {
    value: postFormat,
    onChange: function onChange(format) {
      return onUpdatePostFormat(format);
    },
    id: postFormatSelectorId,
    options: formats.map(function (format) {
      return {
        label: format.caption,
        value: format.id
      };
    })
  })), suggestion && suggestion.id !== postFormat && createElement("div", {
    className: "editor-post-format__suggestion"
  }, __('Suggestion:'), ' ', createElement(Button, {
    isLink: true,
    onClick: function onClick() {
      return onUpdatePostFormat(suggestion.id);
    }
  }, suggestion.caption))));
}
//# sourceMappingURL=index.js.map