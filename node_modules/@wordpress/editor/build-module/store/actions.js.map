{"version":3,"sources":["@wordpress/editor/src/store/actions.js"],"names":["setupEditor","resetAutosave","editPost","savePost","refreshPost","trashPost","autosave","redo","undo","resetEditorBlocks","has","deprecated","controls","apiFetch","parse","synchronizeBlocksWithTemplate","__unstableSerializeAndClean","store","noticesStore","STORE_NAME","TRASH_POST_NOTICE_ID","getNotificationArgumentsForSaveSuccess","getNotificationArgumentsForSaveFail","getNotificationArgumentsForTrashFail","post","edits","template","content","raw","blocks","isNewPost","status","resetPost","type","__unstableShouldCreateUndoLevel","setupEditorState","Object","keys","some","key","__experimentalTearDownEditor","newAutosave","alternative","plugin","select","postId","dispatch","__experimentalRequestPostUpdateStart","options","__experimentalRequestPostUpdateFinish","updatePost","id","isAutosave","undoIgnore","previousRecord","error","args","length","updatedRecord","resolveSelect","previousPost","postType","postTypeSlug","path","rest_base","Date","now","newPost","method","local","isPostNew","title","excerpt","createUndoLevel","updatePostLock","lock","enablePublishSidebar","disablePublishSidebar","lockPostSaving","lockName","unlockPostSaving","lockPostAutosaving","unlockPostAutosaving","selectionStart","selectionEnd","noChange","blocksForSerialization","updateEditorSettings","settings","getBlockEditorAction","name","resetBlocks","receiveBlocks","updateBlock","updateBlockAttributes","selectBlock","startMultiSelect","stopMultiSelect","multiSelect","clearSelectedBlock","toggleSelection","replaceBlocks","replaceBlock","moveBlocksDown","moveBlocksUp","moveBlockToPosition","insertBlock","insertBlocks","showInsertionPoint","hideInsertionPoint","setTemplateValidity","synchronizeTemplate","mergeBlocks","removeBlocks","removeBlock","toggleBlockMode","startTyping","stopTyping","enterFormattedText","exitFormattedText","insertDefaultBlock","updateBlockListSettings"],"mappings":";;;;;;;;;oDAoCiBA,W;qDA8EAC,a;qDAgFAC,Q;qDAkBAC,Q;qDA+FAC,W;qDAwBAC,S;qDAwCAC,Q;qDA4CAC,I;qDASAC,I;sDA0KAC,iB;;AAllBjB;AACA;AACA;AACA,SAASC,GAAT,QAAoB,QAApB;AAEA;AACA;AACA;;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SACCC,KADD,EAECC,6BAFD,EAGCC,2BAHD,QAIO,mBAJP;AAKA,SAASC,KAAK,IAAIC,YAAlB,QAAsC,oBAAtC;AAEA;AACA;AACA;;AACA,SAASC,UAAT,EAAqBC,oBAArB,QAAiD,aAAjD;AACA,SACCC,sCADD,EAECC,mCAFD,EAGCC,oCAHD,QAIO,wBAJP;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAUvB,WAAV,CAAuBwB,IAAvB,EAA6BC,KAA7B,EAAoCC,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AACN;AACA;AACA;AAEA,cAAKhB,GAAG,CAAEe,KAAF,EAAS,CAAE,SAAF,CAAT,CAAR,EAAmC;AAClCE,YAAAA,OAAO,GAAGF,KAAK,CAACE,OAAhB;AACA,WAFD,MAEO;AACNA,YAAAA,OAAO,GAAGH,IAAI,CAACG,OAAL,CAAaC,GAAvB;AACA;;AAEGC,UAAAA,MAXE,GAWOf,KAAK,CAAEa,OAAF,CAXZ,EAaN;;AACMG,UAAAA,SAdA,GAcYN,IAAI,CAACO,MAAL,KAAgB,YAd5B;;AAeN,cAAKD,SAAS,IAAIJ,QAAlB,EAA6B;AAC5BG,YAAAA,MAAM,GAAGd,6BAA6B,CAAEc,MAAF,EAAUH,QAAV,CAAtC;AACA;;AAjBK;AAmBN,iBAAMM,SAAS,CAAER,IAAF,CAAf;;AAnBM;AAAA;AAoBN,iBAAM;AACLS,YAAAA,IAAI,EAAE,cADD;AAELT,YAAAA,IAAI,EAAJA,IAFK;AAGLC,YAAAA,KAAK,EAALA,KAHK;AAILC,YAAAA,QAAQ,EAARA;AAJK,WAAN;;AApBM;AAAA;AA0BN,iBAAMjB,iBAAiB,CAAEoB,MAAF,EAAU;AAChCK,YAAAA,+BAA+B,EAAE;AADD,WAAV,CAAvB;;AA1BM;AAAA;AA6BN,iBAAMC,gBAAgB,CAAEX,IAAF,CAAtB;;AA7BM;AAAA,gBA+BLC,KAAK,IACLW,MAAM,CAACC,IAAP,CAAaZ,KAAb,EAAqBa,IAArB,CACC,UAAEC,GAAF;AAAA,mBACCd,KAAK,CAAEc,GAAF,CAAL,MACE7B,GAAG,CAAEc,IAAF,EAAQ,CAAEe,GAAF,EAAO,KAAP,CAAR,CAAH,GAA8Bf,IAAI,CAAEe,GAAF,CAAJ,CAAYX,GAA1C,GAAgDJ,IAAI,CAAEe,GAAF,CADtD,CADD;AAAA,WADD,CAhCK;AAAA;AAAA;AAAA;;AAAA;AAsCL,iBAAMrC,QAAQ,CAAEuB,KAAF,CAAd;;AAtCK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0CP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASe,4BAAT,GAAwC;AAC9C,SAAO;AAAEP,IAAAA,IAAI,EAAE;AAAR,GAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASD,SAAT,CAAoBR,IAApB,EAA2B;AACjC,SAAO;AACNS,IAAAA,IAAI,EAAE,YADA;AAENT,IAAAA,IAAI,EAAJA;AAFM,GAAP;AAIA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAUvB,aAAV,CAAyBwC,WAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AACN9B,UAAAA,UAAU,CAAE,4CAAF,EAAgD;AACzD+B,YAAAA,WAAW,EAAE,wCAD4C;AAEzDC,YAAAA,MAAM,EAAE;AAFiD,WAAhD,CAAV;AADM;AAMS,iBAAM/B,QAAQ,CAACgC,MAAT,CAAiBzB,UAAjB,EAA6B,kBAA7B,CAAN;;AANT;AAMA0B,UAAAA,MANA;AAAA;AAON,iBAAMjC,QAAQ,CAACkC,QAAT,CAAmB,MAAnB,EAA2B,kBAA3B,EAA+CD,MAA/C,EAAuDJ,WAAvD,CAAN;;AAPM;AAAA,4CASC;AAAER,YAAAA,IAAI,EAAE;AAAR,WATD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASc,oCAAT,GAA8D;AAAA,MAAfC,OAAe,uEAAL,EAAK;AACpE,SAAO;AACNf,IAAAA,IAAI,EAAE,2BADA;AAENe,IAAAA,OAAO,EAAPA;AAFM,GAAP;AAIA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,qCAAT,GAA+D;AAAA,MAAfD,OAAe,uEAAL,EAAK;AACrE,SAAO;AACNf,IAAAA,IAAI,EAAE,4BADA;AAENe,IAAAA,OAAO,EAAPA;AAFM,GAAP;AAIA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,UAAT,GAAsB;AAC5BvC,EAAAA,UAAU,CAAE,8CAAF,EAAkD;AAC3D+B,IAAAA,WAAW,EAAE;AAD8C,GAAlD,CAAV;AAGA,SAAO;AACNT,IAAAA,IAAI,EAAE;AADA,GAAP;AAGA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,gBAAT,CAA2BX,IAA3B,EAAkC;AACxC,SAAO;AACNS,IAAAA,IAAI,EAAE,oBADA;AAENT,IAAAA,IAAI,EAAJA;AAFM,GAAP;AAIA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAUtB,QAAV,CAAoBuB,KAApB,EAA2BuB,OAA3B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACe,iBAAMpC,QAAQ,CAACgC,MAAT,CAAiBzB,UAAjB,EAA6B,gBAA7B,CAAN;;AADf;AAAA;AACEgC,UAAAA,EADF,yBACEA,EADF;AACMlB,UAAAA,IADN,yBACMA,IADN;AAAA;AAEN,iBAAMrB,QAAQ,CAACkC,QAAT,CACL,MADK,EAEL,kBAFK,EAGL,UAHK,EAILb,IAJK,EAKLkB,EALK,EAML1B,KANK,EAOLuB,OAPK,CAAN;;AAFM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaP;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAU7C,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAoB6C,UAAAA,OAApB,8DAA8B,EAA9B;AAAA;AACG,iBAAMpC,QAAQ,CAACgC,MAAT,CAAiBzB,UAAjB,EAA6B,sBAA7B,CAAN;;AADH;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAKI,iBAAMP,QAAQ,CAACgC,MAAT,CAAiBzB,UAAjB,EAA6B,sBAA7B,CAAN;;AALJ;AAAA;AAIFM,UAAAA,KAJE;AAKLE,YAAAA,OALK;AAAA;;AAAA,cAOCqB,OAAO,CAACI,UAPT;AAAA;AAAA;AAAA;;AAAA;AAQL,iBAAMxC,QAAQ,CAACkC,QAAT,CAAmB3B,UAAnB,EAA+B,UAA/B,EAA2CM,KAA3C,EAAkD;AACvD4B,YAAAA,UAAU,EAAE;AAD2C,WAAlD,CAAN;;AARK;AAAA;AAaN,iBAAMN,oCAAoC,CAAEC,OAAF,CAA1C;;AAbM;AAAA;AAciB,iBAAMpC,QAAQ,CAACgC,MAAT,CAC5BzB,UAD4B,EAE5B,gBAF4B,CAAN;;AAdjB;AAcAmC,UAAAA,cAdA;AAAA;AAAA;AAAA;AAmBLH,YAAAA,EAAE,EAAEG,cAAc,CAACH;AAnBd;AAAA;AAoBA,iBAAMvC,QAAQ,CAACgC,MAAT,CACV,MADU,EAEV,kCAFU,EAGV,UAHU,EAIVU,cAAc,CAACrB,IAJL,EAKVqB,cAAc,CAACH,EALL,CAAN;;AApBA;AAAA;AAAA;AAAA,yBA2BF1B,KA3BE;AAkBNA,UAAAA,KAlBM;AAAA;AA6BN,iBAAMb,QAAQ,CAACkC,QAAT,CACL,MADK,EAEL,kBAFK,EAGL,UAHK,EAILQ,cAAc,CAACrB,IAJV,EAKLR,KALK,EAMLuB,OANK,CAAN;;AA7BM;AAAA;AAqCN,iBAAMC,qCAAqC,CAAED,OAAF,CAA3C;;AArCM;AAAA;AAuCQ,iBAAMpC,QAAQ,CAACgC,MAAT,CACnB,MADmB,EAEnB,wBAFmB,EAGnB,UAHmB,EAInBU,cAAc,CAACrB,IAJI,EAKnBqB,cAAc,CAACH,EALI,CAAN;;AAvCR;AAuCAI,UAAAA,KAvCA;;AAAA,eA8CDA,KA9CC;AAAA;AAAA;AAAA;;AA+CCC,UAAAA,IA/CD,GA+CQlC,mCAAmC,CAAE;AACjDE,YAAAA,IAAI,EAAE8B,cAD2C;AAEjD7B,YAAAA,KAAK,EAALA,KAFiD;AAGjD8B,YAAAA,KAAK,EAALA;AAHiD,WAAF,CA/C3C;;AAAA,eAoDAC,IAAI,CAACC,MApDL;AAAA;AAAA;AAAA;;AAAA;AAqDJ,iBAAM7C,QAAQ,CAACkC,QAAT,OAAAlC,QAAQ,GACbM,YADa,EAEb,mBAFa,4BAGVsC,IAHU,GAAd;;AArDI;AAAA;AAAA;;AAAA;AAAA;AA4DiB,iBAAM5C,QAAQ,CAACgC,MAAT,CAC3BzB,UAD2B,EAE3B,gBAF2B,CAAN;;AA5DjB;AA4DCuC,UAAAA,aA5DD;AAAA,yBAgEQrC,sCAhER;AAAA,yBAiEUiC,cAjEV;AAAA,yBAkEEI,aAlEF;AAAA;AAmEM,iBAAM9C,QAAQ,CAAC+C,aAAT,CACf,MADe,EAEf,aAFe,EAGfD,aAAa,CAACzB,IAHC,CAAN;;AAnEN;AAAA;AAAA,0BAwEJe,OAxEI;AAAA;AAiEJY,YAAAA,YAjEI;AAkEJpC,YAAAA,IAlEI;AAmEJqC,YAAAA,QAnEI;AAwEJb,YAAAA,OAxEI;AAAA;AAgECQ,UAAAA,MAhED;;AAAA,eA0EAA,MAAI,CAACC,MA1EL;AAAA;AAAA;AAAA;;AAAA;AA2EJ,iBAAM7C,QAAQ,CAACkC,QAAT,OAAAlC,QAAQ,GACbM,YADa,EAEb,qBAFa,4BAGVsC,MAHU,GAAd;;AA3EI;AAAA,cAmFER,OAAO,CAACI,UAnFV;AAAA;AAAA;AAAA;;AAAA;AAoFJ,iBAAMxC,QAAQ,CAACkC,QAAT,CACL,mBADK,EAEL,sCAFK,CAAN;;AApFI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4FP;AACA;AACA;;AACA,OAAO,SAAU1C,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACO,iBAAMQ,QAAQ,CAACgC,MAAT,CAAiBzB,UAAjB,EAA6B,gBAA7B,CAAN;;AADP;AACAK,UAAAA,IADA;AAAA;AAEe,iBAAMZ,QAAQ,CAACgC,MAAT,CAC1BzB,UAD0B,EAE1B,oBAF0B,CAAN;;AAFf;AAEA2C,UAAAA,YAFA;AAAA;AAMW,iBAAMlD,QAAQ,CAAC+C,aAAT,CACtB,MADsB,EAEtB,aAFsB,EAGtBG,YAHsB,CAAN;;AANX;AAMAD,UAAAA,QANA;AAAA;AAWU,iBAAMhD,QAAQ,CAAE;AAC/B;AACA;AACAkD,YAAAA,IAAI,EACH,iBAAWF,QAAQ,CAACG,SAApB,cAAmCxC,IAAI,CAAC2B,EAAxC,uCAC6Bc,IAAI,CAACC,GAAL,EAD7B;AAJ8B,WAAF,CAAd;;AAXV;AAWAC,UAAAA,OAXA;AAAA;AAkBN,iBAAMvD,QAAQ,CAACkC,QAAT,CAAmB3B,UAAnB,EAA+B,WAA/B,EAA4CgD,OAA5C,CAAN;;AAlBM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBP;AACA;AACA;;AACA,OAAO,SAAU9D,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACe,iBAAMO,QAAQ,CAACgC,MAAT,CAC1BzB,UAD0B,EAE1B,oBAF0B,CAAN;;AADf;AACA2C,UAAAA,YADA;AAAA;AAKW,iBAAMlD,QAAQ,CAAC+C,aAAT,CACtB,MADsB,EAEtB,aAFsB,EAGtBG,YAHsB,CAAN;;AALX;AAKAD,UAAAA,QALA;AAAA;AAUN,iBAAMjD,QAAQ,CAACkC,QAAT,CACL5B,YADK,EAEL,cAFK,EAGLE,oBAHK,CAAN;;AAVM;AAAA;AAAA;AAgBQ,iBAAMR,QAAQ,CAACgC,MAAT,CAAiBzB,UAAjB,EAA6B,gBAA7B,CAAN;;AAhBR;AAgBCK,UAAAA,IAhBD;AAAA;AAiBL,iBAAMX,QAAQ,CAAE;AACfkD,YAAAA,IAAI,mBAAaF,QAAQ,CAACG,SAAtB,cAAqCxC,IAAI,CAAC2B,EAA1C,CADW;AAEfiB,YAAAA,MAAM,EAAE;AAFO,WAAF,CAAd;;AAjBK;AAAA;AAsBL,iBAAMxD,QAAQ,CAACkC,QAAT,CAAmB3B,UAAnB,EAA+B,UAA/B,CAAN;;AAtBK;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAwBL,iBAAMP,QAAQ,CAACkC,QAAT,OAAAlC,QAAQ,GACbM,YADa,EAEb,mBAFa,4BAGVK,oCAAoC,CAAE;AAAEgC,YAAAA,KAAK;AAAP,WAAF,CAH1B,GAAd;;AAxBK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgCP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAUjD,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4EAAoD,EAApD,oBAAsB+D,KAAtB,EAAsBA,KAAtB,2BAA8B,KAA9B,eAAwCrB,OAAxC;;AAAA,eACDqB,KADC;AAAA;AAAA;AAAA;;AAAA;AAEQ,iBAAMzD,QAAQ,CAACgC,MAAT,CAAiBzB,UAAjB,EAA6B,gBAA7B,CAAN;;AAFR;AAECK,UAAAA,IAFD;AAAA;AAGa,iBAAMZ,QAAQ,CAACgC,MAAT,CACvBzB,UADuB,EAEvB,iBAFuB,CAAN;;AAHb;AAGCmD,UAAAA,SAHD;AAAA;AAOS,iBAAM1D,QAAQ,CAACgC,MAAT,CACnBzB,UADmB,EAEnB,wBAFmB,EAGnB,OAHmB,CAAN;;AAPT;AAOCoD,UAAAA,KAPD;AAAA;AAYW,iBAAM3D,QAAQ,CAACgC,MAAT,CACrBzB,UADqB,EAErB,wBAFqB,EAGrB,SAHqB,CAAN;;AAZX;AAYCQ,UAAAA,OAZD;AAAA;AAiBW,iBAAMf,QAAQ,CAACgC,MAAT,CACrBzB,UADqB,EAErB,wBAFqB,EAGrB,SAHqB,CAAN;;AAjBX;AAiBCqD,UAAAA,OAjBD;AAAA;AAsBL,iBAAM;AACLvC,YAAAA,IAAI,EAAE,oBADD;AAELY,YAAAA,MAAM,EAAErB,IAAI,CAAC2B,EAFR;AAGLmB,YAAAA,SAAS,EAATA,SAHK;AAILC,YAAAA,KAAK,EAALA,KAJK;AAKL5C,YAAAA,OAAO,EAAPA,OALK;AAML6C,YAAAA,OAAO,EAAPA;AANK,WAAN;;AAtBK;AAAA;AAAA;;AAAA;AAAA;AA+BL,iBAAM5D,QAAQ,CAACkC,QAAT,CAAmB3B,UAAnB,EAA+B,UAA/B;AACLiC,YAAAA,UAAU,EAAE;AADP,aAEFJ,OAFE,EAAN;;AA/BK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsCP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAUzC,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACN,iBAAMK,QAAQ,CAACkC,QAAT,CAAmB,MAAnB,EAA2B,MAA3B,CAAN;;AADM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIP;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAUtC,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACN,iBAAMI,QAAQ,CAACkC,QAAT,CAAmB,MAAnB,EAA2B,MAA3B,CAAN;;AADM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS2B,eAAT,GAA2B;AACjC,SAAO;AAAExC,IAAAA,IAAI,EAAE;AAAR,GAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASyC,cAAT,CAAyBC,IAAzB,EAAgC;AACtC,SAAO;AACN1C,IAAAA,IAAI,EAAE,kBADA;AAEN0C,IAAAA,IAAI,EAAJA;AAFM,GAAP;AAIA;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,oBAAT,GAAgC;AACtC,SAAO;AACN3C,IAAAA,IAAI,EAAE;AADA,GAAP;AAGA;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS4C,qBAAT,GAAiC;AACvC,SAAO;AACN5C,IAAAA,IAAI,EAAE;AADA,GAAP;AAGA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS6C,cAAT,CAAyBC,QAAzB,EAAoC;AAC1C,SAAO;AACN9C,IAAAA,IAAI,EAAE,kBADA;AAEN8C,IAAAA,QAAQ,EAARA;AAFM,GAAP;AAIA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CAA2BD,QAA3B,EAAsC;AAC5C,SAAO;AACN9C,IAAAA,IAAI,EAAE,oBADA;AAEN8C,IAAAA,QAAQ,EAARA;AAFM,GAAP;AAIA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,kBAAT,CAA6BF,QAA7B,EAAwC;AAC9C,SAAO;AACN9C,IAAAA,IAAI,EAAE,sBADA;AAEN8C,IAAAA,QAAQ,EAARA;AAFM,GAAP;AAIA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,oBAAT,CAA+BH,QAA/B,EAA0C;AAChD,SAAO;AACN9C,IAAAA,IAAI,EAAE,wBADA;AAEN8C,IAAAA,QAAQ,EAARA;AAFM,GAAP;AAIA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAUtE,iBAAV,CAA6BoB,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAqCmB,UAAAA,OAArC,iEAA+C,EAA/C;AAELd,UAAAA,+BAFK,GAKFc,OALE,CAELd,+BAFK,EAGLiD,cAHK,GAKFnC,OALE,CAGLmC,cAHK,EAILC,YAJK,GAKFpC,OALE,CAILoC,YAJK;AAMA3D,UAAAA,KANA,GAMQ;AAAEI,YAAAA,MAAM,EAANA,MAAF;AAAUsD,YAAAA,cAAc,EAAdA,cAAV;AAA0BC,YAAAA,YAAY,EAAZA;AAA1B,WANR;;AAAA,gBAQDlD,+BAA+B,KAAK,KARnC;AAAA;AAAA;AAAA;;AAAA;AASgB,iBAAMtB,QAAQ,CAACgC,MAAT,CAC1BzB,UAD0B,EAE1B,gBAF0B,CAAN;;AAThB;AAAA;AASGgC,UAAAA,EATH,0BASGA,EATH;AASOlB,UAAAA,IATP,0BASOA,IATP;AAAA;AAcF,iBAAMrB,QAAQ,CAACgC,MAAT,CACP,MADO,EAEP,uBAFO,EAGP,UAHO,EAIPX,IAJO,EAKPkB,EALO,CAAN;;AAdE;AAAA,0CAoBAtB,MApBA;AAAA,0BAoBWJ,KAAK,CAACI,MApBjB;AAaCwD,UAAAA,QAbD;;AAAA,eAqBAA,QArBA;AAAA;AAAA;AAAA;;AAAA;AAsBG,iBAAMzE,QAAQ,CAACkC,QAAT,CACZ,MADY,EAEZ,2BAFY,EAGZ,UAHY,EAIZb,IAJY,EAKZkB,EALY,CAAN;;AAtBH;AAAA;;AAAA;AA+BL;AACA;AACA;AACA1B,UAAAA,KAAK,CAACE,OAAN,GAAgB;AAAA,qCAAIE,MAAJ;AAAA,gBAAYyD,sBAAZ,6BAAqC,EAArC;AAAA,mBACftE,2BAA2B,CAAEsE,sBAAF,CADZ;AAAA,WAAhB;;AAlCK;AAqCN,0CAAOpF,QAAQ,CAAEuB,KAAF,CAAf;;AArCM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwCP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS8D,oBAAT,CAA+BC,QAA/B,EAA0C;AAChD,SAAO;AACNvD,IAAAA,IAAI,EAAE,wBADA;AAENuD,IAAAA,QAAQ,EAARA;AAFM,GAAP;AAIA;AAED;AACA;AACA;;AAEA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAEC,IAAF;AAAA,+CAC5B;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACC/E,YAAAA,UAAU,CAAE,wCAAwC+E,IAAxC,GAA+C,GAAjD,EAAsD;AAC/DhD,cAAAA,WAAW,EACV,8CAA8CgD,IAA9C,GAAqD;AAFS,aAAtD,CAAV;;AADD,wCAAelC,IAAf;AAAeA,cAAAA,IAAf;AAAA;;AAAA;AAKC,mBAAM5C,QAAQ,CAACkC,QAAT,OAAAlC,QAAQ,GAAW,mBAAX,EAAgC8E,IAAhC,SAAyClC,IAAzC,EAAd;;AALD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAD4B;AAAA,CAA7B;AASA;AACA;AACA;;;AACA,OAAO,IAAMmC,WAAW,GAAGF,oBAAoB,CAAE,aAAF,CAAxC;AAEP;AACA;AACA;;AACA,OAAO,IAAMG,aAAa,GAAGH,oBAAoB,CAAE,eAAF,CAA1C;AAEP;AACA;AACA;;AACA,OAAO,IAAMI,WAAW,GAAGJ,oBAAoB,CAAE,aAAF,CAAxC;AAEP;AACA;AACA;;AACA,OAAO,IAAMK,qBAAqB,GAAGL,oBAAoB,CACxD,uBADwD,CAAlD;AAIP;AACA;AACA;;AACA,OAAO,IAAMM,WAAW,GAAGN,oBAAoB,CAAE,aAAF,CAAxC;AAEP;AACA;AACA;;AACA,OAAO,IAAMO,gBAAgB,GAAGP,oBAAoB,CAAE,kBAAF,CAA7C;AAEP;AACA;AACA;;AACA,OAAO,IAAMQ,eAAe,GAAGR,oBAAoB,CAAE,iBAAF,CAA5C;AAEP;AACA;AACA;;AACA,OAAO,IAAMS,WAAW,GAAGT,oBAAoB,CAAE,aAAF,CAAxC;AAEP;AACA;AACA;;AACA,OAAO,IAAMU,kBAAkB,GAAGV,oBAAoB,CAAE,oBAAF,CAA/C;AAEP;AACA;AACA;;AACA,OAAO,IAAMW,eAAe,GAAGX,oBAAoB,CAAE,iBAAF,CAA5C;AAEP;AACA;AACA;;AACA,OAAO,IAAMY,aAAa,GAAGZ,oBAAoB,CAAE,eAAF,CAA1C;AAEP;AACA;AACA;;AACA,OAAO,IAAMa,YAAY,GAAGb,oBAAoB,CAAE,cAAF,CAAzC;AAEP;AACA;AACA;;AACA,OAAO,IAAMc,cAAc,GAAGd,oBAAoB,CAAE,gBAAF,CAA3C;AAEP;AACA;AACA;;AACA,OAAO,IAAMe,YAAY,GAAGf,oBAAoB,CAAE,cAAF,CAAzC;AAEP;AACA;AACA;;AACA,OAAO,IAAMgB,mBAAmB,GAAGhB,oBAAoB,CACtD,qBADsD,CAAhD;AAIP;AACA;AACA;;AACA,OAAO,IAAMiB,WAAW,GAAGjB,oBAAoB,CAAE,aAAF,CAAxC;AAEP;AACA;AACA;;AACA,OAAO,IAAMkB,YAAY,GAAGlB,oBAAoB,CAAE,cAAF,CAAzC;AAEP;AACA;AACA;;AACA,OAAO,IAAMmB,kBAAkB,GAAGnB,oBAAoB,CAAE,oBAAF,CAA/C;AAEP;AACA;AACA;;AACA,OAAO,IAAMoB,kBAAkB,GAAGpB,oBAAoB,CAAE,oBAAF,CAA/C;AAEP;AACA;AACA;;AACA,OAAO,IAAMqB,mBAAmB,GAAGrB,oBAAoB,CACtD,qBADsD,CAAhD;AAIP;AACA;AACA;;AACA,OAAO,IAAMsB,mBAAmB,GAAGtB,oBAAoB,CACtD,qBADsD,CAAhD;AAIP;AACA;AACA;;AACA,OAAO,IAAMuB,WAAW,GAAGvB,oBAAoB,CAAE,aAAF,CAAxC;AAEP;AACA;AACA;;AACA,OAAO,IAAMwB,YAAY,GAAGxB,oBAAoB,CAAE,cAAF,CAAzC;AAEP;AACA;AACA;;AACA,OAAO,IAAMyB,WAAW,GAAGzB,oBAAoB,CAAE,aAAF,CAAxC;AAEP;AACA;AACA;;AACA,OAAO,IAAM0B,eAAe,GAAG1B,oBAAoB,CAAE,iBAAF,CAA5C;AAEP;AACA;AACA;;AACA,OAAO,IAAM2B,WAAW,GAAG3B,oBAAoB,CAAE,aAAF,CAAxC;AAEP;AACA;AACA;;AACA,OAAO,IAAM4B,UAAU,GAAG5B,oBAAoB,CAAE,YAAF,CAAvC;AAEP;AACA;AACA;;AACA,OAAO,IAAM6B,kBAAkB,GAAG7B,oBAAoB,CAAE,oBAAF,CAA/C;AAEP;AACA;AACA;;AACA,OAAO,IAAM8B,iBAAiB,GAAG9B,oBAAoB,CAAE,mBAAF,CAA9C;AAEP;AACA;AACA;;AACA,OAAO,IAAM+B,kBAAkB,GAAG/B,oBAAoB,CAAE,oBAAF,CAA/C;AAEP;AACA;AACA;;AACA,OAAO,IAAMgC,uBAAuB,GAAGhC,oBAAoB,CAC1D,yBAD0D,CAApD","sourcesContent":["/**\n * External dependencies\n */\nimport { has } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport deprecated from '@wordpress/deprecated';\nimport { controls } from '@wordpress/data';\nimport { apiFetch } from '@wordpress/data-controls';\nimport {\n\tparse,\n\tsynchronizeBlocksWithTemplate,\n\t__unstableSerializeAndClean,\n} from '@wordpress/blocks';\nimport { store as noticesStore } from '@wordpress/notices';\n\n/**\n * Internal dependencies\n */\nimport { STORE_NAME, TRASH_POST_NOTICE_ID } from './constants';\nimport {\n\tgetNotificationArgumentsForSaveSuccess,\n\tgetNotificationArgumentsForSaveFail,\n\tgetNotificationArgumentsForTrashFail,\n} from './utils/notice-builder';\n\n/**\n * Returns an action generator used in signalling that editor has initialized with\n * the specified post object and editor settings.\n *\n * @param {Object} post      Post object.\n * @param {Object} edits     Initial edited attributes object.\n * @param {Array?} template  Block Template.\n */\nexport function* setupEditor( post, edits, template ) {\n\t// In order to ensure maximum of a single parse during setup, edits are\n\t// included as part of editor setup action. Assume edited content as\n\t// canonical if provided, falling back to post.\n\tlet content;\n\tif ( has( edits, [ 'content' ] ) ) {\n\t\tcontent = edits.content;\n\t} else {\n\t\tcontent = post.content.raw;\n\t}\n\n\tlet blocks = parse( content );\n\n\t// Apply a template for new posts only, if exists.\n\tconst isNewPost = post.status === 'auto-draft';\n\tif ( isNewPost && template ) {\n\t\tblocks = synchronizeBlocksWithTemplate( blocks, template );\n\t}\n\n\tyield resetPost( post );\n\tyield {\n\t\ttype: 'SETUP_EDITOR',\n\t\tpost,\n\t\tedits,\n\t\ttemplate,\n\t};\n\tyield resetEditorBlocks( blocks, {\n\t\t__unstableShouldCreateUndoLevel: false,\n\t} );\n\tyield setupEditorState( post );\n\tif (\n\t\tedits &&\n\t\tObject.keys( edits ).some(\n\t\t\t( key ) =>\n\t\t\t\tedits[ key ] !==\n\t\t\t\t( has( post, [ key, 'raw' ] ) ? post[ key ].raw : post[ key ] )\n\t\t)\n\t) {\n\t\tyield editPost( edits );\n\t}\n}\n\n/**\n * Returns an action object signalling that the editor is being destroyed and\n * that any necessary state or side-effect cleanup should occur.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalTearDownEditor() {\n\treturn { type: 'TEAR_DOWN_EDITOR' };\n}\n\n/**\n * Returns an action object used in signalling that the latest version of the\n * post has been received, either by initialization or save.\n *\n * @param {Object} post Post object.\n *\n * @return {Object} Action object.\n */\nexport function resetPost( post ) {\n\treturn {\n\t\ttype: 'RESET_POST',\n\t\tpost,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the latest autosave of the\n * post has been received, by initialization or autosave.\n *\n * @deprecated since 5.6. Callers should use the `receiveAutosaves( postId, autosave )`\n * \t\t\t   selector from the '@wordpress/core-data' package.\n *\n * @param {Object} newAutosave Autosave post object.\n *\n * @return {Object} Action object.\n */\nexport function* resetAutosave( newAutosave ) {\n\tdeprecated( 'resetAutosave action (`core/editor` store)', {\n\t\talternative: 'receiveAutosaves action (`core` store)',\n\t\tplugin: 'Gutenberg',\n\t} );\n\n\tconst postId = yield controls.select( STORE_NAME, 'getCurrentPostId' );\n\tyield controls.dispatch( 'core', 'receiveAutosaves', postId, newAutosave );\n\n\treturn { type: '__INERT__' };\n}\n\n/**\n * Action for dispatching that a post update request has started.\n *\n * @param {Object} options\n *\n * @return {Object} An action object\n */\nexport function __experimentalRequestPostUpdateStart( options = {} ) {\n\treturn {\n\t\ttype: 'REQUEST_POST_UPDATE_START',\n\t\toptions,\n\t};\n}\n\n/**\n * Action for dispatching that a post update request has finished.\n *\n * @param {Object} options\n *\n * @return {Object} An action object\n */\nexport function __experimentalRequestPostUpdateFinish( options = {} ) {\n\treturn {\n\t\ttype: 'REQUEST_POST_UPDATE_FINISH',\n\t\toptions,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that a patch of updates for the\n * latest version of the post have been received.\n *\n * @return {Object} Action object.\n * @deprecated since Gutenberg 9.7.0.\n */\nexport function updatePost() {\n\tdeprecated( \"wp.data.dispatch( 'core/editor' ).updatePost\", {\n\t\talternative: 'User the core entitires store instead',\n\t} );\n\treturn {\n\t\ttype: 'DO_NOTHING',\n\t};\n}\n\n/**\n * Returns an action object used to setup the editor state when first opening\n * an editor.\n *\n * @param {Object} post   Post object.\n *\n * @return {Object} Action object.\n */\nexport function setupEditorState( post ) {\n\treturn {\n\t\ttype: 'SETUP_EDITOR_STATE',\n\t\tpost,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that attributes of the post have\n * been edited.\n *\n * @param {Object} edits   Post attributes to edit.\n * @param {Object} options Options for the edit.\n *\n * @yield {Object} Action object or control.\n */\nexport function* editPost( edits, options ) {\n\tconst { id, type } = yield controls.select( STORE_NAME, 'getCurrentPost' );\n\tyield controls.dispatch(\n\t\t'core',\n\t\t'editEntityRecord',\n\t\t'postType',\n\t\ttype,\n\t\tid,\n\t\tedits,\n\t\toptions\n\t);\n}\n\n/**\n * Action generator for saving the current post in the editor.\n *\n * @param {Object} options\n */\nexport function* savePost( options = {} ) {\n\tif ( ! ( yield controls.select( STORE_NAME, 'isEditedPostSaveable' ) ) ) {\n\t\treturn;\n\t}\n\tlet edits = {\n\t\tcontent: yield controls.select( STORE_NAME, 'getEditedPostContent' ),\n\t};\n\tif ( ! options.isAutosave ) {\n\t\tyield controls.dispatch( STORE_NAME, 'editPost', edits, {\n\t\t\tundoIgnore: true,\n\t\t} );\n\t}\n\n\tyield __experimentalRequestPostUpdateStart( options );\n\tconst previousRecord = yield controls.select(\n\t\tSTORE_NAME,\n\t\t'getCurrentPost'\n\t);\n\tedits = {\n\t\tid: previousRecord.id,\n\t\t...( yield controls.select(\n\t\t\t'core',\n\t\t\t'getEntityRecordNonTransientEdits',\n\t\t\t'postType',\n\t\t\tpreviousRecord.type,\n\t\t\tpreviousRecord.id\n\t\t) ),\n\t\t...edits,\n\t};\n\tyield controls.dispatch(\n\t\t'core',\n\t\t'saveEntityRecord',\n\t\t'postType',\n\t\tpreviousRecord.type,\n\t\tedits,\n\t\toptions\n\t);\n\tyield __experimentalRequestPostUpdateFinish( options );\n\n\tconst error = yield controls.select(\n\t\t'core',\n\t\t'getLastEntitySaveError',\n\t\t'postType',\n\t\tpreviousRecord.type,\n\t\tpreviousRecord.id\n\t);\n\tif ( error ) {\n\t\tconst args = getNotificationArgumentsForSaveFail( {\n\t\t\tpost: previousRecord,\n\t\t\tedits,\n\t\t\terror,\n\t\t} );\n\t\tif ( args.length ) {\n\t\t\tyield controls.dispatch(\n\t\t\t\tnoticesStore,\n\t\t\t\t'createErrorNotice',\n\t\t\t\t...args\n\t\t\t);\n\t\t}\n\t} else {\n\t\tconst updatedRecord = yield controls.select(\n\t\t\tSTORE_NAME,\n\t\t\t'getCurrentPost'\n\t\t);\n\t\tconst args = getNotificationArgumentsForSaveSuccess( {\n\t\t\tpreviousPost: previousRecord,\n\t\t\tpost: updatedRecord,\n\t\t\tpostType: yield controls.resolveSelect(\n\t\t\t\t'core',\n\t\t\t\t'getPostType',\n\t\t\t\tupdatedRecord.type\n\t\t\t),\n\t\t\toptions,\n\t\t} );\n\t\tif ( args.length ) {\n\t\t\tyield controls.dispatch(\n\t\t\t\tnoticesStore,\n\t\t\t\t'createSuccessNotice',\n\t\t\t\t...args\n\t\t\t);\n\t\t}\n\t\t// Make sure that any edits after saving create an undo level and are\n\t\t// considered for change detection.\n\t\tif ( ! options.isAutosave ) {\n\t\t\tyield controls.dispatch(\n\t\t\t\t'core/block-editor',\n\t\t\t\t'__unstableMarkLastChangeAsPersistent'\n\t\t\t);\n\t\t}\n\t}\n}\n\n/**\n * Action generator for handling refreshing the current post.\n */\nexport function* refreshPost() {\n\tconst post = yield controls.select( STORE_NAME, 'getCurrentPost' );\n\tconst postTypeSlug = yield controls.select(\n\t\tSTORE_NAME,\n\t\t'getCurrentPostType'\n\t);\n\tconst postType = yield controls.resolveSelect(\n\t\t'core',\n\t\t'getPostType',\n\t\tpostTypeSlug\n\t);\n\tconst newPost = yield apiFetch( {\n\t\t// Timestamp arg allows caller to bypass browser caching, which is\n\t\t// expected for this specific function.\n\t\tpath:\n\t\t\t`/wp/v2/${ postType.rest_base }/${ post.id }` +\n\t\t\t`?context=edit&_timestamp=${ Date.now() }`,\n\t} );\n\tyield controls.dispatch( STORE_NAME, 'resetPost', newPost );\n}\n\n/**\n * Action generator for trashing the current post in the editor.\n */\nexport function* trashPost() {\n\tconst postTypeSlug = yield controls.select(\n\t\tSTORE_NAME,\n\t\t'getCurrentPostType'\n\t);\n\tconst postType = yield controls.resolveSelect(\n\t\t'core',\n\t\t'getPostType',\n\t\tpostTypeSlug\n\t);\n\tyield controls.dispatch(\n\t\tnoticesStore,\n\t\t'removeNotice',\n\t\tTRASH_POST_NOTICE_ID\n\t);\n\ttry {\n\t\tconst post = yield controls.select( STORE_NAME, 'getCurrentPost' );\n\t\tyield apiFetch( {\n\t\t\tpath: `/wp/v2/${ postType.rest_base }/${ post.id }`,\n\t\t\tmethod: 'DELETE',\n\t\t} );\n\n\t\tyield controls.dispatch( STORE_NAME, 'savePost' );\n\t} catch ( error ) {\n\t\tyield controls.dispatch(\n\t\t\tnoticesStore,\n\t\t\t'createErrorNotice',\n\t\t\t...getNotificationArgumentsForTrashFail( { error } )\n\t\t);\n\t}\n}\n\n/**\n * Action generator used in signalling that the post should autosave.  This\n * includes server-side autosaving (default) and client-side (a.k.a. local)\n * autosaving (e.g. on the Web, the post might be committed to Session\n * Storage).\n *\n * @param {Object?} options Extra flags to identify the autosave.\n */\nexport function* autosave( { local = false, ...options } = {} ) {\n\tif ( local ) {\n\t\tconst post = yield controls.select( STORE_NAME, 'getCurrentPost' );\n\t\tconst isPostNew = yield controls.select(\n\t\t\tSTORE_NAME,\n\t\t\t'isEditedPostNew'\n\t\t);\n\t\tconst title = yield controls.select(\n\t\t\tSTORE_NAME,\n\t\t\t'getEditedPostAttribute',\n\t\t\t'title'\n\t\t);\n\t\tconst content = yield controls.select(\n\t\t\tSTORE_NAME,\n\t\t\t'getEditedPostAttribute',\n\t\t\t'content'\n\t\t);\n\t\tconst excerpt = yield controls.select(\n\t\t\tSTORE_NAME,\n\t\t\t'getEditedPostAttribute',\n\t\t\t'excerpt'\n\t\t);\n\t\tyield {\n\t\t\ttype: 'LOCAL_AUTOSAVE_SET',\n\t\t\tpostId: post.id,\n\t\t\tisPostNew,\n\t\t\ttitle,\n\t\t\tcontent,\n\t\t\texcerpt,\n\t\t};\n\t} else {\n\t\tyield controls.dispatch( STORE_NAME, 'savePost', {\n\t\t\tisAutosave: true,\n\t\t\t...options,\n\t\t} );\n\t}\n}\n\n/**\n * Returns an action object used in signalling that undo history should\n * restore last popped state.\n *\n * @yield {Object} Action object.\n */\nexport function* redo() {\n\tyield controls.dispatch( 'core', 'redo' );\n}\n\n/**\n * Returns an action object used in signalling that undo history should pop.\n *\n * @yield {Object} Action object.\n */\nexport function* undo() {\n\tyield controls.dispatch( 'core', 'undo' );\n}\n\n/**\n * Returns an action object used in signalling that undo history record should\n * be created.\n *\n * @return {Object} Action object.\n */\nexport function createUndoLevel() {\n\treturn { type: 'CREATE_UNDO_LEVEL' };\n}\n\n/**\n * Returns an action object used to lock the editor.\n *\n * @param {Object}  lock Details about the post lock status, user, and nonce.\n *\n * @return {Object} Action object.\n */\nexport function updatePostLock( lock ) {\n\treturn {\n\t\ttype: 'UPDATE_POST_LOCK',\n\t\tlock,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user has enabled the\n * publish sidebar.\n *\n * @return {Object} Action object\n */\nexport function enablePublishSidebar() {\n\treturn {\n\t\ttype: 'ENABLE_PUBLISH_SIDEBAR',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user has disabled the\n * publish sidebar.\n *\n * @return {Object} Action object\n */\nexport function disablePublishSidebar() {\n\treturn {\n\t\ttype: 'DISABLE_PUBLISH_SIDEBAR',\n\t};\n}\n\n/**\n * Returns an action object used to signal that post saving is locked.\n *\n * @param  {string} lockName The lock name.\n *\n * @example\n * ```\n * const { subscribe } = wp.data;\n *\n * const initialPostStatus = wp.data.select( 'core/editor' ).getEditedPostAttribute( 'status' );\n *\n * // Only allow publishing posts that are set to a future date.\n * if ( 'publish' !== initialPostStatus ) {\n *\n * \t// Track locking.\n * \tlet locked = false;\n *\n * \t// Watch for the publish event.\n * \tlet unssubscribe = subscribe( () => {\n * \t\tconst currentPostStatus = wp.data.select( 'core/editor' ).getEditedPostAttribute( 'status' );\n * \t\tif ( 'publish' !== currentPostStatus ) {\n *\n * \t\t\t// Compare the post date to the current date, lock the post if the date isn't in the future.\n * \t\t\tconst postDate = new Date( wp.data.select( 'core/editor' ).getEditedPostAttribute( 'date' ) );\n * \t\t\tconst currentDate = new Date();\n * \t\t\tif ( postDate.getTime() <= currentDate.getTime() ) {\n * \t\t\t\tif ( ! locked ) {\n * \t\t\t\t\tlocked = true;\n * \t\t\t\t\twp.data.dispatch( 'core/editor' ).lockPostSaving( 'futurelock' );\n * \t\t\t\t}\n * \t\t\t} else {\n * \t\t\t\tif ( locked ) {\n * \t\t\t\t\tlocked = false;\n * \t\t\t\t\twp.data.dispatch( 'core/editor' ).unlockPostSaving( 'futurelock' );\n * \t\t\t\t}\n * \t\t\t}\n * \t\t}\n * \t} );\n * }\n * ```\n *\n * @return {Object} Action object\n */\nexport function lockPostSaving( lockName ) {\n\treturn {\n\t\ttype: 'LOCK_POST_SAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Returns an action object used to signal that post saving is unlocked.\n *\n * @param  {string} lockName The lock name.\n *\n * @example\n * ```\n * // Unlock post saving with the lock key `mylock`:\n * wp.data.dispatch( 'core/editor' ).unlockPostSaving( 'mylock' );\n * ```\n *\n * @return {Object} Action object\n */\nexport function unlockPostSaving( lockName ) {\n\treturn {\n\t\ttype: 'UNLOCK_POST_SAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Returns an action object used to signal that post autosaving is locked.\n *\n * @param  {string} lockName The lock name.\n *\n * @example\n * ```\n * // Lock post autosaving with the lock key `mylock`:\n * wp.data.dispatch( 'core/editor' ).lockPostAutosaving( 'mylock' );\n * ```\n *\n * @return {Object} Action object\n */\nexport function lockPostAutosaving( lockName ) {\n\treturn {\n\t\ttype: 'LOCK_POST_AUTOSAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Returns an action object used to signal that post autosaving is unlocked.\n *\n * @param  {string} lockName The lock name.\n *\n * @example\n * ```\n * // Unlock post saving with the lock key `mylock`:\n * wp.data.dispatch( 'core/editor' ).unlockPostAutosaving( 'mylock' );\n * ```\n *\n * @return {Object} Action object\n */\nexport function unlockPostAutosaving( lockName ) {\n\treturn {\n\t\ttype: 'UNLOCK_POST_AUTOSAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Returns an action object used to signal that the blocks have been updated.\n *\n * @param {Array}   blocks  Block Array.\n * @param {?Object} options Optional options.\n *\n * @yield {Object} Action object\n */\nexport function* resetEditorBlocks( blocks, options = {} ) {\n\tconst {\n\t\t__unstableShouldCreateUndoLevel,\n\t\tselectionStart,\n\t\tselectionEnd,\n\t} = options;\n\tconst edits = { blocks, selectionStart, selectionEnd };\n\n\tif ( __unstableShouldCreateUndoLevel !== false ) {\n\t\tconst { id, type } = yield controls.select(\n\t\t\tSTORE_NAME,\n\t\t\t'getCurrentPost'\n\t\t);\n\t\tconst noChange =\n\t\t\t( yield controls.select(\n\t\t\t\t'core',\n\t\t\t\t'getEditedEntityRecord',\n\t\t\t\t'postType',\n\t\t\t\ttype,\n\t\t\t\tid\n\t\t\t) ).blocks === edits.blocks;\n\t\tif ( noChange ) {\n\t\t\treturn yield controls.dispatch(\n\t\t\t\t'core',\n\t\t\t\t'__unstableCreateUndoLevel',\n\t\t\t\t'postType',\n\t\t\t\ttype,\n\t\t\t\tid\n\t\t\t);\n\t\t}\n\n\t\t// We create a new function here on every persistent edit\n\t\t// to make sure the edit makes the post dirty and creates\n\t\t// a new undo level.\n\t\tedits.content = ( { blocks: blocksForSerialization = [] } ) =>\n\t\t\t__unstableSerializeAndClean( blocksForSerialization );\n\t}\n\tyield* editPost( edits );\n}\n\n/*\n * Returns an action object used in signalling that the post editor settings have been updated.\n *\n * @param {Object} settings Updated settings\n *\n * @return {Object} Action object\n */\nexport function updateEditorSettings( settings ) {\n\treturn {\n\t\ttype: 'UPDATE_EDITOR_SETTINGS',\n\t\tsettings,\n\t};\n}\n\n/**\n * Backward compatibility\n */\n\nconst getBlockEditorAction = ( name ) =>\n\tfunction* ( ...args ) {\n\t\tdeprecated( \"`wp.data.dispatch( 'core/editor' ).\" + name + '`', {\n\t\t\talternative:\n\t\t\t\t\"`wp.data.dispatch( 'core/block-editor' ).\" + name + '`',\n\t\t} );\n\t\tyield controls.dispatch( 'core/block-editor', name, ...args );\n\t};\n\n/**\n * @see resetBlocks in core/block-editor store.\n */\nexport const resetBlocks = getBlockEditorAction( 'resetBlocks' );\n\n/**\n * @see receiveBlocks in core/block-editor store.\n */\nexport const receiveBlocks = getBlockEditorAction( 'receiveBlocks' );\n\n/**\n * @see updateBlock in core/block-editor store.\n */\nexport const updateBlock = getBlockEditorAction( 'updateBlock' );\n\n/**\n * @see updateBlockAttributes in core/block-editor store.\n */\nexport const updateBlockAttributes = getBlockEditorAction(\n\t'updateBlockAttributes'\n);\n\n/**\n * @see selectBlock in core/block-editor store.\n */\nexport const selectBlock = getBlockEditorAction( 'selectBlock' );\n\n/**\n * @see startMultiSelect in core/block-editor store.\n */\nexport const startMultiSelect = getBlockEditorAction( 'startMultiSelect' );\n\n/**\n * @see stopMultiSelect in core/block-editor store.\n */\nexport const stopMultiSelect = getBlockEditorAction( 'stopMultiSelect' );\n\n/**\n * @see multiSelect in core/block-editor store.\n */\nexport const multiSelect = getBlockEditorAction( 'multiSelect' );\n\n/**\n * @see clearSelectedBlock in core/block-editor store.\n */\nexport const clearSelectedBlock = getBlockEditorAction( 'clearSelectedBlock' );\n\n/**\n * @see toggleSelection in core/block-editor store.\n */\nexport const toggleSelection = getBlockEditorAction( 'toggleSelection' );\n\n/**\n * @see replaceBlocks in core/block-editor store.\n */\nexport const replaceBlocks = getBlockEditorAction( 'replaceBlocks' );\n\n/**\n * @see replaceBlock in core/block-editor store.\n */\nexport const replaceBlock = getBlockEditorAction( 'replaceBlock' );\n\n/**\n * @see moveBlocksDown in core/block-editor store.\n */\nexport const moveBlocksDown = getBlockEditorAction( 'moveBlocksDown' );\n\n/**\n * @see moveBlocksUp in core/block-editor store.\n */\nexport const moveBlocksUp = getBlockEditorAction( 'moveBlocksUp' );\n\n/**\n * @see moveBlockToPosition in core/block-editor store.\n */\nexport const moveBlockToPosition = getBlockEditorAction(\n\t'moveBlockToPosition'\n);\n\n/**\n * @see insertBlock in core/block-editor store.\n */\nexport const insertBlock = getBlockEditorAction( 'insertBlock' );\n\n/**\n * @see insertBlocks in core/block-editor store.\n */\nexport const insertBlocks = getBlockEditorAction( 'insertBlocks' );\n\n/**\n * @see showInsertionPoint in core/block-editor store.\n */\nexport const showInsertionPoint = getBlockEditorAction( 'showInsertionPoint' );\n\n/**\n * @see hideInsertionPoint in core/block-editor store.\n */\nexport const hideInsertionPoint = getBlockEditorAction( 'hideInsertionPoint' );\n\n/**\n * @see setTemplateValidity in core/block-editor store.\n */\nexport const setTemplateValidity = getBlockEditorAction(\n\t'setTemplateValidity'\n);\n\n/**\n * @see synchronizeTemplate in core/block-editor store.\n */\nexport const synchronizeTemplate = getBlockEditorAction(\n\t'synchronizeTemplate'\n);\n\n/**\n * @see mergeBlocks in core/block-editor store.\n */\nexport const mergeBlocks = getBlockEditorAction( 'mergeBlocks' );\n\n/**\n * @see removeBlocks in core/block-editor store.\n */\nexport const removeBlocks = getBlockEditorAction( 'removeBlocks' );\n\n/**\n * @see removeBlock in core/block-editor store.\n */\nexport const removeBlock = getBlockEditorAction( 'removeBlock' );\n\n/**\n * @see toggleBlockMode in core/block-editor store.\n */\nexport const toggleBlockMode = getBlockEditorAction( 'toggleBlockMode' );\n\n/**\n * @see startTyping in core/block-editor store.\n */\nexport const startTyping = getBlockEditorAction( 'startTyping' );\n\n/**\n * @see stopTyping in core/block-editor store.\n */\nexport const stopTyping = getBlockEditorAction( 'stopTyping' );\n\n/**\n * @see enterFormattedText in core/block-editor store.\n */\nexport const enterFormattedText = getBlockEditorAction( 'enterFormattedText' );\n\n/**\n * @see exitFormattedText in core/block-editor store.\n */\nexport const exitFormattedText = getBlockEditorAction( 'exitFormattedText' );\n\n/**\n * @see insertDefaultBlock in core/block-editor store.\n */\nexport const insertDefaultBlock = getBlockEditorAction( 'insertDefaultBlock' );\n\n/**\n * @see updateBlockListSettings in core/block-editor store.\n */\nexport const updateBlockListSettings = getBlockEditorAction(\n\t'updateBlockListSettings'\n);\n"]}