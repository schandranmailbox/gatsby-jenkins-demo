"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PostTitle;

var _element = require("@wordpress/element");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _reactAutosizeTextarea = _interopRequireDefault(require("react-autosize-textarea"));

var _classnames = _interopRequireDefault(require("classnames"));

var _i18n = require("@wordpress/i18n");

var _htmlEntities = require("@wordpress/html-entities");

var _keycodes = require("@wordpress/keycodes");

var _data = require("@wordpress/data");

var _components = require("@wordpress/components");

var _compose = require("@wordpress/compose");

var _blocks = require("@wordpress/blocks");

var _postTypeSupportCheck = _interopRequireDefault(require("../post-type-support-check"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * Constants
 */
var REGEXP_NEWLINES = /[\r\n]+/g;

function PostTitle() {
  var instanceId = (0, _compose.useInstanceId)(PostTitle);
  var ref = (0, _element.useRef)();

  var _useState = (0, _element.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isSelected = _useState2[0],
      setIsSelected = _useState2[1];

  var _useDispatch = (0, _data.useDispatch)('core/editor'),
      editPost = _useDispatch.editPost;

  var _useDispatch2 = (0, _data.useDispatch)('core/block-editor'),
      insertDefaultBlock = _useDispatch2.insertDefaultBlock,
      clearSelectedBlock = _useDispatch2.clearSelectedBlock,
      insertBlocks = _useDispatch2.insertBlocks;

  var _useSelect = (0, _data.useSelect)(function (select) {
    var _select = select('core/editor'),
        getEditedPostAttribute = _select.getEditedPostAttribute,
        _isCleanNewPost = _select.isCleanNewPost;

    var _select2 = select('core/block-editor'),
        getSettings = _select2.getSettings;

    var _getSettings = getSettings(),
        titlePlaceholder = _getSettings.titlePlaceholder,
        focusMode = _getSettings.focusMode,
        _hasFixedToolbar = _getSettings.hasFixedToolbar;

    return {
      isCleanNewPost: _isCleanNewPost(),
      title: getEditedPostAttribute('title'),
      placeholder: titlePlaceholder,
      isFocusMode: focusMode,
      hasFixedToolbar: _hasFixedToolbar
    };
  }),
      isCleanNewPost = _useSelect.isCleanNewPost,
      title = _useSelect.title,
      placeholder = _useSelect.placeholder,
      isFocusMode = _useSelect.isFocusMode,
      hasFixedToolbar = _useSelect.hasFixedToolbar;

  (0, _element.useEffect)(function () {
    var ownerDocument = ref.current.ownerDocument;
    var activeElement = ownerDocument.activeElement,
        body = ownerDocument.body; // Only autofocus the title when the post is entirely empty. This should
    // only happen for a new post, which means we focus the title on new
    // post so the author can start typing right away, without needing to
    // click anything.

    if (isCleanNewPost && (!activeElement || body === activeElement)) {
      ref.current.focus();
    }
  }, [isCleanNewPost]);

  function onEnterPress() {
    insertDefaultBlock(undefined, undefined, 0);
  }

  function onInsertBlockAfter(blocks) {
    insertBlocks(blocks, 0);
  }

  function onUpdate(newTitle) {
    editPost({
      title: newTitle
    });
  }

  function onSelect() {
    setIsSelected(true);
    clearSelectedBlock();
  }

  function onUnselect() {
    setIsSelected(false);
  }

  function onChange(event) {
    onUpdate(event.target.value.replace(REGEXP_NEWLINES, ' '));
  }

  function onKeyDown(event) {
    if (event.keyCode === _keycodes.ENTER) {
      event.preventDefault();
      onEnterPress();
    }
  }

  function onPaste(event) {
    var clipboardData = event.clipboardData;
    var plainText = '';
    var html = ''; // IE11 only supports `Text` as an argument for `getData` and will
    // otherwise throw an invalid argument error, so we try the standard
    // arguments first, then fallback to `Text` if they fail.

    try {
      plainText = clipboardData.getData('text/plain');
      html = clipboardData.getData('text/html');
    } catch (error1) {
      try {
        html = clipboardData.getData('Text');
      } catch (error2) {
        // Some browsers like UC Browser paste plain text by default and
        // don't support clipboardData at all, so allow default
        // behaviour.
        return;
      }
    } // Allows us to ask for this information when we get a report.


    window.console.log('Received HTML:\n\n', html);
    window.console.log('Received plain text:\n\n', plainText);
    var content = (0, _blocks.pasteHandler)({
      HTML: html,
      plainText: plainText
    });

    if (typeof content !== 'string' && content.length) {
      event.preventDefault();

      var _content = (0, _slicedToArray2.default)(content, 1),
          firstBlock = _content[0];

      if (!title && (firstBlock.name === 'core/heading' || firstBlock.name === 'core/paragraph')) {
        onUpdate(firstBlock.attributes.content);
        onInsertBlockAfter(content.slice(1));
      } else {
        onInsertBlockAfter(content);
      }
    }
  } // The wp-block className is important for editor styles.
  // This same block is used in both the visual and the code editor.


  var className = (0, _classnames.default)('wp-block editor-post-title editor-post-title__block', {
    'is-selected': isSelected,
    'is-focus-mode': isFocusMode,
    'has-fixed-toolbar': hasFixedToolbar
  });
  var decodedPlaceholder = (0, _htmlEntities.decodeEntities)(placeholder);
  return (0, _element.createElement)(_postTypeSupportCheck.default, {
    supportKeys: "title"
  }, (0, _element.createElement)("div", {
    className: className
  }, (0, _element.createElement)(_components.VisuallyHidden, {
    as: "label",
    htmlFor: "post-title-".concat(instanceId)
  }, decodedPlaceholder || (0, _i18n.__)('Add title')), (0, _element.createElement)(_reactAutosizeTextarea.default, {
    ref: ref,
    id: "post-title-".concat(instanceId),
    className: "editor-post-title__input",
    value: title,
    onChange: onChange,
    placeholder: decodedPlaceholder || (0, _i18n.__)('Add title'),
    onFocus: onSelect,
    onBlur: onUnselect,
    onKeyDown: onKeyDown,
    onKeyPress: onUnselect,
    onPaste: onPaste
  })));
}
//# sourceMappingURL=index.js.map