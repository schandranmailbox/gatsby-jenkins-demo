{"version":3,"sources":["@wordpress/editor/src/components/post-saved-state/index.js"],"names":["PostSavedState","forceIsDirty","forceIsSaving","showIconLabels","forceSavedMessage","setForceSavedMessage","isLargeViewport","select","isEditedPostNew","isCurrentPostPublished","isCurrentPostScheduled","isEditedPostDirty","isSavingPost","isEditedPostSaveable","getCurrentPost","isAutosavingPost","getEditedPostAttribute","isAutosaving","isDirty","isNew","isPending","isPublished","isSaving","isSaveable","isScheduled","hasPublishAction","_links","savePost","wasSaving","timeoutId","setTimeout","clearTimeout","classes","type","cloud","check","label","shortLabel","displayShortcut","primary","cloudUpload"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport {\n\t__unstableGetAnimateClassName as getAnimateClassName,\n\tButton,\n} from '@wordpress/components';\nimport { usePrevious, useViewportMatch } from '@wordpress/compose';\nimport { useDispatch, useSelect } from '@wordpress/data';\nimport { useEffect, useState } from '@wordpress/element';\nimport { __ } from '@wordpress/i18n';\nimport { Icon, check, cloud, cloudUpload } from '@wordpress/icons';\nimport { displayShortcut } from '@wordpress/keycodes';\n\n/**\n * Internal dependencies\n */\nimport PostSwitchToDraftButton from '../post-switch-to-draft-button';\n\n/**\n * Component showing whether the post is saved or not and providing save\n * buttons.\n *\n * @param {Object} props               Component props.\n * @param {?boolean} props.forceIsDirty  Whether to force the post to be marked\n * as dirty.\n * @param {?boolean} props.forceIsSaving Whether to force the post to be marked\n * as being saved.\n * @param {?boolean} props.showIconLabels Whether interface buttons show labels instead of icons\n * @return {import('@wordpress/element').WPComponent} The component.\n */\nexport default function PostSavedState( {\n\tforceIsDirty,\n\tforceIsSaving,\n\tshowIconLabels = false,\n} ) {\n\tconst [ forceSavedMessage, setForceSavedMessage ] = useState( false );\n\tconst isLargeViewport = useViewportMatch( 'small' );\n\n\tconst {\n\t\tisAutosaving,\n\t\tisDirty,\n\t\tisNew,\n\t\tisPending,\n\t\tisPublished,\n\t\tisSaveable,\n\t\tisSaving,\n\t\tisScheduled,\n\t\thasPublishAction,\n\t} = useSelect(\n\t\t( select ) => {\n\t\t\tconst {\n\t\t\t\tisEditedPostNew,\n\t\t\t\tisCurrentPostPublished,\n\t\t\t\tisCurrentPostScheduled,\n\t\t\t\tisEditedPostDirty,\n\t\t\t\tisSavingPost,\n\t\t\t\tisEditedPostSaveable,\n\t\t\t\tgetCurrentPost,\n\t\t\t\tisAutosavingPost,\n\t\t\t\tgetEditedPostAttribute,\n\t\t\t} = select( 'core/editor' );\n\n\t\t\treturn {\n\t\t\t\tisAutosaving: isAutosavingPost(),\n\t\t\t\tisDirty: forceIsDirty || isEditedPostDirty(),\n\t\t\t\tisNew: isEditedPostNew(),\n\t\t\t\tisPending: 'pending' === getEditedPostAttribute( 'status' ),\n\t\t\t\tisPublished: isCurrentPostPublished(),\n\t\t\t\tisSaving: forceIsSaving || isSavingPost(),\n\t\t\t\tisSaveable: isEditedPostSaveable(),\n\t\t\t\tisScheduled: isCurrentPostScheduled(),\n\t\t\t\thasPublishAction:\n\t\t\t\t\tgetCurrentPost()?._links?.[ 'wp:action-publish' ] ?? false,\n\t\t\t};\n\t\t},\n\t\t[ forceIsDirty, forceIsSaving ]\n\t);\n\n\tconst { savePost } = useDispatch( 'core/editor' );\n\n\tconst wasSaving = usePrevious( isSaving );\n\n\tuseEffect( () => {\n\t\tlet timeoutId;\n\n\t\tif ( wasSaving && ! isSaving ) {\n\t\t\tsetForceSavedMessage( true );\n\t\t\ttimeoutId = setTimeout( () => {\n\t\t\t\tsetForceSavedMessage( false );\n\t\t\t}, 1000 );\n\t\t}\n\n\t\treturn () => clearTimeout( timeoutId );\n\t}, [ isSaving ] );\n\n\tif ( isSaving ) {\n\t\t// TODO: Classes generation should be common across all return\n\t\t// paths of this function, including proper naming convention for\n\t\t// the \"Save Draft\" button.\n\t\tconst classes = classnames(\n\t\t\t'editor-post-saved-state',\n\t\t\t'is-saving',\n\t\t\tgetAnimateClassName( { type: 'loading' } ),\n\t\t\t{\n\t\t\t\t'is-autosaving': isAutosaving,\n\t\t\t}\n\t\t);\n\n\t\treturn (\n\t\t\t<span className={ classes }>\n\t\t\t\t<Icon icon={ cloud } />\n\t\t\t\t{ isAutosaving ? __( 'Autosaving' ) : __( 'Saving' ) }\n\t\t\t</span>\n\t\t);\n\t}\n\n\tif ( isPublished || isScheduled ) {\n\t\treturn <PostSwitchToDraftButton />;\n\t}\n\n\tif ( ! isSaveable ) {\n\t\treturn null;\n\t}\n\n\tif ( forceSavedMessage || ( ! isNew && ! isDirty ) ) {\n\t\treturn (\n\t\t\t<span className=\"editor-post-saved-state is-saved\">\n\t\t\t\t<Icon icon={ check } />\n\t\t\t\t{ __( 'Saved' ) }\n\t\t\t</span>\n\t\t);\n\t}\n\n\t// Once the post has been submitted for review this button\n\t// is not needed for the contributor role.\n\n\tif ( ! hasPublishAction && isPending ) {\n\t\treturn null;\n\t}\n\n\t/* translators: button label text should, if possible, be under 16 characters. */\n\tconst label = isPending ? __( 'Save as pending' ) : __( 'Save draft' );\n\n\t/* translators: button label text should, if possible, be under 16 characters. */\n\tconst shortLabel = __( 'Save' );\n\n\tif ( ! isLargeViewport ) {\n\t\treturn (\n\t\t\t<Button\n\t\t\t\tclassName=\"editor-post-save-draft\"\n\t\t\t\tlabel={ label }\n\t\t\t\tonClick={ () => savePost() }\n\t\t\t\tshortcut={ displayShortcut.primary( 's' ) }\n\t\t\t\ticon={ cloudUpload }\n\t\t\t>\n\t\t\t\t{ showIconLabels && shortLabel }\n\t\t\t</Button>\n\t\t);\n\t}\n\n\treturn (\n\t\t<Button\n\t\t\tclassName=\"editor-post-save-draft\"\n\t\t\tonClick={ () => savePost() }\n\t\t\tshortcut={ displayShortcut.primary( 's' ) }\n\t\t\tisTertiary\n\t\t>\n\t\t\t{ label }\n\t\t</Button>\n\t);\n}\n"]}