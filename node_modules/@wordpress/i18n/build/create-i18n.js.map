{"version":3,"sources":["@wordpress/i18n/src/create-i18n.js"],"names":["DEFAULT_LOCALE_DATA","plural_forms","n","createI18n","initialData","initialDomain","hooks","tannin","Tannin","setLocaleData","data","domain","dcnpgettext","context","single","plural","number","undefined","getFilterDomain","__","text","translation","applyFilters","_x","_n","_nx","isRTL"],"mappings":";;;;;;;;;;;AAGA;;;;;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMA,mBAAmB,GAAG;AAC3B,MAAI;AACH;AACAC,IAAAA,YAFG,wBAEWC,CAFX,EAEe;AACjB,aAAOA,CAAC,KAAK,CAAN,GAAU,CAAV,GAAc,CAArB;AACA;AAJE;AADuB,CAA5B;AASA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAEC,WAAF,EAAeC,aAAf,EAA8BC,KAA9B,EAAyC;AAClE;AACD;AACA;AACA;AACA;AACC,MAAMC,MAAM,GAAG,IAAIC,eAAJ,CAAY,EAAZ,CAAf;AAEA;;AACA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAEC,IAAF,EAAgC;AAAA,QAAxBC,MAAwB,uEAAf,SAAe;AACrDJ,IAAAA,MAAM,CAACG,IAAP,CAAaC,MAAb,kDACIX,mBADJ,GAEIO,MAAM,CAACG,IAAP,CAAaC,MAAb,CAFJ,GAGID,IAHJ,EADqD,CAOrD;AACA;;AACAH,IAAAA,MAAM,CAACG,IAAP,CAAaC,MAAb,EAAuB,EAAvB,oCACIX,mBAAmB,CAAE,EAAF,CADvB,GAEIO,MAAM,CAACG,IAAP,CAAaC,MAAb,EAAuB,EAAvB,CAFJ;AAIA,GAbD;AAeA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACC,MAAMC,WAAW,GA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","sourcesContent":["/**\n * External dependencies\n */\nimport Tannin from 'tannin';\n\n/**\n * @typedef {Record<string,any>} LocaleData\n */\n\n/**\n * Default locale data to use for Tannin domain when not otherwise provided.\n * Assumes an English plural forms expression.\n *\n * @type {LocaleData}\n */\nconst DEFAULT_LOCALE_DATA = {\n\t'': {\n\t\t/** @param {number} n */\n\t\tplural_forms( n ) {\n\t\t\treturn n === 1 ? 0 : 1;\n\t\t},\n\t},\n};\n\n/* eslint-disable jsdoc/valid-types */\n/**\n * @typedef {(data?: LocaleData, domain?: string) => void} SetLocaleData\n * Merges locale data into the Tannin instance by domain. Accepts data in a\n * Jed-formatted JSON object shape.\n *\n * @see http://messageformat.github.io/Jed/\n */\n/**\n * @typedef {(domain?: string) => string} GetFilterDomain\n * Retrieve the domain to use when calling domain-specific filters.\n */\n/**\n * @typedef {(text: string, domain?: string) => string} __\n *\n * Retrieve the translation of text.\n *\n * @see https://developer.wordpress.org/reference/functions/__/\n */\n/**\n * @typedef {(text: string, context: string, domain?: string) => string} _x\n *\n * Retrieve translated string with gettext context.\n *\n * @see https://developer.wordpress.org/reference/functions/_x/\n */\n/**\n * @typedef {(single: string, plural: string, number: number, domain?: string) => string} _n\n *\n * Translates and retrieves the singular or plural form based on the supplied\n * number.\n *\n * @see https://developer.wordpress.org/reference/functions/_n/\n */\n/**\n * @typedef {(single: string, plural: string, number: number, context: string, domain?: string) => string} _nx\n *\n * Translates and retrieves the singular or plural form based on the supplied\n * number, with gettext context.\n *\n * @see https://developer.wordpress.org/reference/functions/_nx/\n */\n/**\n * @typedef {() => boolean} IsRtl\n *\n * Check if current locale is RTL.\n *\n * **RTL (Right To Left)** is a locale property indicating that text is written from right to left.\n * For example, the `he` locale (for Hebrew) specifies right-to-left. Arabic (ar) is another common\n * language written RTL. The opposite of RTL, LTR (Left To Right) is used in other languages,\n * including English (`en`, `en-US`, `en-GB`, etc.), Spanish (`es`), and French (`fr`).\n */\n/**\n * @typedef {{ applyFilters: (hookName:string, ...args: unknown[]) => unknown}} ApplyFiltersInterface\n */\n/* eslint-enable jsdoc/valid-types */\n\n/**\n * An i18n instance\n *\n * @typedef I18n\n * @property {SetLocaleData} setLocaleData Merges locale data into the Tannin instance by domain. Accepts data in a\n *                                         Jed-formatted JSON object shape.\n * @property {__} __                       Retrieve the translation of text.\n * @property {_x} _x                       Retrieve translated string with gettext context.\n * @property {_n} _n                       Translates and retrieves the singular or plural form based on the supplied\n *                                         number.\n * @property {_nx} _nx                     Translates and retrieves the singular or plural form based on the supplied\n *                                         number, with gettext context.\n * @property {IsRtl} isRTL                 Check if current locale is RTL.\n */\n\n/**\n * Create an i18n instance\n *\n * @param {LocaleData} [initialData]    Locale data configuration.\n * @param {string}     [initialDomain]  Domain for which configuration applies.\n * @param {ApplyFiltersInterface} [hooks]     Hooks implementation.\n * @return {I18n}                       I18n instance\n */\nexport const createI18n = ( initialData, initialDomain, hooks ) => {\n\t/**\n\t * The underlying instance of Tannin to which exported functions interface.\n\t *\n\t * @type {Tannin}\n\t */\n\tconst tannin = new Tannin( {} );\n\n\t/** @type {SetLocaleData} */\n\tconst setLocaleData = ( data, domain = 'default' ) => {\n\t\ttannin.data[ domain ] = {\n\t\t\t...DEFAULT_LOCALE_DATA,\n\t\t\t...tannin.data[ domain ],\n\t\t\t...data,\n\t\t};\n\n\t\t// Populate default domain configuration (supported locale date which omits\n\t\t// a plural forms expression).\n\t\ttannin.data[ domain ][ '' ] = {\n\t\t\t...DEFAULT_LOCALE_DATA[ '' ],\n\t\t\t...tannin.data[ domain ][ '' ],\n\t\t};\n\t};\n\n\t/**\n\t * Wrapper for Tannin's `dcnpgettext`. Populates default locale data if not\n\t * otherwise previously assigned.\n\t *\n\t * @param {string|undefined} domain   Domain to retrieve the translated text.\n\t * @param {string|undefined} context  Context information for the translators.\n\t * @param {string}           single   Text to translate if non-plural. Used as\n\t *                                    fallback return value on a caught error.\n\t * @param {string}           [plural] The text to be used if the number is\n\t *                                    plural.\n\t * @param {number}           [number] The number to compare against to use\n\t *                                    either the singular or plural form.\n\t *\n\t * @return {string} The translated string.\n\t */\n\tconst dcnpgettext = (\n\t\tdomain = 'default',\n\t\tcontext,\n\t\tsingle,\n\t\tplural,\n\t\tnumber\n\t) => {\n\t\tif ( ! tannin.data[ domain ] ) {\n\t\t\tsetLocaleData( undefined, domain );\n\t\t}\n\n\t\treturn tannin.dcnpgettext( domain, context, single, plural, number );\n\t};\n\n\t/** @type {GetFilterDomain} */\n\tconst getFilterDomain = ( domain ) => {\n\t\tif ( typeof domain === 'undefined' ) {\n\t\t\treturn 'default';\n\t\t}\n\t\treturn domain;\n\t};\n\n\t/** @type {__} */\n\tconst __ = ( text, domain ) => {\n\t\tlet translation = dcnpgettext( domain, undefined, text );\n\t\t/**\n\t\t * Filters text with its translation.\n\t\t *\n\t\t * @param {string} translation Translated text.\n\t\t * @param {string} text        Text to translate.\n\t\t * @param {string} domain      Text domain. Unique identifier for retrieving translated strings.\n\t\t */\n\t\tif ( typeof hooks === 'undefined' ) {\n\t\t\treturn translation;\n\t\t}\n\t\ttranslation = /** @type {string} */ (\n\t\t\t/** @type {*} */ hooks.applyFilters(\n\t\t\t\t'i18n.gettext',\n\t\t\t\ttranslation,\n\t\t\t\ttext,\n\t\t\t\tdomain\n\t\t\t)\n\t\t);\n\t\treturn /** @type {string} */ (\n\t\t\t/** @type {*} */ hooks.applyFilters(\n\t\t\t\t'i18n.gettext_' + getFilterDomain( domain ),\n\t\t\t\ttranslation,\n\t\t\t\ttext,\n\t\t\t\tdomain\n\t\t\t)\n\t\t);\n\t};\n\n\t/** @type {_x} */\n\tconst _x = ( text, context, domain ) => {\n\t\tlet translation = dcnpgettext( domain, context, text );\n\t\t/**\n\t\t * Filters text with its translation based on context information.\n\t\t *\n\t\t * @param {string} translation Translated text.\n\t\t * @param {string} text        Text to translate.\n\t\t * @param {string} context     Context information for the translators.\n\t\t * @param {string} domain      Text domain. Unique identifier for retrieving translated strings.\n\t\t */\n\t\tif ( typeof hooks === 'undefined' ) {\n\t\t\treturn translation;\n\t\t}\n\t\ttranslation = /** @type {string} */ (\n\t\t\t/** @type {*} */ hooks.applyFilters(\n\t\t\t\t'i18n.gettext_with_context',\n\t\t\t\ttranslation,\n\t\t\t\ttext,\n\t\t\t\tcontext,\n\t\t\t\tdomain\n\t\t\t)\n\t\t);\n\t\treturn /** @type {string} */ (\n\t\t\t/** @type {*} */ hooks.applyFilters(\n\t\t\t\t'i18n.gettext_with_context_' + getFilterDomain( domain ),\n\t\t\t\ttranslation,\n\t\t\t\ttext,\n\t\t\t\tcontext,\n\t\t\t\tdomain\n\t\t\t)\n\t\t);\n\t};\n\n\t/** @type {_n} */\n\tconst _n = ( single, plural, number, domain ) => {\n\t\tlet translation = dcnpgettext(\n\t\t\tdomain,\n\t\t\tundefined,\n\t\t\tsingle,\n\t\t\tplural,\n\t\t\tnumber\n\t\t);\n\t\tif ( typeof hooks === 'undefined' ) {\n\t\t\treturn translation;\n\t\t}\n\t\t/**\n\t\t * Filters the singular or plural form of a string.\n\t\t *\n\t\t * @param {string} translation Translated text.\n\t\t * @param {string} single      The text to be used if the number is singular.\n\t\t * @param {string} plural      The text to be used if the number is plural.\n\t\t * @param {string} number      The number to compare against to use either the singular or plural form.\n\t\t * @param {string} domain      Text domain. Unique identifier for retrieving translated strings.\n\t\t */\n\t\ttranslation = /** @type {string} */ (\n\t\t\t/** @type {*} */ hooks.applyFilters(\n\t\t\t\t'i18n.ngettext',\n\t\t\t\ttranslation,\n\t\t\t\tsingle,\n\t\t\t\tplural,\n\t\t\t\tnumber,\n\t\t\t\tdomain\n\t\t\t)\n\t\t);\n\t\treturn /** @type {string} */ (\n\t\t\t/** @type {*} */ hooks.applyFilters(\n\t\t\t\t'i18n.ngettext_' + getFilterDomain( domain ),\n\t\t\t\ttranslation,\n\t\t\t\tsingle,\n\t\t\t\tplural,\n\t\t\t\tnumber,\n\t\t\t\tdomain\n\t\t\t)\n\t\t);\n\t};\n\n\t/** @type {_nx} */\n\tconst _nx = ( single, plural, number, context, domain ) => {\n\t\tlet translation = dcnpgettext(\n\t\t\tdomain,\n\t\t\tcontext,\n\t\t\tsingle,\n\t\t\tplural,\n\t\t\tnumber\n\t\t);\n\t\tif ( typeof hooks === 'undefined' ) {\n\t\t\treturn translation;\n\t\t}\n\t\t/**\n\t\t * Filters the singular or plural form of a string with gettext context.\n\t\t *\n\t\t * @param {string} translation Translated text.\n\t\t * @param {string} single      The text to be used if the number is singular.\n\t\t * @param {string} plural      The text to be used if the number is plural.\n\t\t * @param {string} number      The number to compare against to use either the singular or plural form.\n\t\t * @param {string} context     Context information for the translators.\n\t\t * @param {string} domain      Text domain. Unique identifier for retrieving translated strings.\n\t\t */\n\t\ttranslation = /** @type {string} */ (\n\t\t\t/** @type {*} */ hooks.applyFilters(\n\t\t\t\t'i18n.ngettext_with_context',\n\t\t\t\ttranslation,\n\t\t\t\tsingle,\n\t\t\t\tplural,\n\t\t\t\tnumber,\n\t\t\t\tcontext,\n\t\t\t\tdomain\n\t\t\t)\n\t\t);\n\n\t\treturn /** @type {string} */ (\n\t\t\t/** @type {*} */ hooks.applyFilters(\n\t\t\t\t'i18n.ngettext_with_context_' + getFilterDomain( domain ),\n\t\t\t\ttranslation,\n\t\t\t\tsingle,\n\t\t\t\tplural,\n\t\t\t\tnumber,\n\t\t\t\tcontext,\n\t\t\t\tdomain\n\t\t\t)\n\t\t);\n\t};\n\n\t/** @type {IsRtl} */\n\tconst isRTL = () => {\n\t\treturn 'rtl' === _x( 'ltr', 'text direction' );\n\t};\n\n\tif ( initialData ) {\n\t\tsetLocaleData( initialData, initialDomain );\n\t}\n\n\treturn {\n\t\tsetLocaleData,\n\t\t__,\n\t\t_x,\n\t\t_n,\n\t\t_nx,\n\t\tisRTL,\n\t};\n};\n"]}