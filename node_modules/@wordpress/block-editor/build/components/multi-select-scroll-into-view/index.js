"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useScrollMultiSelectionIntoView = useScrollMultiSelectionIntoView;
exports.default = MultiSelectScrollIntoView;

var _element = require("@wordpress/element");

var _domScrollIntoView = _interopRequireDefault(require("dom-scroll-into-view"));

var _data = require("@wordpress/data");

var _dom = require("@wordpress/dom");

var _dom2 = require("../../utils/dom");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function useScrollMultiSelectionIntoView(ref) {
  var selectionEnd = (0, _data.useSelect)(function (select) {
    var _select = select('core/block-editor'),
        getBlockSelectionEnd = _select.getBlockSelectionEnd,
        hasMultiSelection = _select.hasMultiSelection,
        isMultiSelecting = _select.isMultiSelecting;

    var blockSelectionEnd = getBlockSelectionEnd();

    if (!blockSelectionEnd || isMultiSelecting() || !hasMultiSelection()) {
      return;
    }

    return blockSelectionEnd;
  }, []);
  (0, _element.useEffect)(function () {
    if (!selectionEnd) {
      return;
    }

    var ownerDocument = ref.current.ownerDocument;
    var extentNode = (0, _dom2.getBlockDOMNode)(selectionEnd, ownerDocument);

    if (!extentNode) {
      return;
    }

    var scrollContainer = (0, _dom.getScrollContainer)(extentNode); // If there's no scroll container, it follows that there's no scrollbar
    // and thus there's no need to try to scroll into view.

    if (!scrollContainer) {
      return;
    }

    (0, _domScrollIntoView.default)(extentNode, scrollContainer, {
      onlyScrollIfNeeded: true
    });
  }, [selectionEnd]);
}
/**
 * Scrolls the multi block selection end into view if not in view already. This
 * is important to do after selection by keyboard.
 */


function MultiSelectScrollIntoView() {
  var ref = (0, _element.useRef)();
  useScrollMultiSelectionIntoView(ref);
  return (0, _element.createElement)("div", {
    ref: ref
  });
}
//# sourceMappingURL=index.js.map