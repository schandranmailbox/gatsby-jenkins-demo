{"version":3,"sources":["@wordpress/block-editor/src/components/multi-select-scroll-into-view/index.js"],"names":["useScrollMultiSelectionIntoView","ref","selectionEnd","select","getBlockSelectionEnd","hasMultiSelection","isMultiSelecting","blockSelectionEnd","ownerDocument","current","extentNode","scrollContainer","onlyScrollIfNeeded","MultiSelectScrollIntoView"],"mappings":";;;;;;;;;;AAQA;;AALA;;AAMA;;AACA;;AAKA;;AAfA;AACA;AACA;;AAGA;AACA;AACA;;AAKA;AACA;AACA;AAGO,SAASA,+BAAT,CAA0CC,GAA1C,EAAgD;AACtD,MAAMC,YAAY,GAAG,qBAAW,UAAEC,MAAF,EAAc;AAAA,kBAKzCA,MAAM,CAAE,mBAAF,CALmC;AAAA,QAE5CC,oBAF4C,WAE5CA,oBAF4C;AAAA,QAG5CC,iBAH4C,WAG5CA,iBAH4C;AAAA,QAI5CC,gBAJ4C,WAI5CA,gBAJ4C;;AAO7C,QAAMC,iBAAiB,GAAGH,oBAAoB,EAA9C;;AAEA,QACC,CAAEG,iBAAF,IACAD,gBAAgB,EADhB,IAEA,CAAED,iBAAiB,EAHpB,EAIE;AACD;AACA;;AAED,WAAOE,iBAAP;AACA,GAlBoB,EAkBlB,EAlBkB,CAArB;AAoBA,0BAAW,YAAM;AAChB,QAAK,CAAEL,YAAP,EAAsB;AACrB;AACA;;AAHe,QAKRM,aALQ,GAKUP,GAAG,CAACQ,OALd,CAKRD,aALQ;AAMhB,QAAME,UAAU,GAAG,2BAAiBR,YAAjB,EAA+BM,aAA/B,CAAnB;;AAEA,QAAK,CAAEE,UAAP,EAAoB;AACnB;AACA;;AAED,QAAMC,eAAe,GAAG,6BAAoBD,UAApB,CAAxB,CAZgB,CAchB;AACA;;AACA,QAAK,CAAEC,eAAP,EAAyB;AACxB;AACA;;AAED,oCAAgBD,UAAhB,EAA4BC,eAA5B,EAA6C;AAC5CC,MAAAA,kBAAkB,EAAE;AADwB,KAA7C;AAGA,GAvBD,EAuBG,CAAEV,YAAF,CAvBH;AAwBA;AAED;AACA;AACA;AACA;;;AACe,SAASW,yBAAT,GAAqC;AACnD,MAAMZ,GAAG,GAAG,sBAAZ;AACAD,EAAAA,+BAA+B,CAAEC,GAAF,CAA/B;AACA,SAAO;AAAK,IAAA,GAAG,EAAGA;AAAX,IAAP;AACA","sourcesContent":["/**\n * External dependencies\n */\nimport scrollIntoView from 'dom-scroll-into-view';\n\n/**\n * WordPress dependencies\n */\nimport { useEffect, useRef } from '@wordpress/element';\nimport { useSelect } from '@wordpress/data';\nimport { getScrollContainer } from '@wordpress/dom';\n\n/**\n * Internal dependencies\n */\nimport { getBlockDOMNode } from '../../utils/dom';\n\nexport function useScrollMultiSelectionIntoView( ref ) {\n\tconst selectionEnd = useSelect( ( select ) => {\n\t\tconst {\n\t\t\tgetBlockSelectionEnd,\n\t\t\thasMultiSelection,\n\t\t\tisMultiSelecting,\n\t\t} = select( 'core/block-editor' );\n\n\t\tconst blockSelectionEnd = getBlockSelectionEnd();\n\n\t\tif (\n\t\t\t! blockSelectionEnd ||\n\t\t\tisMultiSelecting() ||\n\t\t\t! hasMultiSelection()\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn blockSelectionEnd;\n\t}, [] );\n\n\tuseEffect( () => {\n\t\tif ( ! selectionEnd ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { ownerDocument } = ref.current;\n\t\tconst extentNode = getBlockDOMNode( selectionEnd, ownerDocument );\n\n\t\tif ( ! extentNode ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst scrollContainer = getScrollContainer( extentNode );\n\n\t\t// If there's no scroll container, it follows that there's no scrollbar\n\t\t// and thus there's no need to try to scroll into view.\n\t\tif ( ! scrollContainer ) {\n\t\t\treturn;\n\t\t}\n\n\t\tscrollIntoView( extentNode, scrollContainer, {\n\t\t\tonlyScrollIfNeeded: true,\n\t\t} );\n\t}, [ selectionEnd ] );\n}\n\n/**\n * Scrolls the multi block selection end into view if not in view already. This\n * is important to do after selection by keyboard.\n */\nexport default function MultiSelectScrollIntoView() {\n\tconst ref = useRef();\n\tuseScrollMultiSelectionIntoView( ref );\n\treturn <div ref={ ref } />;\n}\n"]}