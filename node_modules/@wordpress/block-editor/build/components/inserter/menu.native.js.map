{"version":3,"sources":["@wordpress/block-editor/src/components/inserter/menu.native.js"],"names":["MIN_COL_NUM","InserterMenu","arguments","onClose","bind","onLayout","renderItem","state","numberOfColumns","Dimensions","addEventListener","props","showInsertionPoint","hideInsertionPoint","removeEventListener","bottomSheetWidth","styles","columnPadding","paddingLeft","paddingRight","InserterButton","Styles","modalItem","itemPaddingLeft","itemPaddingRight","itemWidth","modalIconWrapper","width","BottomSheet","getWidth","itemTotalWidth","calculateItemWidth","containerTotalWidth","numofColumns","Math","floor","numOfColumns","calculateMinItemWidth","maxWidth","shouldReplaceBlock","insertDefaultBlock","onDismiss","calculateColumnsProperties","setState","initialItems","items","canInsertBlockType","destinationRootClientId","getBlockType","filter","name","clipboard","clipboardBlock","HTML","shouldAddClipboardBlock","id","initialAttributes","attributes","innerBlocks","item","onSelect","getItems","listProps","safeAreaBottomInset","rowSeparator","contentContainerStyle","paddingBottom","list","Component","select","clientId","isAppender","rootClientId","getInserterItems","getBlockName","getBlockRootClientId","getBlockSelectionEnd","getSettings","blocksStore","getChildBlockNames","end","undefined","destinationRootBlockName","shouldInsertAtTheTop","__experimentalShouldInsertAtTheTop","rootChildBlocks","dispatch","ownProps","removeBlock","resetBlocks","clearSelectedBlock","insertBlock","getBlockOrder","getBlockCount","count","blockToReplace","insertionIndex","insertedBlock","withInstanceId"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport {\n\tFlatList,\n\tView,\n\tTouchableHighlight,\n\tTouchableWithoutFeedback,\n\tDimensions,\n} from 'react-native';\nimport { pick } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { Component } from '@wordpress/element';\nimport {\n\tcreateBlock,\n\trawHandler,\n\tstore as blocksStore,\n} from '@wordpress/blocks';\nimport { withDispatch, withSelect } from '@wordpress/data';\nimport { withInstanceId, compose } from '@wordpress/compose';\nimport {\n\tBottomSheet,\n\tBottomSheetConsumer,\n\tInserterButton,\n\tgetClipboard,\n} from '@wordpress/components';\n\n/**\n * Internal dependencies\n */\nimport styles from './style.scss';\n\nconst MIN_COL_NUM = 3;\n\nexport class InserterMenu extends Component {\n\tconstructor() {\n\t\tsuper( ...arguments );\n\n\t\tthis.onClose = this.onClose.bind( this );\n\t\tthis.onLayout = this.onLayout.bind( this );\n\t\tthis.renderItem = this.renderItem.bind( this );\n\t\tthis.state = {\n\t\t\tnumberOfColumns: MIN_COL_NUM,\n\t\t};\n\n\t\tDimensions.addEventListener( 'change', this.onLayout );\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.props.showInsertionPoint();\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis.props.hideInsertionPoint();\n\t\tDimensions.removeEventListener( 'change', this.onLayout );\n\t}\n\n\tcalculateMinItemWidth( bottomSheetWidth ) {\n\t\tconst { paddingLeft, paddingRight } = styles.columnPadding;\n\t\treturn (\n\t\t\t( bottomSheetWidth - 2 * ( paddingLeft + paddingRight ) ) /\n\t\t\tMIN_COL_NUM\n\t\t);\n\t}\n\n\tcalculateItemWidth() {\n\t\tconst {\n\t\t\tpaddingLeft: itemPaddingLeft,\n\t\t\tpaddingRight: itemPaddingRight,\n\t\t} = InserterButton.Styles.modalItem;\n\t\tconst { width: itemWidth } = InserterButton.Styles.modalIconWrapper;\n\t\treturn itemWidth + itemPaddingLeft + itemPaddingRight;\n\t}\n\n\tcalculateColumnsProperties() {\n\t\tconst bottomSheetWidth = BottomSheet.getWidth();\n\t\tconst { paddingLeft, paddingRight } = styles.columnPadding;\n\t\tconst itemTotalWidth = this.calculateItemWidth();\n\t\tconst containerTotalWidth =\n\t\t\tbottomSheetWidth - ( paddingLeft + paddingRight );\n\t\tconst numofColumns = Math.floor( containerTotalWidth / itemTotalWidth );\n\n\t\tif ( numofColumns < MIN_COL_NUM ) {\n\t\t\treturn {\n\t\t\t\tnumOfColumns: MIN_COL_NUM,\n\t\t\t\titemWidth: this.calculateMinItemWidth( bottomSheetWidth ),\n\t\t\t\tmaxWidth: containerTotalWidth / MIN_COL_NUM,\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\tnumOfColumns: numofColumns,\n\t\t\tmaxWidth: containerTotalWidth / numofColumns,\n\t\t};\n\t}\n\n\tonClose() {\n\t\t// if should replace but didn't insert any block\n\t\t// re-insert default block\n\t\tif ( this.props.shouldReplaceBlock ) {\n\t\t\tthis.props.insertDefaultBlock();\n\t\t}\n\t\tthis.props.onDismiss();\n\t}\n\n\tonLayout() {\n\t\tconst {\n\t\t\tnumOfColumns,\n\t\t\titemWidth,\n\t\t\tmaxWidth,\n\t\t} = this.calculateColumnsProperties();\n\t\tconst numberOfColumns = numOfColumns;\n\n\t\tthis.setState( { numberOfColumns, itemWidth, maxWidth } );\n\t}\n\n\t/**\n\t * Processes the inserter items to check\n\t * if there's any copied block in the clipboard\n\t * to add it as an extra item\n\t */\n\tgetItems() {\n\t\tconst {\n\t\t\titems: initialItems,\n\t\t\tcanInsertBlockType,\n\t\t\tdestinationRootClientId,\n\t\t\tgetBlockType,\n\t\t} = this.props;\n\n\t\t// Filter out reusable blocks (they will be added in another tab)\n\t\tconst items = initialItems.filter(\n\t\t\t( { name } ) => name !== 'core/block'\n\t\t);\n\n\t\tconst clipboard = getClipboard();\n\t\tconst clipboardBlock =\n\t\t\tclipboard && rawHandler( { HTML: clipboard } )[ 0 ];\n\t\tconst shouldAddClipboardBlock =\n\t\t\tclipboardBlock &&\n\t\t\tcanInsertBlockType( clipboardBlock.name, destinationRootClientId );\n\n\t\treturn shouldAddClipboardBlock\n\t\t\t? [\n\t\t\t\t\t{\n\t\t\t\t\t\t...pick( getBlockType( clipboardBlock.name ), [\n\t\t\t\t\t\t\t'name',\n\t\t\t\t\t\t\t'icon',\n\t\t\t\t\t\t] ),\n\t\t\t\t\t\tid: 'clipboard',\n\t\t\t\t\t\tinitialAttributes: clipboardBlock.attributes,\n\t\t\t\t\t\tinnerBlocks: clipboardBlock.innerBlocks,\n\t\t\t\t\t},\n\t\t\t\t\t...items,\n\t\t\t  ]\n\t\t\t: items;\n\t}\n\n\trenderItem( { item } ) {\n\t\tconst { itemWidth, maxWidth } = this.state;\n\t\tconst { onSelect } = this.props;\n\t\treturn (\n\t\t\t<InserterButton\n\t\t\t\titem={ item }\n\t\t\t\titemWidth={ itemWidth }\n\t\t\t\tmaxWidth={ maxWidth }\n\t\t\t\tonSelect={ onSelect }\n\t\t\t/>\n\t\t);\n\t}\n\n\trender() {\n\t\tconst { numberOfColumns } = this.state;\n\t\tconst items = this.getItems();\n\n\t\treturn (\n\t\t\t<BottomSheet\n\t\t\t\tisVisible={ true }\n\t\t\t\tonClose={ this.onClose }\n\t\t\t\thideHeader\n\t\t\t\thasNavigation\n\t\t\t>\n\t\t\t\t<TouchableHighlight accessible={ false }>\n\t\t\t\t\t<BottomSheetConsumer>\n\t\t\t\t\t\t{ ( { listProps, safeAreaBottomInset } ) => (\n\t\t\t\t\t\t\t<FlatList\n\t\t\t\t\t\t\t\tonLayout={ this.onLayout }\n\t\t\t\t\t\t\t\tkey={ `InserterUI-${ numberOfColumns }` } //re-render when numberOfColumns changes\n\t\t\t\t\t\t\t\tkeyboardShouldPersistTaps=\"always\"\n\t\t\t\t\t\t\t\tnumColumns={ numberOfColumns }\n\t\t\t\t\t\t\t\tdata={ items }\n\t\t\t\t\t\t\t\tItemSeparatorComponent={ () => (\n\t\t\t\t\t\t\t\t\t<TouchableWithoutFeedback\n\t\t\t\t\t\t\t\t\t\taccessible={ false }\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<View style={ styles.rowSeparator } />\n\t\t\t\t\t\t\t\t\t</TouchableWithoutFeedback>\n\t\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\t\tkeyExtractor={ ( item ) => item.name }\n\t\t\t\t\t\t\t\trenderItem={ this.renderItem }\n\t\t\t\t\t\t\t\t{ ...listProps }\n\t\t\t\t\t\t\t\tcontentContainerStyle={ [\n\t\t\t\t\t\t\t\t\t...listProps.contentContainerStyle,\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tpaddingBottom:\n\t\t\t\t\t\t\t\t\t\t\tsafeAreaBottomInset ||\n\t\t\t\t\t\t\t\t\t\t\tstyles.list.paddingBottom,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t] }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) }\n\t\t\t\t\t</BottomSheetConsumer>\n\t\t\t\t</TouchableHighlight>\n\t\t\t</BottomSheet>\n\t\t);\n\t}\n}\n\nexport default compose(\n\twithSelect( ( select, { clientId, isAppender, rootClientId } ) => {\n\t\tconst {\n\t\t\tgetInserterItems,\n\t\t\tgetBlockName,\n\t\t\tgetBlockRootClientId,\n\t\t\tgetBlockSelectionEnd,\n\t\t\tgetSettings,\n\t\t\tcanInsertBlockType,\n\t\t} = select( 'core/block-editor' );\n\t\tconst { getChildBlockNames, getBlockType } = select( blocksStore );\n\n\t\tlet destinationRootClientId = rootClientId;\n\t\tif ( ! destinationRootClientId && ! clientId && ! isAppender ) {\n\t\t\tconst end = getBlockSelectionEnd();\n\t\t\tif ( end ) {\n\t\t\t\tdestinationRootClientId =\n\t\t\t\t\tgetBlockRootClientId( end ) || undefined;\n\t\t\t}\n\t\t}\n\t\tconst destinationRootBlockName = getBlockName(\n\t\t\tdestinationRootClientId\n\t\t);\n\n\t\tconst {\n\t\t\t__experimentalShouldInsertAtTheTop: shouldInsertAtTheTop,\n\t\t} = getSettings();\n\n\t\treturn {\n\t\t\trootChildBlocks: getChildBlockNames( destinationRootBlockName ),\n\t\t\titems: getInserterItems( destinationRootClientId ),\n\t\t\tdestinationRootClientId,\n\t\t\tshouldInsertAtTheTop,\n\t\t\tgetBlockType,\n\t\t\tcanInsertBlockType,\n\t\t};\n\t} ),\n\twithDispatch( ( dispatch, ownProps, { select } ) => {\n\t\tconst {\n\t\t\tshowInsertionPoint,\n\t\t\thideInsertionPoint,\n\t\t\tremoveBlock,\n\t\t\tresetBlocks,\n\t\t\tclearSelectedBlock,\n\t\t\tinsertBlock,\n\t\t\tinsertDefaultBlock,\n\t\t} = dispatch( 'core/block-editor' );\n\n\t\treturn {\n\t\t\tshowInsertionPoint() {\n\t\t\t\tif ( ownProps.shouldReplaceBlock ) {\n\t\t\t\t\tconst { getBlockOrder, getBlockCount } = select(\n\t\t\t\t\t\t'core/block-editor'\n\t\t\t\t\t);\n\n\t\t\t\t\tconst count = getBlockCount();\n\t\t\t\t\t// Check if there is a rootClientId because that means it is a nested replacable block and we don't want to clear/reset all blocks.\n\t\t\t\t\tif ( count === 1 && ! ownProps.rootClientId ) {\n\t\t\t\t\t\t// removing the last block is not possible with `removeBlock` action\n\t\t\t\t\t\t// it always inserts a default block if the last of the blocks have been removed\n\t\t\t\t\t\tclearSelectedBlock();\n\t\t\t\t\t\tresetBlocks( [] );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst blockToReplace = getBlockOrder(\n\t\t\t\t\t\t\townProps.destinationRootClientId\n\t\t\t\t\t\t)[ ownProps.insertionIndex ];\n\n\t\t\t\t\t\tremoveBlock( blockToReplace, false );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshowInsertionPoint(\n\t\t\t\t\townProps.destinationRootClientId,\n\t\t\t\t\townProps.insertionIndex\n\t\t\t\t);\n\t\t\t},\n\t\t\thideInsertionPoint,\n\t\t\tonSelect( item ) {\n\t\t\t\tconst { name, initialAttributes, innerBlocks } = item;\n\n\t\t\t\tconst insertedBlock = createBlock(\n\t\t\t\t\tname,\n\t\t\t\t\tinitialAttributes,\n\t\t\t\t\tinnerBlocks\n\t\t\t\t);\n\n\t\t\t\tinsertBlock(\n\t\t\t\t\tinsertedBlock,\n\t\t\t\t\townProps.insertionIndex,\n\t\t\t\t\townProps.destinationRootClientId\n\t\t\t\t);\n\n\t\t\t\townProps.onSelect();\n\t\t\t},\n\t\t\tinsertDefaultBlock() {\n\t\t\t\tinsertDefaultBlock(\n\t\t\t\t\t{},\n\t\t\t\t\townProps.destinationRootClientId,\n\t\t\t\t\townProps.insertionIndex\n\t\t\t\t);\n\t\t\t},\n\t\t};\n\t} ),\n\twithInstanceId\n)( InserterMenu );\n"]}