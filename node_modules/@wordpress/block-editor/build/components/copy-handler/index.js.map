{"version":3,"sources":["@wordpress/block-editor/src/components/copy-handler/index.js"],"names":["useNotifyCopy","select","getBlockName","blocksStore","getBlockType","noticesStore","createSuccessNotice","eventType","selectedBlockClientIds","notice","length","clientId","title","type","useClipboardHandler","ref","getBlocksByClientId","getSelectedBlockClientIds","hasMultiSelection","getSettings","flashBlock","removeBlocks","replaceBlocks","notifyCopy","handler","event","target","ownerDocument","hasSelection","current","contains","preventDefault","blocks","serialized","clipboardData","setData","canUserUseUnfilteredHTML","__experimentalCanUserUseUnfilteredHTML","plainText","html","HTML","mode","addEventListener","removeEventListener","CopyHandler","children"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useCallback, useEffect, useRef } from '@wordpress/element';\nimport {\n\tserialize,\n\tpasteHandler,\n\tstore as blocksStore,\n} from '@wordpress/blocks';\nimport {\n\tdocumentHasSelection,\n\tdocumentHasUncollapsedSelection,\n} from '@wordpress/dom';\nimport { useDispatch, useSelect } from '@wordpress/data';\nimport { __, _n, sprintf } from '@wordpress/i18n';\nimport { store as noticesStore } from '@wordpress/notices';\n\n/**\n * Internal dependencies\n */\nimport { getPasteEventData } from '../../utils/get-paste-event-data';\n\nexport function useNotifyCopy() {\n\tconst { getBlockName } = useSelect(\n\t\t( select ) => select( 'core/block-editor' ),\n\t\t[]\n\t);\n\tconst { getBlockType } = useSelect(\n\t\t( select ) => select( blocksStore ),\n\t\t[]\n\t);\n\tconst { createSuccessNotice } = useDispatch( noticesStore );\n\n\treturn useCallback( ( eventType, selectedBlockClientIds ) => {\n\t\tlet notice = '';\n\t\tif ( selectedBlockClientIds.length === 1 ) {\n\t\t\tconst clientId = selectedBlockClientIds[ 0 ];\n\t\t\tconst { title } = getBlockType( getBlockName( clientId ) );\n\t\t\tnotice =\n\t\t\t\teventType === 'copy'\n\t\t\t\t\t? sprintf(\n\t\t\t\t\t\t\t// Translators: Name of the block being copied, e.g. \"Paragraph\".\n\t\t\t\t\t\t\t__( 'Copied \"%s\" to clipboard.' ),\n\t\t\t\t\t\t\ttitle\n\t\t\t\t\t  )\n\t\t\t\t\t: sprintf(\n\t\t\t\t\t\t\t// Translators: Name of the block being cut, e.g. \"Paragraph\".\n\t\t\t\t\t\t\t__( 'Moved \"%s\" to clipboard.' ),\n\t\t\t\t\t\t\ttitle\n\t\t\t\t\t  );\n\t\t} else {\n\t\t\tnotice =\n\t\t\t\teventType === 'copy'\n\t\t\t\t\t? sprintf(\n\t\t\t\t\t\t\t// Translators: %d: Number of blocks being copied.\n\t\t\t\t\t\t\t_n(\n\t\t\t\t\t\t\t\t'Copied %d block to clipboard.',\n\t\t\t\t\t\t\t\t'Copied %d blocks to clipboard.',\n\t\t\t\t\t\t\t\tselectedBlockClientIds.length\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tselectedBlockClientIds.length\n\t\t\t\t\t  )\n\t\t\t\t\t: sprintf(\n\t\t\t\t\t\t\t// Translators: %d: Number of blocks being cut.\n\t\t\t\t\t\t\t_n(\n\t\t\t\t\t\t\t\t'Moved %d block to clipboard.',\n\t\t\t\t\t\t\t\t'Moved %d blocks to clipboard.',\n\t\t\t\t\t\t\t\tselectedBlockClientIds.length\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tselectedBlockClientIds.length\n\t\t\t\t\t  );\n\t\t}\n\t\tcreateSuccessNotice( notice, {\n\t\t\ttype: 'snackbar',\n\t\t} );\n\t}, [] );\n}\n\nexport function useClipboardHandler( ref ) {\n\tconst {\n\t\tgetBlocksByClientId,\n\t\tgetSelectedBlockClientIds,\n\t\thasMultiSelection,\n\t\tgetSettings,\n\t} = useSelect( ( select ) => select( 'core/block-editor' ), [] );\n\tconst { flashBlock, removeBlocks, replaceBlocks } = useDispatch(\n\t\t'core/block-editor'\n\t);\n\tconst notifyCopy = useNotifyCopy();\n\n\tuseEffect( () => {\n\t\tfunction handler( event ) {\n\t\t\tconst selectedBlockClientIds = getSelectedBlockClientIds();\n\n\t\t\tif ( selectedBlockClientIds.length === 0 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Always handle multiple selected blocks.\n\t\t\tif ( ! hasMultiSelection() ) {\n\t\t\t\tconst { target } = event;\n\t\t\t\tconst { ownerDocument } = target;\n\t\t\t\t// If copying, only consider actual text selection as selection.\n\t\t\t\t// Otherwise, any focus on an input field is considered.\n\t\t\t\tconst hasSelection =\n\t\t\t\t\tevent.type === 'copy' || event.type === 'cut'\n\t\t\t\t\t\t? documentHasUncollapsedSelection( ownerDocument )\n\t\t\t\t\t\t: documentHasSelection( ownerDocument );\n\n\t\t\t\t// Let native copy behaviour take over in input fields.\n\t\t\t\tif ( hasSelection ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( ! ref.current.contains( event.target ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( event.type === 'copy' || event.type === 'cut' ) {\n\t\t\t\tif ( selectedBlockClientIds.length === 1 ) {\n\t\t\t\t\tflashBlock( selectedBlockClientIds[ 0 ] );\n\t\t\t\t}\n\t\t\t\tnotifyCopy( event.type, selectedBlockClientIds );\n\t\t\t\tconst blocks = getBlocksByClientId( selectedBlockClientIds );\n\t\t\t\tconst serialized = serialize( blocks );\n\n\t\t\t\tevent.clipboardData.setData( 'text/plain', serialized );\n\t\t\t\tevent.clipboardData.setData( 'text/html', serialized );\n\t\t\t}\n\n\t\t\tif ( event.type === 'cut' ) {\n\t\t\t\tremoveBlocks( selectedBlockClientIds );\n\t\t\t} else if ( event.type === 'paste' ) {\n\t\t\t\tconst {\n\t\t\t\t\t__experimentalCanUserUseUnfilteredHTML: canUserUseUnfilteredHTML,\n\t\t\t\t} = getSettings();\n\t\t\t\tconst { plainText, html } = getPasteEventData( event );\n\t\t\t\tconst blocks = pasteHandler( {\n\t\t\t\t\tHTML: html,\n\t\t\t\t\tplainText,\n\t\t\t\t\tmode: 'BLOCKS',\n\t\t\t\t\tcanUserUseUnfilteredHTML,\n\t\t\t\t} );\n\n\t\t\t\treplaceBlocks(\n\t\t\t\t\tselectedBlockClientIds,\n\t\t\t\t\tblocks,\n\t\t\t\t\tblocks.length - 1,\n\t\t\t\t\t-1\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tref.current.addEventListener( 'copy', handler );\n\t\tref.current.addEventListener( 'cut', handler );\n\t\tref.current.addEventListener( 'paste', handler );\n\n\t\treturn () => {\n\t\t\tref.current.removeEventListener( 'copy', handler );\n\t\t\tref.current.removeEventListener( 'cut', handler );\n\t\t\tref.current.removeEventListener( 'paste', handler );\n\t\t};\n\t}, [] );\n}\n\nfunction CopyHandler( { children } ) {\n\tconst ref = useRef();\n\tuseClipboardHandler( ref );\n\treturn <div ref={ ref }>{ children }</div>;\n}\n\nexport default CopyHandler;\n"]}