"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classnames = _interopRequireDefault(require("classnames"));

var _components = require("@wordpress/components");

var _blocks = require("@wordpress/blocks");

var _blockIcon = _interopRequireDefault(require("../block-icon"));

var _inserterDraggableBlocks = _interopRequireDefault(require("../inserter-draggable-blocks"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function InserterListItem(_ref) {
  var className = _ref.className,
      composite = _ref.composite,
      item = _ref.item,
      onSelect = _ref.onSelect,
      onHover = _ref.onHover,
      isDraggable = _ref.isDraggable,
      props = (0, _objectWithoutProperties2.default)(_ref, ["className", "composite", "item", "onSelect", "onHover", "isDraggable"]);
  var isDragging = (0, _element.useRef)(false);
  var itemIconStyle = item.icon ? {
    backgroundColor: item.icon.background,
    color: item.icon.foreground
  } : {};
  var blocks = (0, _element.useMemo)(function () {
    return [(0, _blocks.createBlock)(item.name, item.initialAttributes, (0, _blocks.createBlocksFromInnerBlocksTemplate)(item.innerBlocks))];
  }, [item.name, item.initialAttributes, item.initialAttributes]);
  return (0, _element.createElement)(_inserterDraggableBlocks.default, {
    isEnabled: isDraggable && !item.disabled,
    blocks: blocks,
    icon: item.icon
  }, function (_ref2) {
    var draggable = _ref2.draggable,
        _onDragStart = _ref2.onDragStart,
        _onDragEnd = _ref2.onDragEnd;
    return (0, _element.createElement)("div", {
      className: "block-editor-block-types-list__list-item",
      draggable: draggable,
      onDragStart: function onDragStart(event) {
        isDragging.current = true;

        if (_onDragStart) {
          onHover(null);

          _onDragStart(event);
        }
      },
      onDragEnd: function onDragEnd(event) {
        isDragging.current = false;

        if (_onDragEnd) {
          _onDragEnd(event);
        }
      }
    }, (0, _element.createElement)(_components.__unstableCompositeItem, (0, _extends2.default)({
      role: "option",
      as: _components.Button
    }, composite, {
      className: (0, _classnames.default)('block-editor-block-types-list__item', className),
      disabled: item.isDisabled,
      onClick: function onClick(event) {
        event.preventDefault();
        onSelect(item);
        onHover(null);
      },
      onFocus: function onFocus() {
        if (isDragging.current) {
          return;
        }

        onHover(item);
      },
      onMouseEnter: function onMouseEnter() {
        if (isDragging.current) {
          return;
        }

        onHover(item);
      },
      onMouseLeave: function onMouseLeave() {
        return onHover(null);
      },
      onBlur: function onBlur() {
        return onHover(null);
      } // Use the CompositeItem `focusable` prop over Button's
      // isFocusable. The latter was shown to cause an issue
      // with tab order in the inserter list.
      ,
      focusable: true
    }, props), (0, _element.createElement)("span", {
      className: "block-editor-block-types-list__item-icon",
      style: itemIconStyle
    }, (0, _element.createElement)(_blockIcon.default, {
      icon: item.icon,
      showColors: true
    })), (0, _element.createElement)("span", {
      className: "block-editor-block-types-list__item-title"
    }, item.title)));
  });
}

var _default = (0, _element.memo)(InserterListItem);

exports.default = _default;
//# sourceMappingURL=index.js.map