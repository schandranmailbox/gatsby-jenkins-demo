"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useBlockProps = useBlockProps;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = require("lodash");

var _element = require("@wordpress/element");

var _i18n = require("@wordpress/i18n");

var _blocks = require("@wordpress/blocks");

var _useMovingAnimation = _interopRequireDefault(require("../../use-moving-animation"));

var _ = require("../");

var _block = require("../block");

var _useFocusFirstElement = require("./use-focus-first-element");

var _useIsHovered = require("./use-is-hovered");

var _useBlockMovingModeClassNames = require("./use-block-moving-mode-class-names");

var _useEventHandlers = require("./use-event-handlers");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * This hook is used to lightly mark an element as a block element. The element
 * should be the outermost element of a block. Call this hook and pass the
 * returned props to the element to mark as a block. If you define a ref for the
 * element, it is important to pass the ref to this hook, which the hook in turn
 * will pass to the component through the props it returns. Optionally, you can
 * also pass any other props through this hook, and they will be merged and
 * returned.
 *
 * @param {Object}  props   Optional. Props to pass to the element. Must contain
 *                          the ref if one is defined.
 * @param {Object}  options Options for internal use only.
 * @param {boolean} options.__unstableIsHtml
 *
 * @return {Object} Props to pass to the element to mark as a block.
 */
function useBlockProps() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      __unstableIsHtml = _ref.__unstableIsHtml;

  var fallbackRef = (0, _element.useRef)();
  var ref = props.ref || fallbackRef;
  var setBlockNodes = (0, _element.useContext)(_.SetBlockNodes);

  var _useContext = (0, _element.useContext)(_block.BlockListBlockContext),
      clientId = _useContext.clientId,
      isSelected = _useContext.isSelected,
      isFirstMultiSelected = _useContext.isFirstMultiSelected,
      isLastMultiSelected = _useContext.isLastMultiSelected,
      isPartOfMultiSelection = _useContext.isPartOfMultiSelection,
      enableAnimation = _useContext.enableAnimation,
      index = _useContext.index,
      className = _useContext.className,
      name = _useContext.name,
      mode = _useContext.mode,
      blockTitle = _useContext.blockTitle,
      _useContext$wrapperPr = _useContext.wrapperProps,
      wrapperProps = _useContext$wrapperPr === void 0 ? {} : _useContext$wrapperPr; // Provide the selected node, or the first and last nodes of a multi-
  // selection, so it can be used to position the contextual block toolbar.
  // We only provide what is necessary, and remove the nodes again when they
  // are no longer selected.


  (0, _element.useEffect)(function () {
    if (isSelected || isFirstMultiSelected || isLastMultiSelected) {
      var node = ref.current;
      setBlockNodes(function (nodes) {
        return _objectSpread(_objectSpread({}, nodes), {}, (0, _defineProperty2.default)({}, clientId, node));
      });
      return function () {
        setBlockNodes(function (nodes) {
          return (0, _lodash.omit)(nodes, clientId);
        });
      };
    }
  }, [isSelected, isFirstMultiSelected, isLastMultiSelected]); // Set new block node if it changes.
  // This effect should happen on every render, so no dependencies should be
  // added.

  (0, _element.useEffect)(function () {
    var node = ref.current;
    setBlockNodes(function (nodes) {
      if (!nodes[clientId] || nodes[clientId] === node) {
        return nodes;
      }

      return _objectSpread(_objectSpread({}, nodes), {}, (0, _defineProperty2.default)({}, clientId, node));
    });
  }); // translators: %s: Type of block (i.e. Text, Image etc)

  var blockLabel = (0, _i18n.sprintf)((0, _i18n.__)('Block: %s'), blockTitle);
  (0, _useFocusFirstElement.useFocusFirstElement)(ref, clientId);
  (0, _useEventHandlers.useEventHandlers)(ref, clientId); // Block Reordering animation

  (0, _useMovingAnimation.default)(ref, isSelected || isPartOfMultiSelection, isSelected || isFirstMultiSelected, enableAnimation, index);
  var isHovered = (0, _useIsHovered.useIsHovered)(ref);
  var blockMovingModeClassNames = (0, _useBlockMovingModeClassNames.useBlockMovingModeClassNames)(clientId);
  var htmlSuffix = mode === 'html' && !__unstableIsHtml ? '-visual' : '';
  return _objectSpread(_objectSpread(_objectSpread({}, wrapperProps), props), {}, {
    ref: ref,
    id: "block-".concat(clientId).concat(htmlSuffix),
    tabIndex: 0,
    role: 'group',
    'aria-label': blockLabel,
    'data-block': clientId,
    'data-type': name,
    'data-title': blockTitle,
    className: (0, _classnames.default)(className, props.className, wrapperProps.className, blockMovingModeClassNames, {
      'is-hovered': isHovered
    }),
    style: _objectSpread(_objectSpread({}, wrapperProps.style), props.style)
  });
}
/**
 * Call within a save function to get the props for the block wrapper.
 *
 * @param {Object} props Optional. Props to pass to the element.
 */


useBlockProps.save = _blocks.__unstableGetBlockProps;
//# sourceMappingURL=index.js.map