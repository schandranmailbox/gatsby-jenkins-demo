{"version":3,"sources":["@wordpress/block-editor/src/components/block-list/use-block-props/use-focus-first-element.js"],"names":["useInitialPosition","clientId","select","getSelectedBlocksInitialCaretPosition","isMultiSelecting","isNavigationMode","isBlockSelected","useFocusFirstElement","ref","initialPosition","undefined","ownerDocument","current","activeElement","textInputs","focus","tabbable","find","filter","node","closest","isReverse","target","last","first"],"mappings":";;;;;;;AAGA;;AAKA;;AACA;;AACA;;AAKA;;AAfA;AACA;AACA;;AAGA;AACA;AACA;;AAKA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,kBAAT,CAA6BC,QAA7B,EAAwC;AACvC,SAAO,qBACN,UAAEC,MAAF,EAAc;AAAA,kBAMTA,MAAM,CAAE,mBAAF,CANG;AAAA,QAEZC,qCAFY,WAEZA,qCAFY;AAAA,QAGZC,gBAHY,WAGZA,gBAHY;AAAA,QAIZC,gBAJY,WAIZA,gBAJY;AAAA,QAKZC,eALY,WAKZA,eALY;;AAQb,QAAK,CAAEA,eAAe,CAAEL,QAAF,CAAtB,EAAqC;AACpC;AACA;;AAED,QAAKG,gBAAgB,MAAMC,gBAAgB,EAA3C,EAAgD;AAC/C;AACA,KAdY,CAgBb;;;AACA,WAAOF,qCAAqC,MAAM,CAAlD;AACA,GAnBK,EAoBN,CAAEF,QAAF,CApBM,CAAP;AAsBA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASM,oBAAT,CAA+BC,GAA/B,EAAoCP,QAApC,EAA+C;AACrD,MAAMQ,eAAe,GAAGT,kBAAkB,CAAEC,QAAF,CAA1C;AAEA,0BAAW,YAAM;AAChB,QAAKQ,eAAe,KAAKC,SAAzB,EAAqC;AACpC;AACA;;AAHe,QAKRC,aALQ,GAKUH,GAAG,CAACI,OALd,CAKRD,aALQ,EAOhB;AACA;AACA;AACA;;AACA,QACCA,aAAa,CAACE,aAAd,IACA,6BAAmBL,GAAG,CAACI,OAAvB,EAAgCD,aAAa,CAACE,aAA9C,CAFD,EAGE;AACD;AACA,KAhBe,CAkBhB;;;AACA,QAAMC,UAAU,GAAGC,WAAMC,QAAN,CAAeC,IAAf,CAAqBT,GAAG,CAACI,OAAzB,EAAmCM,MAAnC,CAClB,UAAEC,IAAF;AAAA,aACC,sBAAaA,IAAb,KACA;AACA,mCAAmBX,GAAG,CAACI,OAAvB,EAAgCO,IAAhC,CAFA,IAGA,CAAEA,IAAI,CAACC,OAAL,CAAc,sBAAd,CAJH;AAAA,KADkB,CAAnB,CAnBgB,CA2BhB;AACA;;;AACA,QAAMC,SAAS,GAAG,CAAC,CAAD,KAAOZ,eAAzB;AACA,QAAMa,MAAM,GACX,CAAED,SAAS,GAAGE,YAAH,GAAUC,aAArB,EAA8BV,UAA9B,KAA8CN,GAAG,CAACI,OADnD;AAGA,yCAA4BU,MAA5B,EAAoCD,SAApC;AACA,GAlCD,EAkCG,CAAEZ,eAAF,CAlCH;AAmCA","sourcesContent":["/**\n * External dependencies\n */\nimport { first, last } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { useEffect } from '@wordpress/element';\nimport { focus, isTextField, placeCaretAtHorizontalEdge } from '@wordpress/dom';\nimport { useSelect } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { isInsideRootBlock } from '../../../utils/dom';\n\n/** @typedef {import('@wordpress/element').RefObject} RefObject */\n\n/**\n * Returns the initial position if the block needs to be focussed, `undefined`\n * otherwise. The initial position is either 0 (start) or -1 (end).\n *\n * @param {string} clientId Block client ID.\n *\n * @return {number} The initial position, either 0 (start) or -1 (end).\n */\nfunction useInitialPosition( clientId ) {\n\treturn useSelect(\n\t\t( select ) => {\n\t\t\tconst {\n\t\t\t\tgetSelectedBlocksInitialCaretPosition,\n\t\t\t\tisMultiSelecting,\n\t\t\t\tisNavigationMode,\n\t\t\t\tisBlockSelected,\n\t\t\t} = select( 'core/block-editor' );\n\n\t\t\tif ( ! isBlockSelected( clientId ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( isMultiSelecting() || isNavigationMode() ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If there's no initial position, return 0 to focus the start.\n\t\t\treturn getSelectedBlocksInitialCaretPosition() || 0;\n\t\t},\n\t\t[ clientId ]\n\t);\n}\n\n/**\n * Transitions focus to the block or inner tabbable when the block becomes\n * selected.\n *\n * @param {RefObject} ref      React ref with the block element.\n * @param {string}    clientId Block client ID.\n */\nexport function useFocusFirstElement( ref, clientId ) {\n\tconst initialPosition = useInitialPosition( clientId );\n\n\tuseEffect( () => {\n\t\tif ( initialPosition === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { ownerDocument } = ref.current;\n\n\t\t// Focus is captured by the wrapper node, so while focus transition\n\t\t// should only consider tabbables within editable display, since it\n\t\t// may be the wrapper itself or a side control which triggered the\n\t\t// focus event, don't unnecessary transition to an inner tabbable.\n\t\tif (\n\t\t\townerDocument.activeElement &&\n\t\t\tisInsideRootBlock( ref.current, ownerDocument.activeElement )\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Find all tabbables within node.\n\t\tconst textInputs = focus.tabbable.find( ref.current ).filter(\n\t\t\t( node ) =>\n\t\t\t\tisTextField( node ) &&\n\t\t\t\t// Exclude inner blocks and block appenders\n\t\t\t\tisInsideRootBlock( ref.current, node ) &&\n\t\t\t\t! node.closest( '.block-list-appender' )\n\t\t);\n\n\t\t// If reversed (e.g. merge via backspace), use the last in the set of\n\t\t// tabbables.\n\t\tconst isReverse = -1 === initialPosition;\n\t\tconst target =\n\t\t\t( isReverse ? last : first )( textInputs ) || ref.current;\n\n\t\tplaceCaretAtHorizontalEdge( target, isReverse );\n\t}, [ initialPosition ] );\n}\n"]}