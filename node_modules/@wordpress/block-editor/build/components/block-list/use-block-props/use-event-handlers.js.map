{"version":3,"sources":["@wordpress/block-editor/src/components/block-list/use-block-props/use-event-handlers.js"],"names":["useEventHandlers","ref","clientId","onSelectionStart","SelectionStart","select","isBlockSelected","getBlockRootClientId","getBlockIndex","isSelected","rootClientId","index","insertDefaultBlock","removeBlock","selectBlock","onFocus","event","current","target","addEventListener","removeEventListener","onKeyDown","keyCode","ENTER","BACKSPACE","DELETE","preventDefault","onMouseLeave","buttons","onDragStart"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useEffect, useContext } from '@wordpress/element';\nimport { isTextField } from '@wordpress/dom';\nimport { ENTER, BACKSPACE, DELETE } from '@wordpress/keycodes';\nimport { useSelect, useDispatch } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { isInsideRootBlock } from '../../../utils/dom';\nimport { SelectionStart } from '../../writing-flow';\n\n/** @typedef {import('@wordpress/element').RefObject} RefObject */\n\n/**\n * Adds block behaviour:\n *   - Selects the block if it receives focus.\n *   - Removes the block on BACKSPACE.\n *   - Inserts a default block on ENTER.\n *   - Initiates selection start for multi-selection.\n *   - Disables dragging of block contents.\n *\n * @param {RefObject} ref React ref with the block element.\n * @param {string}    clientId Block client ID.\n */\nexport function useEventHandlers( ref, clientId ) {\n\tconst onSelectionStart = useContext( SelectionStart );\n\tconst { isSelected, rootClientId, index } = useSelect(\n\t\t( select ) => {\n\t\t\tconst {\n\t\t\t\tisBlockSelected,\n\t\t\t\tgetBlockRootClientId,\n\t\t\t\tgetBlockIndex,\n\t\t\t} = select( 'core/block-editor' );\n\n\t\t\treturn {\n\t\t\t\tisSelected: isBlockSelected( clientId ),\n\t\t\t\trootClientId: getBlockRootClientId( clientId ),\n\t\t\t\tindex: getBlockIndex( clientId ),\n\t\t\t};\n\t\t},\n\t\t[ clientId ]\n\t);\n\tconst { insertDefaultBlock, removeBlock, selectBlock } = useDispatch(\n\t\t'core/block-editor'\n\t);\n\n\tuseEffect( () => {\n\t\tif ( ! isSelected ) {\n\t\t\t/**\n\t\t\t * Marks the block as selected when focused and not already\n\t\t\t * selected. This specifically handles the case where block does not\n\t\t\t * set focus on its own (via `setFocus`), typically if there is no\n\t\t\t * focusable input in the block.\n\t\t\t *\n\t\t\t * @param {FocusEvent} event Focus event.\n\t\t\t */\n\t\t\tfunction onFocus( event ) {\n\t\t\t\t// If an inner block is focussed, that block is resposible for\n\t\t\t\t// setting the selected block.\n\t\t\t\tif ( ! isInsideRootBlock( ref.current, event.target ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tselectBlock( clientId );\n\t\t\t}\n\n\t\t\tref.current.addEventListener( 'focusin', onFocus );\n\n\t\t\treturn () => {\n\t\t\t\tref.current.removeEventListener( 'focusin', onFocus );\n\t\t\t};\n\t\t}\n\n\t\t/**\n\t\t * Interprets keydown event intent to remove or insert after block if\n\t\t * key event occurs on wrapper node. This can occur when the block has\n\t\t * no text fields of its own, particularly after initial insertion, to\n\t\t * allow for easy deletion and continuous writing flow to add additional\n\t\t * content.\n\t\t *\n\t\t * @param {KeyboardEvent} event Keydown event.\n\t\t */\n\t\tfunction onKeyDown( event ) {\n\t\t\tconst { keyCode, target } = event;\n\n\t\t\tif (\n\t\t\t\tkeyCode !== ENTER &&\n\t\t\t\tkeyCode !== BACKSPACE &&\n\t\t\t\tkeyCode !== DELETE\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( target !== ref.current || isTextField( target ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( keyCode === ENTER ) {\n\t\t\t\tinsertDefaultBlock( {}, rootClientId, index + 1 );\n\t\t\t} else {\n\t\t\t\tremoveBlock( clientId );\n\t\t\t}\n\t\t}\n\n\t\tfunction onMouseLeave( { buttons } ) {\n\t\t\t// The primary button must be pressed to initiate selection.\n\t\t\t// See https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n\t\t\tif ( buttons === 1 ) {\n\t\t\t\tonSelectionStart( clientId );\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Prevents default dragging behavior within a block. To do: we must\n\t\t * handle this in the future and clean up the drag target.\n\t\t *\n\t\t * @param {DragEvent} event Drag event.\n\t\t */\n\t\tfunction onDragStart( event ) {\n\t\t\tevent.preventDefault();\n\t\t}\n\n\t\tref.current.addEventListener( 'keydown', onKeyDown );\n\t\tref.current.addEventListener( 'mouseleave', onMouseLeave );\n\t\tref.current.addEventListener( 'dragstart', onDragStart );\n\n\t\treturn () => {\n\t\t\tref.current.removeEventListener( 'mouseleave', onMouseLeave );\n\t\t\tref.current.removeEventListener( 'keydown', onKeyDown );\n\t\t\tref.current.removeEventListener( 'dragstart', onDragStart );\n\t\t};\n\t}, [\n\t\tisSelected,\n\t\trootClientId,\n\t\tindex,\n\t\tonSelectionStart,\n\t\tinsertDefaultBlock,\n\t\tremoveBlock,\n\t\tselectBlock,\n\t] );\n}\n"]}