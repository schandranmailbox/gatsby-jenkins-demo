"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useIsHovered = useIsHovered;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _element = require("@wordpress/element");

var _data = require("@wordpress/data");

/**
 * WordPress dependencies
 */

/** @typedef {import('@wordpress/element').RefObject} RefObject */

/**
 * Returns true when the block is hovered and in navigation or outline mode, false if not.
 *
 * @param {RefObject} ref React ref with the block element.
 *
 * @return {boolean} Hovered state.
 */
function useIsHovered(ref) {
  var _useState = (0, _element.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isHovered = _useState2[0],
      setHovered = _useState2[1];

  var _useSelect = (0, _data.useSelect)(function (select) {
    var _select = select('core/block-editor'),
        selectIsNavigationMode = _select.isNavigationMode,
        getSettings = _select.getSettings;

    return {
      isNavigationMode: selectIsNavigationMode(),
      isOutlineMode: getSettings().outlineMode
    };
  }, []),
      isNavigationMode = _useSelect.isNavigationMode,
      isOutlineMode = _useSelect.isOutlineMode;

  (0, _element.useEffect)(function () {
    function addListener(eventType, value) {
      function listener(event) {
        if (event.defaultPrevented) {
          return;
        }

        event.preventDefault();
        setHovered(value);
      }

      ref.current.addEventListener(eventType, listener);
      return function () {
        ref.current.removeEventListener(eventType, listener);
      };
    }

    if (isHovered) {
      return addListener('mouseout', false);
    }

    if (isOutlineMode || isNavigationMode) {
      return addListener('mouseover', true);
    }
  }, [isNavigationMode, isOutlineMode, isHovered, setHovered]);
  return isHovered;
}
//# sourceMappingURL=use-is-hovered.js.map