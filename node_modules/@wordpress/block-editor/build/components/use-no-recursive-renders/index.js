"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useNoRecursiveRenders;

var _element = require("@wordpress/element");

/**
 * WordPress dependencies
 */
var RenderedRefsContext = (0, _element.createContext)(new Set()); // Immutably add to a Set

function add(set, element) {
  var result = new Set(set);
  result.add(element);
  return result;
}
/**
 * A React hook for keeping track of blocks previously rendered up in the block
 * tree. Blocks susceptible to recursiion can use this hook in their `Edit`
 * function to prevent said recursion.
 *
 * @param {*} uniqueId Any value that acts as a unique identifier for a block instance.
 *
 * @return {[boolean, Function]} A tuple of:
 *                               - a boolean describing whether the provided id
 *                                 has already been rendered;
 *                               - a React context provider to be used to wrap
 *                                 other elements.
 */


function useNoRecursiveRenders(uniqueId) {
  var previouslyRenderedBlocks = (0, _element.useContext)(RenderedRefsContext);
  var hasAlreadyRendered = previouslyRenderedBlocks.has(uniqueId);
  var newRenderedBlocks = (0, _element.useMemo)(function () {
    return add(previouslyRenderedBlocks, uniqueId);
  }, [uniqueId, previouslyRenderedBlocks]);
  var Provider = (0, _element.useCallback)(function (_ref) {
    var children = _ref.children;
    return (0, _element.createElement)(RenderedRefsContext.Provider, {
      value: newRenderedBlocks
    }, children);
  }, [newRenderedBlocks]);
  return [hasAlreadyRendered, Provider];
}
//# sourceMappingURL=index.js.map