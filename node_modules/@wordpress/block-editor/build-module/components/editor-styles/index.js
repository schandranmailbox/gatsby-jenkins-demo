/**
 * External dependencies
 */
import { compact, map } from 'lodash';
import tinycolor from 'tinycolor2';
/**
 * WordPress dependencies
 */

import { useCallback, useRef } from '@wordpress/element';
/**
 * Internal dependencies
 */

import transformStyles from '../../utils/transform-styles';

function syncDarkThemeBodyClassname(node) {
  var backgroundColor = window.getComputedStyle(node, null).getPropertyValue('background-color');
  var ownerDocument = node.ownerDocument;
  var body = ownerDocument.getElementsByTagName('body')[0];

  if (tinycolor(backgroundColor).getLuminance() > 0.5) {
    body.classList.remove('is-dark-theme');
  } else {
    body.classList.add('is-dark-theme');
  }
}

export default function useEditorStyles(styles) {
  var nodes = useRef([]);
  return useCallback(function (node) {
    if (!node) {
      nodes.current.forEach(function (styleElement) {
        return styleElement.ownerDocument.body.removeChild(styleElement);
      });
      return;
    }

    var updatedStyles = transformStyles(styles, '.editor-styles-wrapper');
    var ownerDocument = node.ownerDocument;
    nodes.current = map(compact(updatedStyles), function (updatedCSS) {
      var styleElement = ownerDocument.createElement('style');
      styleElement.innerHTML = updatedCSS;
      ownerDocument.body.appendChild(styleElement);
      return styleElement;
    });
    syncDarkThemeBodyClassname(node);
  }, [styles]);
}
//# sourceMappingURL=index.js.map