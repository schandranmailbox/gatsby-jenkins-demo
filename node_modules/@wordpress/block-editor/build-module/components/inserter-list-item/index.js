import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { useMemo, useRef, memo } from '@wordpress/element';
import { Button, __unstableCompositeItem as CompositeItem } from '@wordpress/components';
import { createBlock, createBlocksFromInnerBlocksTemplate } from '@wordpress/blocks';
/**
 * Internal dependencies
 */

import BlockIcon from '../block-icon';
import InserterDraggableBlocks from '../inserter-draggable-blocks';

function InserterListItem(_ref) {
  var className = _ref.className,
      composite = _ref.composite,
      item = _ref.item,
      onSelect = _ref.onSelect,
      onHover = _ref.onHover,
      isDraggable = _ref.isDraggable,
      props = _objectWithoutProperties(_ref, ["className", "composite", "item", "onSelect", "onHover", "isDraggable"]);

  var isDragging = useRef(false);
  var itemIconStyle = item.icon ? {
    backgroundColor: item.icon.background,
    color: item.icon.foreground
  } : {};
  var blocks = useMemo(function () {
    return [createBlock(item.name, item.initialAttributes, createBlocksFromInnerBlocksTemplate(item.innerBlocks))];
  }, [item.name, item.initialAttributes, item.initialAttributes]);
  return createElement(InserterDraggableBlocks, {
    isEnabled: isDraggable && !item.disabled,
    blocks: blocks,
    icon: item.icon
  }, function (_ref2) {
    var draggable = _ref2.draggable,
        _onDragStart = _ref2.onDragStart,
        _onDragEnd = _ref2.onDragEnd;
    return createElement("div", {
      className: "block-editor-block-types-list__list-item",
      draggable: draggable,
      onDragStart: function onDragStart(event) {
        isDragging.current = true;

        if (_onDragStart) {
          onHover(null);

          _onDragStart(event);
        }
      },
      onDragEnd: function onDragEnd(event) {
        isDragging.current = false;

        if (_onDragEnd) {
          _onDragEnd(event);
        }
      }
    }, createElement(CompositeItem, _extends({
      role: "option",
      as: Button
    }, composite, {
      className: classnames('block-editor-block-types-list__item', className),
      disabled: item.isDisabled,
      onClick: function onClick(event) {
        event.preventDefault();
        onSelect(item);
        onHover(null);
      },
      onFocus: function onFocus() {
        if (isDragging.current) {
          return;
        }

        onHover(item);
      },
      onMouseEnter: function onMouseEnter() {
        if (isDragging.current) {
          return;
        }

        onHover(item);
      },
      onMouseLeave: function onMouseLeave() {
        return onHover(null);
      },
      onBlur: function onBlur() {
        return onHover(null);
      } // Use the CompositeItem `focusable` prop over Button's
      // isFocusable. The latter was shown to cause an issue
      // with tab order in the inserter list.
      ,
      focusable: true
    }, props), createElement("span", {
      className: "block-editor-block-types-list__item-icon",
      style: itemIconStyle
    }, createElement(BlockIcon, {
      icon: item.icon,
      showColors: true
    })), createElement("span", {
      className: "block-editor-block-types-list__item-title"
    }, item.title)));
  });
}

export default memo(InserterListItem);
//# sourceMappingURL=index.js.map