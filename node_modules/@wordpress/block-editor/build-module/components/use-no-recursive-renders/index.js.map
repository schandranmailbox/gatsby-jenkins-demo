{"version":3,"sources":["@wordpress/block-editor/src/components/use-no-recursive-renders/index.js"],"names":["createContext","useCallback","useContext","useMemo","RenderedRefsContext","Set","add","set","element","result","useNoRecursiveRenders","uniqueId","previouslyRenderedBlocks","hasAlreadyRendered","has","newRenderedBlocks","Provider","children"],"mappings":";;AAAA;AACA;AACA;AACA,SACCA,aADD,EAECC,WAFD,EAGCC,UAHD,EAICC,OAJD,QAKO,oBALP;AAOA,IAAMC,mBAAmB,GAAGJ,aAAa,CAAE,IAAIK,GAAJ,EAAF,CAAzC,C,CAEA;;AACA,SAASC,GAAT,CAAcC,GAAd,EAAmBC,OAAnB,EAA6B;AAC5B,MAAMC,MAAM,GAAG,IAAIJ,GAAJ,CAASE,GAAT,CAAf;AACAE,EAAAA,MAAM,CAACH,GAAP,CAAYE,OAAZ;AACA,SAAOC,MAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASC,qBAAT,CAAgCC,QAAhC,EAA2C;AACzD,MAAMC,wBAAwB,GAAGV,UAAU,CAAEE,mBAAF,CAA3C;AACA,MAAMS,kBAAkB,GAAGD,wBAAwB,CAACE,GAAzB,CAA8BH,QAA9B,CAA3B;AACA,MAAMI,iBAAiB,GAAGZ,OAAO,CAChC;AAAA,WAAMG,GAAG,CAAEM,wBAAF,EAA4BD,QAA5B,CAAT;AAAA,GADgC,EAEhC,CAAEA,QAAF,EAAYC,wBAAZ,CAFgC,CAAjC;AAIA,MAAMI,QAAQ,GAAGf,WAAW,CAC3B;AAAA,QAAIgB,QAAJ,QAAIA,QAAJ;AAAA,WACC,cAAC,mBAAD,CAAqB,QAArB;AAA8B,MAAA,KAAK,EAAGF;AAAtC,OACGE,QADH,CADD;AAAA,GAD2B,EAM3B,CAAEF,iBAAF,CAN2B,CAA5B;AAQA,SAAO,CAAEF,kBAAF,EAAsBG,QAAtB,CAAP;AACA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport {\n\tcreateContext,\n\tuseCallback,\n\tuseContext,\n\tuseMemo,\n} from '@wordpress/element';\n\nconst RenderedRefsContext = createContext( new Set() );\n\n// Immutably add to a Set\nfunction add( set, element ) {\n\tconst result = new Set( set );\n\tresult.add( element );\n\treturn result;\n}\n\n/**\n * A React hook for keeping track of blocks previously rendered up in the block\n * tree. Blocks susceptible to recursiion can use this hook in their `Edit`\n * function to prevent said recursion.\n *\n * @param {*} uniqueId Any value that acts as a unique identifier for a block instance.\n *\n * @return {[boolean, Function]} A tuple of:\n *                               - a boolean describing whether the provided id\n *                                 has already been rendered;\n *                               - a React context provider to be used to wrap\n *                                 other elements.\n */\nexport default function useNoRecursiveRenders( uniqueId ) {\n\tconst previouslyRenderedBlocks = useContext( RenderedRefsContext );\n\tconst hasAlreadyRendered = previouslyRenderedBlocks.has( uniqueId );\n\tconst newRenderedBlocks = useMemo(\n\t\t() => add( previouslyRenderedBlocks, uniqueId ),\n\t\t[ uniqueId, previouslyRenderedBlocks ]\n\t);\n\tconst Provider = useCallback(\n\t\t( { children } ) => (\n\t\t\t<RenderedRefsContext.Provider value={ newRenderedBlocks }>\n\t\t\t\t{ children }\n\t\t\t</RenderedRefsContext.Provider>\n\t\t),\n\t\t[ newRenderedBlocks ]\n\t);\n\treturn [ hasAlreadyRendered, Provider ];\n}\n"]}