{"version":3,"sources":["@wordpress/block-editor/src/components/block-list/use-block-props/use-is-hovered.js"],"names":["useEffect","useState","useSelect","useIsHovered","ref","isHovered","setHovered","select","selectIsNavigationMode","isNavigationMode","getSettings","isOutlineMode","outlineMode","addListener","eventType","value","listener","event","defaultPrevented","preventDefault","current","addEventListener","removeEventListener"],"mappings":";;AAAA;AACA;AACA;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,oBAApC;AACA,SAASC,SAAT,QAA0B,iBAA1B;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAuBC,GAAvB,EAA6B;AAAA,kBACDH,QAAQ,CAAE,KAAF,CADP;AAAA;AAAA,MAC3BI,SAD2B;AAAA,MAChBC,UADgB;;AAAA,mBAGSJ,SAAS,CAAE,UAAEK,MAAF,EAAc;AAAA,kBAIhEA,MAAM,CAAE,mBAAF,CAJ0D;AAAA,QAEjDC,sBAFiD,WAEnEC,gBAFmE;AAAA,QAGnEC,WAHmE,WAGnEA,WAHmE;;AAMpE,WAAO;AACND,MAAAA,gBAAgB,EAAED,sBAAsB,EADlC;AAENG,MAAAA,aAAa,EAAED,WAAW,GAAGE;AAFvB,KAAP;AAIA,GAVoD,EAUlD,EAVkD,CAHlB;AAAA,MAG3BH,gBAH2B,cAG3BA,gBAH2B;AAAA,MAGTE,aAHS,cAGTA,aAHS;;AAenCX,EAAAA,SAAS,CAAE,YAAM;AAChB,aAASa,WAAT,CAAsBC,SAAtB,EAAiCC,KAAjC,EAAyC;AACxC,eAASC,QAAT,CAAmBC,KAAnB,EAA2B;AAC1B,YAAKA,KAAK,CAACC,gBAAX,EAA8B;AAC7B;AACA;;AAEDD,QAAAA,KAAK,CAACE,cAAN;AACAb,QAAAA,UAAU,CAAES,KAAF,CAAV;AACA;;AAEDX,MAAAA,GAAG,CAACgB,OAAJ,CAAYC,gBAAZ,CAA8BP,SAA9B,EAAyCE,QAAzC;AACA,aAAO,YAAM;AACZZ,QAAAA,GAAG,CAACgB,OAAJ,CAAYE,mBAAZ,CAAiCR,SAAjC,EAA4CE,QAA5C;AACA,OAFD;AAGA;;AAED,QAAKX,SAAL,EAAiB;AAChB,aAAOQ,WAAW,CAAE,UAAF,EAAc,KAAd,CAAlB;AACA;;AAED,QAAKF,aAAa,IAAIF,gBAAtB,EAAyC;AACxC,aAAOI,WAAW,CAAE,WAAF,EAAe,IAAf,CAAlB;AACA;AACD,GAxBQ,EAwBN,CAAEJ,gBAAF,EAAoBE,aAApB,EAAmCN,SAAnC,EAA8CC,UAA9C,CAxBM,CAAT;AA0BA,SAAOD,SAAP;AACA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useEffect, useState } from '@wordpress/element';\nimport { useSelect } from '@wordpress/data';\n\n/** @typedef {import('@wordpress/element').RefObject} RefObject */\n\n/**\n * Returns true when the block is hovered and in navigation or outline mode, false if not.\n *\n * @param {RefObject} ref React ref with the block element.\n *\n * @return {boolean} Hovered state.\n */\nexport function useIsHovered( ref ) {\n\tconst [ isHovered, setHovered ] = useState( false );\n\n\tconst { isNavigationMode, isOutlineMode } = useSelect( ( select ) => {\n\t\tconst {\n\t\t\tisNavigationMode: selectIsNavigationMode,\n\t\t\tgetSettings,\n\t\t} = select( 'core/block-editor' );\n\n\t\treturn {\n\t\t\tisNavigationMode: selectIsNavigationMode(),\n\t\t\tisOutlineMode: getSettings().outlineMode,\n\t\t};\n\t}, [] );\n\n\tuseEffect( () => {\n\t\tfunction addListener( eventType, value ) {\n\t\t\tfunction listener( event ) {\n\t\t\t\tif ( event.defaultPrevented ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tevent.preventDefault();\n\t\t\t\tsetHovered( value );\n\t\t\t}\n\n\t\t\tref.current.addEventListener( eventType, listener );\n\t\t\treturn () => {\n\t\t\t\tref.current.removeEventListener( eventType, listener );\n\t\t\t};\n\t\t}\n\n\t\tif ( isHovered ) {\n\t\t\treturn addListener( 'mouseout', false );\n\t\t}\n\n\t\tif ( isOutlineMode || isNavigationMode ) {\n\t\t\treturn addListener( 'mouseover', true );\n\t\t}\n\t}, [ isNavigationMode, isOutlineMode, isHovered, setHovered ] );\n\n\treturn isHovered;\n}\n"]}