import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { AsyncModeProvider, useSelect } from '@wordpress/data';
import { useRef, createContext, useState } from '@wordpress/element';
/**
 * Internal dependencies
 */

import BlockListBlock from './block';
import BlockListAppender from '../block-list-appender';
import useBlockDropZone from '../use-block-drop-zone';
import useInsertionPoint from './insertion-point';
import BlockPopover from './block-popover';
/**
 * If the block count exceeds the threshold, we disable the reordering animation
 * to avoid laginess.
 */

var BLOCK_ANIMATION_THRESHOLD = 200;
export var BlockNodes = createContext();
export var SetBlockNodes = createContext();
export default function BlockList(_ref) {
  var className = _ref.className;
  var ref = useRef();

  var _useState = useState({}),
      _useState2 = _slicedToArray(_useState, 2),
      blockNodes = _useState2[0],
      setBlockNodes = _useState2[1];

  var insertionPoint = useInsertionPoint(ref);
  return createElement(BlockNodes.Provider, {
    value: blockNodes
  }, insertionPoint, createElement(BlockPopover, null), createElement("div", {
    ref: ref,
    className: classnames('block-editor-block-list__layout is-root-container', className)
  }, createElement(SetBlockNodes.Provider, {
    value: setBlockNodes
  }, createElement(BlockListItems, {
    wrapperRef: ref
  }))));
}

function Items(_ref2) {
  var placeholder = _ref2.placeholder,
      rootClientId = _ref2.rootClientId,
      renderAppender = _ref2.renderAppender,
      __experimentalAppenderTagName = _ref2.__experimentalAppenderTagName,
      wrapperRef = _ref2.wrapperRef;

  function selector(select) {
    var _getBlockListSettings;

    var _select = select('core/block-editor'),
        getBlockOrder = _select.getBlockOrder,
        getBlockListSettings = _select.getBlockListSettings,
        getSettings = _select.getSettings,
        getSelectedBlockClientId = _select.getSelectedBlockClientId,
        getMultiSelectedBlockClientIds = _select.getMultiSelectedBlockClientIds,
        hasMultiSelection = _select.hasMultiSelection,
        getGlobalBlockCount = _select.getGlobalBlockCount,
        isTyping = _select.isTyping,
        __experimentalGetActiveBlockIdByBlockNames = _select.__experimentalGetActiveBlockIdByBlockNames; // Determine if there is an active entity area to spotlight.


    var activeEntityBlockId = __experimentalGetActiveBlockIdByBlockNames(getSettings().__experimentalSpotlightEntityBlocks);

    return {
      blockClientIds: getBlockOrder(rootClientId),
      selectedBlockClientId: getSelectedBlockClientId(),
      multiSelectedBlockClientIds: getMultiSelectedBlockClientIds(),
      orientation: (_getBlockListSettings = getBlockListSettings(rootClientId)) === null || _getBlockListSettings === void 0 ? void 0 : _getBlockListSettings.orientation,
      hasMultiSelection: hasMultiSelection(),
      enableAnimation: !isTyping() && getGlobalBlockCount() <= BLOCK_ANIMATION_THRESHOLD,
      activeEntityBlockId: activeEntityBlockId
    };
  }

  var _useSelect = useSelect(selector, [rootClientId]),
      blockClientIds = _useSelect.blockClientIds,
      selectedBlockClientId = _useSelect.selectedBlockClientId,
      multiSelectedBlockClientIds = _useSelect.multiSelectedBlockClientIds,
      orientation = _useSelect.orientation,
      hasMultiSelection = _useSelect.hasMultiSelection,
      enableAnimation = _useSelect.enableAnimation,
      activeEntityBlockId = _useSelect.activeEntityBlockId;

  var dropTargetIndex = useBlockDropZone({
    element: wrapperRef,
    rootClientId: rootClientId
  });
  var isAppenderDropTarget = dropTargetIndex === blockClientIds.length;
  return createElement(Fragment, null, blockClientIds.map(function (clientId, index) {
    var isBlockInSelection = hasMultiSelection ? multiSelectedBlockClientIds.includes(clientId) : selectedBlockClientId === clientId;
    var isDropTarget = dropTargetIndex === index;
    return createElement(AsyncModeProvider, {
      key: clientId,
      value: !isBlockInSelection
    }, createElement(BlockListBlock, {
      rootClientId: rootClientId,
      clientId: clientId // This prop is explicitely computed and passed down
      // to avoid being impacted by the async mode
      // otherwise there might be a small delay to trigger the animation.
      ,
      index: index,
      enableAnimation: enableAnimation,
      className: classnames({
        'is-drop-target': isDropTarget,
        'is-dropping-horizontally': isDropTarget && orientation === 'horizontal',
        'has-active-entity': activeEntityBlockId
      }),
      activeEntityBlockId: activeEntityBlockId
    }));
  }), blockClientIds.length < 1 && placeholder, createElement(BlockListAppender, {
    tagName: __experimentalAppenderTagName,
    rootClientId: rootClientId,
    renderAppender: renderAppender,
    className: classnames({
      'is-drop-target': isAppenderDropTarget,
      'is-dropping-horizontally': isAppenderDropTarget && orientation === 'horizontal'
    })
  }));
}

export function BlockListItems(props) {
  // This component needs to always be synchronous as it's the one changing
  // the async mode depending on the block selection.
  return createElement(AsyncModeProvider, {
    value: false
  }, createElement(Items, props));
}
//# sourceMappingURL=index.js.map