import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { useMemo } from '@wordpress/element';
import { parse } from '@wordpress/blocks';
import { ENTER, SPACE } from '@wordpress/keycodes';
import { VisuallyHidden } from '@wordpress/components';
import { useInstanceId } from '@wordpress/compose';
/**
 * Internal dependencies
 */

import BlockPreview from '../block-preview';
import InserterDraggableBlocks from '../inserter-draggable-blocks';

function BlockPattern(_ref) {
  var isDraggable = _ref.isDraggable,
      pattern = _ref.pattern,
      _onClick = _ref.onClick;
  var content = pattern.content,
      viewportWidth = pattern.viewportWidth;
  var blocks = useMemo(function () {
    return parse(content);
  }, [content]);
  var instanceId = useInstanceId(BlockPattern);
  var descriptionId = "block-editor-block-patterns-list__item-description-".concat(instanceId);
  return createElement(InserterDraggableBlocks, {
    isEnabled: isDraggable,
    blocks: blocks
  }, function (_ref2) {
    var draggable = _ref2.draggable,
        onDragStart = _ref2.onDragStart,
        onDragEnd = _ref2.onDragEnd;
    return createElement("div", {
      className: "block-editor-block-patterns-list__item",
      role: "button",
      onClick: function onClick() {
        return _onClick(pattern, blocks);
      },
      onKeyDown: function onKeyDown(event) {
        if (ENTER === event.keyCode || SPACE === event.keyCode) {
          _onClick(pattern, blocks);
        }
      },
      tabIndex: 0,
      "aria-label": pattern.title,
      "aria-describedby": pattern.description ? descriptionId : undefined,
      draggable: draggable,
      onDragStart: onDragStart,
      onDragEnd: onDragEnd
    }, createElement(BlockPreview, {
      blocks: blocks,
      viewportWidth: viewportWidth
    }), createElement("div", {
      className: "block-editor-block-patterns-list__item-title"
    }, pattern.title), !!pattern.description && createElement(VisuallyHidden, {
      id: descriptionId
    }, pattern.description));
  });
}

function BlockPatternPlaceholder() {
  return createElement("div", {
    className: "block-editor-block-patterns-list__item is-placeholder"
  });
}

function BlockPatternList(_ref3) {
  var isDraggable = _ref3.isDraggable,
      blockPatterns = _ref3.blockPatterns,
      shownPatterns = _ref3.shownPatterns,
      onClickPattern = _ref3.onClickPattern;
  return blockPatterns.map(function (pattern) {
    var isShown = shownPatterns.includes(pattern);
    return isShown ? createElement(BlockPattern, {
      key: pattern.name,
      pattern: pattern,
      onClick: onClickPattern,
      isDraggable: isDraggable
    }) : createElement(BlockPatternPlaceholder, {
      key: pattern.name
    });
  });
}

export default BlockPatternList;
//# sourceMappingURL=index.js.map