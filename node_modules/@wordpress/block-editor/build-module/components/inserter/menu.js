import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { useState, useCallback, useMemo } from '@wordpress/element';
import { VisuallyHidden } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { useSelect } from '@wordpress/data';
/**
 * Internal dependencies
 */

import Tips from './tips';
import InserterSearchForm from './search-form';
import InserterPreviewPanel from './preview-panel';
import BlockTypesTab from './block-types-tab';
import BlockPatternsTabs from './block-patterns-tab';
import ReusableBlocksTab from './reusable-blocks-tab';
import InserterSearchResults from './search-results';
import useInsertionPoint from './hooks/use-insertion-point';
import InserterTabs from './tabs';

function InserterMenu(_ref) {
  var rootClientId = _ref.rootClientId,
      clientId = _ref.clientId,
      isAppender = _ref.isAppender,
      __experimentalSelectBlockOnInsert = _ref.__experimentalSelectBlockOnInsert,
      __experimentalInsertionIndex = _ref.__experimentalInsertionIndex,
      onSelect = _ref.onSelect,
      showInserterHelpPanel = _ref.showInserterHelpPanel,
      showMostUsedBlocks = _ref.showMostUsedBlocks;

  var _useState = useState(''),
      _useState2 = _slicedToArray(_useState, 2),
      filterValue = _useState2[0],
      setFilterValue = _useState2[1];

  var _useState3 = useState(null),
      _useState4 = _slicedToArray(_useState3, 2),
      hoveredItem = _useState4[0],
      setHoveredItem = _useState4[1];

  var _useState5 = useState(null),
      _useState6 = _slicedToArray(_useState5, 2),
      selectedPatternCategory = _useState6[0],
      setSelectedPatternCategory = _useState6[1];

  var _useInsertionPoint = useInsertionPoint({
    rootClientId: rootClientId,
    clientId: clientId,
    isAppender: isAppender,
    selectBlockOnInsert: __experimentalSelectBlockOnInsert,
    insertionIndex: __experimentalInsertionIndex
  }),
      _useInsertionPoint2 = _slicedToArray(_useInsertionPoint, 3),
      destinationRootClientId = _useInsertionPoint2[0],
      onInsertBlocks = _useInsertionPoint2[1],
      onToggleInsertionPoint = _useInsertionPoint2[2];

  var _useSelect = useSelect(function (select) {
    var _select$getSettings = select('core/block-editor').getSettings(),
        __experimentalBlockPatterns = _select$getSettings.__experimentalBlockPatterns,
        __experimentalReusableBlocks = _select$getSettings.__experimentalReusableBlocks;

    return {
      hasPatterns: !!(__experimentalBlockPatterns !== null && __experimentalBlockPatterns !== void 0 && __experimentalBlockPatterns.length),
      hasReusableBlocks: !!(__experimentalReusableBlocks !== null && __experimentalReusableBlocks !== void 0 && __experimentalReusableBlocks.length)
    };
  }, []),
      hasPatterns = _useSelect.hasPatterns,
      hasReusableBlocks = _useSelect.hasReusableBlocks;

  var showPatterns = !destinationRootClientId && hasPatterns;
  var onInsert = useCallback(function (blocks) {
    onInsertBlocks(blocks);
    onSelect();
  }, [onInsertBlocks, onSelect]);
  var onInsertPattern = useCallback(function (blocks, patternName) {
    onInsertBlocks(blocks, {
      patternName: patternName
    });
    onSelect();
  }, [onInsertBlocks, onSelect]);
  var onHover = useCallback(function (item) {
    onToggleInsertionPoint(!!item);
    setHoveredItem(item);
  }, [onToggleInsertionPoint, setHoveredItem]);
  var onClickPatternCategory = useCallback(function (patternCategory) {
    setSelectedPatternCategory(patternCategory);
  }, [setSelectedPatternCategory]);
  var blocksTab = useMemo(function () {
    return createElement(Fragment, null, createElement("div", {
      className: "block-editor-inserter__block-list"
    }, createElement(BlockTypesTab, {
      rootClientId: destinationRootClientId,
      onInsert: onInsert,
      onHover: onHover,
      showMostUsedBlocks: showMostUsedBlocks
    })), showInserterHelpPanel && createElement("div", {
      className: "block-editor-inserter__tips"
    }, createElement(VisuallyHidden, {
      as: "h2"
    }, __('A tip for using the block editor')), createElement(Tips, null)));
  }, [destinationRootClientId, onInsert, onHover, filterValue, showMostUsedBlocks, showInserterHelpPanel]);
  var patternsTab = useMemo(function () {
    return createElement(BlockPatternsTabs, {
      onInsert: onInsertPattern,
      onClickCategory: onClickPatternCategory,
      selectedCategory: selectedPatternCategory
    });
  }, [onInsertPattern, onClickPatternCategory, selectedPatternCategory]);
  var reusableBlocksTab = useMemo(function () {
    return createElement(ReusableBlocksTab, {
      rootClientId: destinationRootClientId,
      onInsert: onInsert,
      onHover: onHover
    });
  }, [destinationRootClientId, onInsert, onHover]);
  var getCurrentTab = useCallback(function (tab) {
    if (tab.name === 'blocks') {
      return blocksTab;
    } else if (tab.name === 'patterns') {
      return patternsTab;
    }

    return reusableBlocksTab;
  }, [blocksTab, patternsTab, reusableBlocksTab]);
  return createElement("div", {
    className: "block-editor-inserter__menu"
  }, createElement("div", {
    className: "block-editor-inserter__main-area"
  }, createElement("div", {
    className: "block-editor-inserter__content"
  }, createElement(InserterSearchForm, {
    onChange: function onChange(value) {
      if (hoveredItem) setHoveredItem(null);
      setFilterValue(value);
    },
    value: filterValue,
    placeholder: __('Search')
  }), !!filterValue && createElement(InserterSearchResults, {
    filterValue: filterValue,
    onSelect: onSelect,
    onHover: onHover,
    rootClientId: rootClientId,
    clientId: clientId,
    isAppender: isAppender,
    selectBlockOnInsert: __experimentalSelectBlockOnInsert,
    showBlockDirectory: true
  }), !filterValue && (showPatterns || hasReusableBlocks) && createElement(InserterTabs, {
    showPatterns: showPatterns,
    showReusableBlocks: hasReusableBlocks
  }, getCurrentTab), !filterValue && !showPatterns && !hasReusableBlocks && blocksTab)), showInserterHelpPanel && hoveredItem && createElement(InserterPreviewPanel, {
    item: hoveredItem
  }));
}

export default InserterMenu;
//# sourceMappingURL=menu.js.map