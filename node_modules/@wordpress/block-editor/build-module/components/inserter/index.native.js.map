{"version":3,"sources":["@wordpress/block-editor/src/components/inserter/index.native.js"],"names":["AccessibilityInfo","Platform","delay","__","Dropdown","ToolbarButton","Picker","Component","withSelect","compose","withPreferredColorScheme","isUnmodifiedDefaultBlock","Icon","plusCircleFilled","insertAfter","insertBefore","styles","InserterMenu","BlockInsertionPoint","VOICE_OVER_ANNOUNCEMENT_DELAY","defaultRenderToggle","onToggle","disabled","style","onLongPress","color","hint","testID","Inserter","arguments","bind","renderToggle","renderContent","addBeforeOption","value","label","icon","replaceCurrentOption","addAfterOption","addToBeginningOption","addToEndOption","props","isAnyBlockSelected","isSelectedBlockReplaceable","insertionType","insertionIndexDefault","insertionIndexBefore","insertionIndexAfter","isOpen","onInserterToggledAnnouncement","fetch","done","isEnabled","isIOS","OS","announcement","announceForAccessibility","getStylesFromColorScheme","showSeparator","addBlockButton","addBlockButtonDark","onPress","setState","destinationRootClientId","shouldReplaceBlock","insertionIndex","getInsertionIndex","picker","presentPicker","onPickerSelect","instance","getInsertionOptions","onClose","clientId","isAppender","state","select","rootClientId","getBlockRootClientId","getBlockSelectionEnd","getBlockOrder","getBlockIndex","getBlock","end","selectedBlockIndex","endOfRootIndex","length","isSelectedUnmodifiedDefaultBlock","undefined","getDefaultInsertionIndex","getSettings","shouldInsertAtTheTop","__experimentalShouldInsertAtTheTop"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { AccessibilityInfo, Platform } from 'react-native';\nimport { delay } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { Dropdown, ToolbarButton, Picker } from '@wordpress/components';\nimport { Component } from '@wordpress/element';\nimport { withSelect } from '@wordpress/data';\nimport { compose, withPreferredColorScheme } from '@wordpress/compose';\nimport { isUnmodifiedDefaultBlock } from '@wordpress/blocks';\nimport {\n\tIcon,\n\tplusCircleFilled,\n\tinsertAfter,\n\tinsertBefore,\n} from '@wordpress/icons';\n\n/**\n * Internal dependencies\n */\nimport styles from './style.scss';\nimport InserterMenu from './menu';\nimport BlockInsertionPoint from '../block-list/insertion-point';\n\nconst VOICE_OVER_ANNOUNCEMENT_DELAY = 1000;\n\nconst defaultRenderToggle = ( { onToggle, disabled, style, onLongPress } ) => (\n\t<ToolbarButton\n\t\ttitle={ __( 'Add block' ) }\n\t\ticon={\n\t\t\t<Icon\n\t\t\t\ticon={ plusCircleFilled }\n\t\t\t\tstyle={ style }\n\t\t\t\tcolor={ style.color }\n\t\t\t/>\n\t\t}\n\t\tonClick={ onToggle }\n\t\textraProps={ {\n\t\t\thint: __( 'Double tap to add a block' ),\n\t\t\t// testID is present to disambiguate this element for native UI tests. It's not\n\t\t\t// usually required for components. See: https://git.io/JeQ7G.\n\t\t\ttestID: 'add-block-button',\n\t\t\tonLongPress,\n\t\t} }\n\t\tisDisabled={ disabled }\n\t/>\n);\n\nexport class Inserter extends Component {\n\tconstructor() {\n\t\tsuper( ...arguments );\n\n\t\tthis.onToggle = this.onToggle.bind( this );\n\t\tthis.renderToggle = this.renderToggle.bind( this );\n\t\tthis.renderContent = this.renderContent.bind( this );\n\t}\n\n\tgetInsertionOptions() {\n\t\tconst addBeforeOption = {\n\t\t\tvalue: 'before',\n\t\t\tlabel: __( 'Add Block Before' ),\n\t\t\ticon: insertBefore,\n\t\t};\n\n\t\tconst replaceCurrentOption = {\n\t\t\tvalue: 'replace',\n\t\t\tlabel: __( 'Replace Current Block' ),\n\t\t\ticon: plusCircleFilled,\n\t\t};\n\n\t\tconst addAfterOption = {\n\t\t\tvalue: 'after',\n\t\t\tlabel: __( 'Add Block After' ),\n\t\t\ticon: insertAfter,\n\t\t};\n\n\t\tconst addToBeginningOption = {\n\t\t\tvalue: 'before',\n\t\t\tlabel: __( 'Add To Beginning' ),\n\t\t\ticon: insertBefore,\n\t\t};\n\n\t\tconst addToEndOption = {\n\t\t\tvalue: 'after',\n\t\t\tlabel: __( 'Add To End' ),\n\t\t\ticon: insertAfter,\n\t\t};\n\n\t\tconst { isAnyBlockSelected, isSelectedBlockReplaceable } = this.props;\n\t\tif ( isAnyBlockSelected ) {\n\t\t\tif ( isSelectedBlockReplaceable ) {\n\t\t\t\treturn [\n\t\t\t\t\taddBeforeOption,\n\t\t\t\t\treplaceCurrentOption,\n\t\t\t\t\taddAfterOption,\n\t\t\t\t];\n\t\t\t}\n\t\t\treturn [ addBeforeOption, addAfterOption ];\n\t\t}\n\t\treturn [ addToBeginningOption, addToEndOption ];\n\t}\n\n\tgetInsertionIndex( insertionType ) {\n\t\tconst {\n\t\t\tinsertionIndexDefault,\n\t\t\tinsertionIndexBefore,\n\t\t\tinsertionIndexAfter,\n\t\t} = this.props;\n\t\tif ( insertionType === 'before' || insertionType === 'replace' ) {\n\t\t\treturn insertionIndexBefore;\n\t\t}\n\t\tif ( insertionType === 'after' ) {\n\t\t\treturn insertionIndexAfter;\n\t\t}\n\t\treturn insertionIndexDefault;\n\t}\n\n\tshouldReplaceBlock( insertionType ) {\n\t\tconst { isSelectedBlockReplaceable } = this.props;\n\t\tif ( insertionType === 'replace' ) {\n\t\t\treturn true;\n\t\t}\n\t\tif ( insertionType === 'default' && isSelectedBlockReplaceable ) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tonToggle( isOpen ) {\n\t\tconst { onToggle } = this.props;\n\n\t\t// Surface toggle callback to parent component\n\t\tif ( onToggle ) {\n\t\t\tonToggle( isOpen );\n\t\t}\n\t\tthis.onInserterToggledAnnouncement( isOpen );\n\t}\n\n\tonInserterToggledAnnouncement( isOpen ) {\n\t\tAccessibilityInfo.fetch().done( ( isEnabled ) => {\n\t\t\tif ( isEnabled ) {\n\t\t\t\tconst isIOS = Platform.OS === 'ios';\n\t\t\t\tconst announcement = isOpen\n\t\t\t\t\t? __( 'Scrollable block menu opened. Select a block.' )\n\t\t\t\t\t: __( 'Scrollable block menu closed.' );\n\t\t\t\tdelay(\n\t\t\t\t\t() =>\n\t\t\t\t\t\tAccessibilityInfo.announceForAccessibility(\n\t\t\t\t\t\t\tannouncement\n\t\t\t\t\t\t),\n\t\t\t\t\tisIOS ? VOICE_OVER_ANNOUNCEMENT_DELAY : 0\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Render callback to display Dropdown toggle element.\n\t *\n\t * @param {Object}   options\n\t * @param {Function} options.onToggle Callback to invoke when toggle is\n\t *                                    pressed.\n\t * @param {boolean}  options.isOpen   Whether dropdown is currently open.\n\t *\n\t * @return {WPElement} Dropdown toggle element.\n\t */\n\trenderToggle( { onToggle, isOpen } ) {\n\t\tconst {\n\t\t\tdisabled,\n\t\t\trenderToggle = defaultRenderToggle,\n\t\t\tgetStylesFromColorScheme,\n\t\t\tshowSeparator,\n\t\t} = this.props;\n\t\tif ( showSeparator && isOpen ) {\n\t\t\treturn <BlockInsertionPoint />;\n\t\t}\n\t\tconst style = getStylesFromColorScheme(\n\t\t\tstyles.addBlockButton,\n\t\t\tstyles.addBlockButtonDark\n\t\t);\n\n\t\tconst onPress = () => {\n\t\t\tthis.setState(\n\t\t\t\t{\n\t\t\t\t\tdestinationRootClientId: this.props.destinationRootClientId,\n\t\t\t\t\tshouldReplaceBlock: this.shouldReplaceBlock( 'default' ),\n\t\t\t\t\tinsertionIndex: this.getInsertionIndex( 'default' ),\n\t\t\t\t},\n\t\t\t\tonToggle\n\t\t\t);\n\t\t};\n\n\t\tconst onLongPress = () => {\n\t\t\tif ( this.picker ) {\n\t\t\t\tthis.picker.presentPicker();\n\t\t\t}\n\t\t};\n\n\t\tconst onPickerSelect = ( insertionType ) => {\n\t\t\tthis.setState(\n\t\t\t\t{\n\t\t\t\t\tdestinationRootClientId: this.props.destinationRootClientId,\n\t\t\t\t\tshouldReplaceBlock: this.shouldReplaceBlock(\n\t\t\t\t\t\tinsertionType\n\t\t\t\t\t),\n\t\t\t\t\tinsertionIndex: this.getInsertionIndex( insertionType ),\n\t\t\t\t},\n\t\t\t\tonToggle\n\t\t\t);\n\t\t};\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{ renderToggle( {\n\t\t\t\t\tonToggle: onPress,\n\t\t\t\t\tisOpen,\n\t\t\t\t\tdisabled,\n\t\t\t\t\tstyle,\n\t\t\t\t\tonLongPress,\n\t\t\t\t} ) }\n\t\t\t\t<Picker\n\t\t\t\t\tref={ ( instance ) => ( this.picker = instance ) }\n\t\t\t\t\toptions={ this.getInsertionOptions() }\n\t\t\t\t\tonChange={ onPickerSelect }\n\t\t\t\t\thideCancelButton\n\t\t\t\t/>\n\t\t\t</>\n\t\t);\n\t}\n\n\t/**\n\t * Render callback to display Dropdown content element.\n\t *\n\t * @param {Object}   options\n\t * @param {Function} options.onClose Callback to invoke when dropdown is\n\t *                                   closed.\n\t * @param {boolean}  options.isOpen  Whether dropdown is currently open.\n\t *\n\t * @return {WPElement} Dropdown content element.\n\t */\n\trenderContent( { onClose, isOpen } ) {\n\t\tconst { clientId, isAppender } = this.props;\n\t\tconst {\n\t\t\tdestinationRootClientId,\n\t\t\tshouldReplaceBlock,\n\t\t\tinsertionIndex,\n\t\t} = this.state;\n\t\treturn (\n\t\t\t<InserterMenu\n\t\t\t\tisOpen={ isOpen }\n\t\t\t\tonSelect={ onClose }\n\t\t\t\tonDismiss={ onClose }\n\t\t\t\trootClientId={ destinationRootClientId }\n\t\t\t\tclientId={ clientId }\n\t\t\t\tisAppender={ isAppender }\n\t\t\t\tshouldReplaceBlock={ shouldReplaceBlock }\n\t\t\t\tinsertionIndex={ insertionIndex }\n\t\t\t/>\n\t\t);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Dropdown\n\t\t\t\tonToggle={ this.onToggle }\n\t\t\t\theaderTitle={ __( 'Add a block' ) }\n\t\t\t\trenderToggle={ this.renderToggle }\n\t\t\t\trenderContent={ this.renderContent }\n\t\t\t/>\n\t\t);\n\t}\n}\n\nexport default compose( [\n\twithSelect( ( select, { clientId, isAppender, rootClientId } ) => {\n\t\tconst {\n\t\t\tgetBlockRootClientId,\n\t\t\tgetBlockSelectionEnd,\n\t\t\tgetBlockOrder,\n\t\t\tgetBlockIndex,\n\t\t\tgetBlock,\n\t\t} = select( 'core/block-editor' );\n\n\t\tconst end = getBlockSelectionEnd();\n\t\t// `end` argument (id) can refer to the component which is removed\n\t\t// due to pressing `undo` button, that's why we need to check\n\t\t// if `getBlock( end) is valid, otherwise `null` is passed\n\t\tconst isAnyBlockSelected = ! isAppender && end && getBlock( end );\n\t\tconst destinationRootClientId = isAnyBlockSelected\n\t\t\t? getBlockRootClientId( end )\n\t\t\t: rootClientId;\n\t\tconst selectedBlockIndex = getBlockIndex(\n\t\t\tend,\n\t\t\tdestinationRootClientId\n\t\t);\n\t\tconst endOfRootIndex = getBlockOrder( rootClientId ).length;\n\t\tconst isSelectedUnmodifiedDefaultBlock = isAnyBlockSelected\n\t\t\t? isUnmodifiedDefaultBlock( getBlock( end ) )\n\t\t\t: undefined;\n\n\t\tfunction getDefaultInsertionIndex() {\n\t\t\tconst { getSettings } = select( 'core/block-editor' );\n\n\t\t\tconst {\n\t\t\t\t__experimentalShouldInsertAtTheTop: shouldInsertAtTheTop,\n\t\t\t} = getSettings();\n\n\t\t\t// if post title is selected insert as first block\n\t\t\tif ( shouldInsertAtTheTop ) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\t// If the clientId is defined, we insert at the position of the block.\n\t\t\tif ( clientId ) {\n\t\t\t\treturn getBlockIndex( clientId, rootClientId );\n\t\t\t}\n\n\t\t\t// If there is a selected block,\n\t\t\tif ( isAnyBlockSelected ) {\n\t\t\t\t// and the last selected block is unmodified (empty), it will be replaced\n\t\t\t\tif ( isSelectedUnmodifiedDefaultBlock ) {\n\t\t\t\t\treturn selectedBlockIndex;\n\t\t\t\t}\n\n\t\t\t\t// we insert after the selected block.\n\t\t\t\treturn selectedBlockIndex + 1;\n\t\t\t}\n\n\t\t\t// Otherwise, we insert at the end of the current rootClientId\n\t\t\treturn endOfRootIndex;\n\t\t}\n\n\t\tconst insertionIndexBefore = isAnyBlockSelected\n\t\t\t? selectedBlockIndex\n\t\t\t: 0;\n\n\t\tconst insertionIndexAfter = isAnyBlockSelected\n\t\t\t? selectedBlockIndex + 1\n\t\t\t: endOfRootIndex;\n\n\t\treturn {\n\t\t\tdestinationRootClientId,\n\t\t\tinsertionIndexDefault: getDefaultInsertionIndex(),\n\t\t\tinsertionIndexBefore,\n\t\t\tinsertionIndexAfter,\n\t\t\tisAnyBlockSelected,\n\t\t\tisSelectedBlockReplaceable: isSelectedUnmodifiedDefaultBlock,\n\t\t};\n\t} ),\n\n\twithPreferredColorScheme,\n] )( Inserter );\n"]}