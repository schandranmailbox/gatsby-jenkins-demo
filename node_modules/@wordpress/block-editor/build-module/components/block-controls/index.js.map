{"version":3,"sources":["@wordpress/block-editor/src/components/block-controls/index.js"],"names":["isEmpty","useContext","__experimentalToolbarContext","ToolbarContext","createSlotFill","ToolbarGroup","useDisplayBlockControls","Fill","Slot","BlockControlsSlot","props","accessibleToolbarState","BlockControlsFill","controls","children","fillProps","value","BlockControls"],"mappings":";;;AAAA;AACA;AACA;AACA,SAASA,OAAT,QAAwB,QAAxB;AAEA;AACA;AACA;;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SACCC,4BAA4B,IAAIC,cADjC,EAECC,cAFD,EAGCC,YAHD,QAIO,uBAJP;AAMA;AACA;AACA;;AACA,OAAOC,uBAAP,MAAoC,+BAApC;;sBAEuBF,cAAc,CAAE,eAAF,C;IAA7BG,I,mBAAAA,I;IAAMC,I,mBAAAA,I;;AAEd,SAASC,iBAAT,CAA4BC,KAA5B,EAAoC;AACnC,MAAMC,sBAAsB,GAAGV,UAAU,CAAEE,cAAF,CAAzC;AACA,SAAO,cAAC,IAAD,eAAWO,KAAX;AAAmB,IAAA,SAAS,EAAGC;AAA/B,KAAP;AACA;;AAED,SAASC,iBAAT,OAAqD;AAAA,MAAvBC,QAAuB,QAAvBA,QAAuB;AAAA,MAAbC,QAAa,QAAbA,QAAa;;AACpD,MAAK,CAAER,uBAAuB,EAA9B,EAAmC;AAClC,WAAO,IAAP;AACA;;AAED,SACC,cAAC,IAAD,QACG,UAAES,SAAF,EAAiB;AAClB;AACA;AACA;AACA,QAAMC,KAAK,GAAG,CAAEhB,OAAO,CAAEe,SAAF,CAAT,GAAyBA,SAAzB,GAAqC,IAAnD;AACA,WACC,cAAC,cAAD,CAAgB,QAAhB;AAAyB,MAAA,KAAK,EAAGC;AAAjC,OACC,cAAC,YAAD;AAAc,MAAA,QAAQ,EAAGH;AAAzB,MADD,EAEGC,QAFH,CADD;AAMA,GAZF,CADD;AAgBA;;AAED,IAAMG,aAAa,GAAGL,iBAAtB;AAEAK,aAAa,CAACT,IAAd,GAAqBC,iBAArB;AAEA,eAAeQ,aAAf","sourcesContent":["/**\n * External dependencies\n */\nimport { isEmpty } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { useContext } from '@wordpress/element';\nimport {\n\t__experimentalToolbarContext as ToolbarContext,\n\tcreateSlotFill,\n\tToolbarGroup,\n} from '@wordpress/components';\n\n/**\n * Internal dependencies\n */\nimport useDisplayBlockControls from '../use-display-block-controls';\n\nconst { Fill, Slot } = createSlotFill( 'BlockControls' );\n\nfunction BlockControlsSlot( props ) {\n\tconst accessibleToolbarState = useContext( ToolbarContext );\n\treturn <Slot { ...props } fillProps={ accessibleToolbarState } />;\n}\n\nfunction BlockControlsFill( { controls, children } ) {\n\tif ( ! useDisplayBlockControls() ) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<Fill>\n\t\t\t{ ( fillProps ) => {\n\t\t\t\t// Children passed to BlockControlsFill will not have access to any\n\t\t\t\t// React Context whose Provider is part of the BlockControlsSlot tree.\n\t\t\t\t// So we re-create the Provider in this subtree.\n\t\t\t\tconst value = ! isEmpty( fillProps ) ? fillProps : null;\n\t\t\t\treturn (\n\t\t\t\t\t<ToolbarContext.Provider value={ value }>\n\t\t\t\t\t\t<ToolbarGroup controls={ controls } />\n\t\t\t\t\t\t{ children }\n\t\t\t\t\t</ToolbarContext.Provider>\n\t\t\t\t);\n\t\t\t} }\n\t\t</Fill>\n\t);\n}\n\nconst BlockControls = BlockControlsFill;\n\nBlockControls.Slot = BlockControlsSlot;\n\nexport default BlockControls;\n"]}