{"version":3,"sources":["@wordpress/block-editor/src/components/observe-typing/index.js"],"names":["useRef","useEffect","useSelect","useDispatch","isTextField","UP","RIGHT","DOWN","LEFT","ENTER","BACKSPACE","ESCAPE","TAB","KEY_DOWN_ELIGIBLE_KEY_CODES","Set","isKeyDownEligibleForStartTyping","event","keyCode","shiftKey","has","useMouseMoveTypingReset","ref","isTyping","select","stopTyping","element","current","ownerDocument","lastClientX","lastClientY","stopTypingOnMouseMove","clientX","clientY","addEventListener","removeEventListener","useTypingObserver","startTyping","defaultView","timerId","stopTypingOnNonTextField","target","setTimeout","stopTypingOnEscapeKey","stopTypingOnSelectionUncollapse","selection","getSelection","isCollapsed","rangeCount","getRangeAt","collapsed","clearTimeout","startTypingInTextField","type","contains","ObserveTyping","children"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useRef, useEffect } from '@wordpress/element';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { isTextField } from '@wordpress/dom';\nimport {\n\tUP,\n\tRIGHT,\n\tDOWN,\n\tLEFT,\n\tENTER,\n\tBACKSPACE,\n\tESCAPE,\n\tTAB,\n} from '@wordpress/keycodes';\n\n/** @typedef {import('@wordpress/element').RefObject} RefObject */\n\n/**\n * Set of key codes upon which typing is to be initiated on a keydown event.\n *\n * @type {Set<number>}\n */\nconst KEY_DOWN_ELIGIBLE_KEY_CODES = new Set( [\n\tUP,\n\tRIGHT,\n\tDOWN,\n\tLEFT,\n\tENTER,\n\tBACKSPACE,\n] );\n\n/**\n * Returns true if a given keydown event can be inferred as intent to start\n * typing, or false otherwise. A keydown is considered eligible if it is a\n * text navigation without shift active.\n *\n * @param {KeyboardEvent} event Keydown event to test.\n *\n * @return {boolean} Whether event is eligible to start typing.\n */\nfunction isKeyDownEligibleForStartTyping( event ) {\n\tconst { keyCode, shiftKey } = event;\n\treturn ! shiftKey && KEY_DOWN_ELIGIBLE_KEY_CODES.has( keyCode );\n}\n\n/**\n * Removes the `isTyping` flag when the mouse moves in the document of the given\n * element.\n *\n * @param {RefObject} ref React ref containing an element.\n */\nexport function useMouseMoveTypingReset( ref ) {\n\tconst isTyping = useSelect( ( select ) =>\n\t\tselect( 'core/block-editor' ).isTyping()\n\t);\n\tconst { stopTyping } = useDispatch( 'core/block-editor' );\n\n\tuseEffect( () => {\n\t\tif ( ! isTyping ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst element = ref.current;\n\t\tconst { ownerDocument } = element;\n\t\tlet lastClientX;\n\t\tlet lastClientY;\n\n\t\t/**\n\t\t * On mouse move, unset typing flag if user has moved cursor.\n\t\t *\n\t\t * @param {MouseEvent} event Mousemove event.\n\t\t */\n\t\tfunction stopTypingOnMouseMove( event ) {\n\t\t\tconst { clientX, clientY } = event;\n\n\t\t\t// We need to check that the mouse really moved because Safari\n\t\t\t// triggers mousemove events when shift or ctrl are pressed.\n\t\t\tif (\n\t\t\t\tlastClientX &&\n\t\t\t\tlastClientY &&\n\t\t\t\t( lastClientX !== clientX || lastClientY !== clientY )\n\t\t\t) {\n\t\t\t\tstopTyping();\n\t\t\t}\n\n\t\t\tlastClientX = clientX;\n\t\t\tlastClientY = clientY;\n\t\t}\n\n\t\townerDocument.addEventListener( 'mousemove', stopTypingOnMouseMove );\n\n\t\treturn () => {\n\t\t\townerDocument.removeEventListener(\n\t\t\t\t'mousemove',\n\t\t\t\tstopTypingOnMouseMove\n\t\t\t);\n\t\t};\n\t}, [ isTyping, stopTyping ] );\n}\n\n/**\n * Sets and removes the `isTyping` flag based on user actions:\n *\n * - Sets the flag if the user types within the given element.\n * - Removes the flag when the user selects some text, focusses a non-text\n *   field, presses ESC or TAB, or moves the mouse in the document.\n *\n * @param {RefObject} ref React ref containing an element.\n */\nexport function useTypingObserver( ref ) {\n\tconst isTyping = useSelect( ( select ) =>\n\t\tselect( 'core/block-editor' ).isTyping()\n\t);\n\tconst { startTyping, stopTyping } = useDispatch( 'core/block-editor' );\n\n\tuseMouseMoveTypingReset( ref );\n\tuseEffect( () => {\n\t\tconst element = ref.current;\n\t\tconst { ownerDocument } = element;\n\t\tconst { defaultView } = ownerDocument;\n\n\t\t// Listeners to stop typing should only be added when typing.\n\t\t// Listeners to start typing should only be added when not typing.\n\t\tif ( isTyping ) {\n\t\t\tlet timerId;\n\n\t\t\t/**\n\t\t\t * Stops typing when focus transitions to a non-text field element.\n\t\t\t *\n\t\t\t * @param {FocusEvent} event Focus event.\n\t\t\t */\n\t\t\tfunction stopTypingOnNonTextField( event ) {\n\t\t\t\tconst { target } = event;\n\n\t\t\t\t// Since focus to a non-text field via arrow key will trigger\n\t\t\t\t// before the keydown event, wait until after current stack\n\t\t\t\t// before evaluating whether typing is to be stopped. Otherwise,\n\t\t\t\t// typing will re-start.\n\t\t\t\ttimerId = defaultView.setTimeout( () => {\n\t\t\t\t\tif ( ! isTextField( target ) ) {\n\t\t\t\t\t\tstopTyping();\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Unsets typing flag if user presses Escape while typing flag is\n\t\t\t * active.\n\t\t\t *\n\t\t\t * @param {KeyboardEvent} event Keypress or keydown event to\n\t\t\t *                              interpret.\n\t\t\t */\n\t\t\tfunction stopTypingOnEscapeKey( event ) {\n\t\t\t\tconst { keyCode } = event;\n\n\t\t\t\tif ( keyCode === ESCAPE || keyCode === TAB ) {\n\t\t\t\t\tstopTyping();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * On selection change, unset typing flag if user has made an\n\t\t\t * uncollapsed (shift) selection.\n\t\t\t */\n\t\t\tfunction stopTypingOnSelectionUncollapse() {\n\t\t\t\tconst selection = defaultView.getSelection();\n\t\t\t\tconst isCollapsed =\n\t\t\t\t\tselection.rangeCount > 0 &&\n\t\t\t\t\tselection.getRangeAt( 0 ).collapsed;\n\n\t\t\t\tif ( ! isCollapsed ) {\n\t\t\t\t\tstopTyping();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telement.addEventListener( 'focus', stopTypingOnNonTextField );\n\t\t\telement.addEventListener( 'keydown', stopTypingOnEscapeKey );\n\t\t\townerDocument.addEventListener(\n\t\t\t\t'selectionchange',\n\t\t\t\tstopTypingOnSelectionUncollapse\n\t\t\t);\n\n\t\t\treturn () => {\n\t\t\t\tdefaultView.clearTimeout( timerId );\n\t\t\t\telement.removeEventListener(\n\t\t\t\t\t'focus',\n\t\t\t\t\tstopTypingOnNonTextField\n\t\t\t\t);\n\t\t\t\telement.removeEventListener( 'keydown', stopTypingOnEscapeKey );\n\t\t\t\townerDocument.removeEventListener(\n\t\t\t\t\t'selectionchange',\n\t\t\t\t\tstopTypingOnSelectionUncollapse\n\t\t\t\t);\n\t\t\t};\n\t\t}\n\n\t\t/**\n\t\t * Handles a keypress or keydown event to infer intention to start\n\t\t * typing.\n\t\t *\n\t\t * @param {KeyboardEvent} event Keypress or keydown event to interpret.\n\t\t */\n\t\tfunction startTypingInTextField( event ) {\n\t\t\tconst { type, target } = event;\n\n\t\t\t// Abort early if already typing, or key press is incurred outside a\n\t\t\t// text field (e.g. arrow-ing through toolbar buttons).\n\t\t\t// Ignore typing if outside the current DOM container\n\t\t\tif ( ! isTextField( target ) || ! element.contains( target ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Special-case keydown because certain keys do not emit a keypress\n\t\t\t// event. Conversely avoid keydown as the canonical event since\n\t\t\t// there are many keydown which are explicitly not targeted for\n\t\t\t// typing.\n\t\t\tif (\n\t\t\t\ttype === 'keydown' &&\n\t\t\t\t! isKeyDownEligibleForStartTyping( event )\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstartTyping();\n\t\t}\n\n\t\telement.addEventListener( 'keypress', startTypingInTextField );\n\t\telement.addEventListener( 'keydown', startTypingInTextField );\n\n\t\treturn () => {\n\t\t\telement.removeEventListener( 'keypress', startTypingInTextField );\n\t\t\telement.removeEventListener( 'keydown', startTypingInTextField );\n\t\t};\n\t}, [ isTyping, startTyping, stopTyping ] );\n}\n\nfunction ObserveTyping( { children } ) {\n\tconst ref = useRef();\n\tuseTypingObserver( ref );\n\treturn <div ref={ ref }>{ children }</div>;\n}\n\n/**\n * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/observe-typing/README.md\n */\nexport default ObserveTyping;\n"]}