{"version":3,"sources":["@wordpress/core-data/src/resolvers.js"],"names":["getAuthors","__unstableGetAuthor","getCurrentUser","getEntityRecord","getEntityRecords","getCurrentTheme","getThemeSupports","getEmbedPreview","hasUploadPermissions","canUser","getAutosaves","getAutosave","__experimentalGetTemplateForLink","find","includes","get","hasIn","compact","uniq","addQueryArgs","deprecated","controls","apiFetch","regularFetch","receiveUserQuery","receiveCurrentTheme","receiveCurrentUser","receiveEntityRecords","receiveThemeSupports","receiveEmbedPreview","receiveUserPermission","receiveAutosaves","getKindEntities","DEFAULT_ENTITY_KEY","ifNotResolved","getNormalizedCommaSeparable","__unstableAcquireStoreLock","__unstableReleaseStoreLock","query","path","users","id","currentUser","kind","name","key","entities","entity","exclusive","lock","undefined","_fields","join","baseURL","context","include","select","hasRecords","record","getRawEntityRecord","getEditedEntityRecord","Object","records","values","map","split","forEach","field","hasOwnProperty","type","selectorName","args","shouldInvalidate","action","invalidateCache","activeThemes","theme_supports","url","embedProxyResponse","alternative","resource","methods","create","read","update","delete","method","Error","parse","response","allowHeader","headers","isAllowed","postType","postId","resolveSelect","restBase","rest_base","autosaves","length","link","template"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { find, includes, get, hasIn, compact, uniq } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { addQueryArgs } from '@wordpress/url';\nimport deprecated from '@wordpress/deprecated';\nimport { controls } from '@wordpress/data';\nimport { apiFetch } from '@wordpress/data-controls';\n/**\n * Internal dependencies\n */\nimport { regularFetch } from './controls';\n\n/**\n * Internal dependencies\n */\nimport {\n\treceiveUserQuery,\n\treceiveCurrentTheme,\n\treceiveCurrentUser,\n\treceiveEntityRecords,\n\treceiveThemeSupports,\n\treceiveEmbedPreview,\n\treceiveUserPermission,\n\treceiveAutosaves,\n} from './actions';\nimport { getKindEntities, DEFAULT_ENTITY_KEY } from './entities';\nimport { ifNotResolved, getNormalizedCommaSeparable } from './utils';\nimport {\n\t__unstableAcquireStoreLock,\n\t__unstableReleaseStoreLock,\n} from './locks';\n\n/**\n * Requests authors from the REST API.\n *\n * @param {Object|undefined} query Optional object of query parameters to\n *                                 include with request.\n */\nexport function* getAuthors( query ) {\n\tconst path = addQueryArgs(\n\t\t'/wp/v2/users/?who=authors&per_page=100',\n\t\tquery\n\t);\n\tconst users = yield apiFetch( { path } );\n\tyield receiveUserQuery( path, users );\n}\n\n/**\n * Temporary approach to resolving editor access to author queries.\n *\n * @param {number} id The author id.\n */\nexport function* __unstableGetAuthor( id ) {\n\tconst path = `/wp/v2/users?who=authors&include=${ id }`;\n\tconst users = yield apiFetch( { path } );\n\tyield receiveUserQuery( 'author', users );\n}\n\n/**\n * Requests the current user from the REST API.\n */\nexport function* getCurrentUser() {\n\tconst currentUser = yield apiFetch( { path: '/wp/v2/users/me' } );\n\tyield receiveCurrentUser( currentUser );\n}\n\n/**\n * Requests an entity's record from the REST API.\n *\n * @param {string}           kind  Entity kind.\n * @param {string}           name  Entity name.\n * @param {number|string}    key   Record's key\n * @param {Object|undefined} query Optional object of query parameters to\n *                                 include with request.\n */\nexport function* getEntityRecord( kind, name, key = '', query ) {\n\tconst entities = yield getKindEntities( kind );\n\tconst entity = find( entities, { kind, name } );\n\tif ( ! entity ) {\n\t\treturn;\n\t}\n\n\tconst lock = yield* __unstableAcquireStoreLock(\n\t\t'core',\n\t\t[ 'entities', 'data', kind, name, key ],\n\t\t{ exclusive: false }\n\t);\n\ttry {\n\t\tif ( query !== undefined && query._fields ) {\n\t\t\t// If requesting specific fields, items and query assocation to said\n\t\t\t// records are stored by ID reference. Thus, fields must always include\n\t\t\t// the ID.\n\t\t\tquery = {\n\t\t\t\t...query,\n\t\t\t\t_fields: uniq( [\n\t\t\t\t\t...( getNormalizedCommaSeparable( query._fields ) || [] ),\n\t\t\t\t\tentity.key || DEFAULT_ENTITY_KEY,\n\t\t\t\t] ).join(),\n\t\t\t};\n\t\t}\n\n\t\t// Disable reason: While true that an early return could leave `path`\n\t\t// unused, it's important that path is derived using the query prior to\n\t\t// additional query modifications in the condition below, since those\n\t\t// modifications are relevant to how the data is tracked in state, and not\n\t\t// for how the request is made to the REST API.\n\n\t\t// eslint-disable-next-line @wordpress/no-unused-vars-before-return\n\t\tconst path = addQueryArgs( entity.baseURL + '/' + key, {\n\t\t\t...query,\n\t\t\tcontext: 'edit',\n\t\t} );\n\n\t\tif ( query !== undefined ) {\n\t\t\tquery = { ...query, include: [ key ] };\n\n\t\t\t// The resolution cache won't consider query as reusable based on the\n\t\t\t// fields, so it's tested here, prior to initiating the REST request,\n\t\t\t// and without causing `getEntityRecords` resolution to occur.\n\t\t\tconst hasRecords = yield controls.select(\n\t\t\t\t'core',\n\t\t\t\t'hasEntityRecords',\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\tquery\n\t\t\t);\n\t\t\tif ( hasRecords ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst record = yield apiFetch( { path } );\n\t\tyield receiveEntityRecords( kind, name, record, query );\n\t} catch ( error ) {\n\t\t// We need a way to handle and access REST API errors in state\n\t\t// Until then, catching the error ensures the resolver is marked as resolved.\n\t} finally {\n\t\tyield* __unstableReleaseStoreLock( lock );\n\t}\n}\n\n/**\n * Requests an entity's record from the REST API.\n */\nexport const getRawEntityRecord = ifNotResolved(\n\tgetEntityRecord,\n\t'getEntityRecord'\n);\n\n/**\n * Requests an entity's record from the REST API.\n */\nexport const getEditedEntityRecord = ifNotResolved(\n\tgetRawEntityRecord,\n\t'getRawEntityRecord'\n);\n\n/**\n * Requests the entity's records from the REST API.\n *\n * @param {string}  kind   Entity kind.\n * @param {string}  name   Entity name.\n * @param {Object?} query  Query Object.\n */\nexport function* getEntityRecords( kind, name, query = {} ) {\n\tconst entities = yield getKindEntities( kind );\n\tconst entity = find( entities, { kind, name } );\n\tif ( ! entity ) {\n\t\treturn;\n\t}\n\n\tconst lock = yield* __unstableAcquireStoreLock(\n\t\t'core',\n\t\t[ 'entities', 'data', kind, name ],\n\t\t{ exclusive: false }\n\t);\n\ttry {\n\t\tif ( query._fields ) {\n\t\t\t// If requesting specific fields, items and query assocation to said\n\t\t\t// records are stored by ID reference. Thus, fields must always include\n\t\t\t// the ID.\n\t\t\tquery = {\n\t\t\t\t...query,\n\t\t\t\t_fields: uniq( [\n\t\t\t\t\t...( getNormalizedCommaSeparable( query._fields ) || [] ),\n\t\t\t\t\tentity.key || DEFAULT_ENTITY_KEY,\n\t\t\t\t] ).join(),\n\t\t\t};\n\t\t}\n\n\t\tconst path = addQueryArgs( entity.baseURL, {\n\t\t\t...query,\n\t\t\tcontext: 'edit',\n\t\t} );\n\n\t\tlet records = Object.values( yield apiFetch( { path } ) );\n\t\t// If we request fields but the result doesn't contain the fields,\n\t\t// explicitely set these fields as \"undefined\"\n\t\t// that way we consider the query \"fullfilled\".\n\t\tif ( query._fields ) {\n\t\t\trecords = records.map( ( record ) => {\n\t\t\t\tquery._fields.split( ',' ).forEach( ( field ) => {\n\t\t\t\t\tif ( ! record.hasOwnProperty( field ) ) {\n\t\t\t\t\t\trecord[ field ] = undefined;\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\treturn record;\n\t\t\t} );\n\t\t}\n\n\t\tyield receiveEntityRecords( kind, name, records, query );\n\t\t// When requesting all fields, the list of results can be used to\n\t\t// resolve the `getEntityRecord` selector in addition to `getEntityRecords`.\n\t\t// See https://github.com/WordPress/gutenberg/pull/26575\n\t\tif ( ! query?._fields ) {\n\t\t\tconst key = entity.key || DEFAULT_ENTITY_KEY;\n\t\t\tfor ( const record of records ) {\n\t\t\t\tif ( record[ key ] ) {\n\t\t\t\t\tyield {\n\t\t\t\t\t\ttype: 'START_RESOLUTION',\n\t\t\t\t\t\tselectorName: 'getEntityRecord',\n\t\t\t\t\t\targs: [ kind, name, record[ key ] ],\n\t\t\t\t\t};\n\t\t\t\t\tyield {\n\t\t\t\t\t\ttype: 'FINISH_RESOLUTION',\n\t\t\t\t\t\tselectorName: 'getEntityRecord',\n\t\t\t\t\t\targs: [ kind, name, record[ key ] ],\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} finally {\n\t\tyield* __unstableReleaseStoreLock( lock );\n\t}\n}\n\ngetEntityRecords.shouldInvalidate = ( action, kind, name ) => {\n\treturn (\n\t\t( action.type === 'RECEIVE_ITEMS' || action.type === 'REMOVE_ITEMS' ) &&\n\t\taction.invalidateCache &&\n\t\tkind === action.kind &&\n\t\tname === action.name\n\t);\n};\n\n/**\n * Requests the current theme.\n */\nexport function* getCurrentTheme() {\n\tconst activeThemes = yield apiFetch( {\n\t\tpath: '/wp/v2/themes?status=active',\n\t} );\n\tyield receiveCurrentTheme( activeThemes[ 0 ] );\n}\n\n/**\n * Requests theme supports data from the index.\n */\nexport function* getThemeSupports() {\n\tconst activeThemes = yield apiFetch( {\n\t\tpath: '/wp/v2/themes?status=active',\n\t} );\n\tyield receiveThemeSupports( activeThemes[ 0 ].theme_supports );\n}\n\n/**\n * Requests a preview from the from the Embed API.\n *\n * @param {string} url   URL to get the preview for.\n */\nexport function* getEmbedPreview( url ) {\n\ttry {\n\t\tconst embedProxyResponse = yield apiFetch( {\n\t\t\tpath: addQueryArgs( '/oembed/1.0/proxy', { url } ),\n\t\t} );\n\t\tyield receiveEmbedPreview( url, embedProxyResponse );\n\t} catch ( error ) {\n\t\t// Embed API 404s if the URL cannot be embedded, so we have to catch the error from the apiRequest here.\n\t\tyield receiveEmbedPreview( url, false );\n\t}\n}\n\n/**\n * Requests Upload Permissions from the REST API.\n *\n * @deprecated since 5.0. Callers should use the more generic `canUser()` selector instead of\n *            `hasUploadPermissions()`, e.g. `canUser( 'create', 'media' )`.\n */\nexport function* hasUploadPermissions() {\n\tdeprecated( \"select( 'core' ).hasUploadPermissions()\", {\n\t\talternative: \"select( 'core' ).canUser( 'create', 'media' )\",\n\t} );\n\tyield* canUser( 'create', 'media' );\n}\n\n/**\n * Checks whether the current user can perform the given action on the given\n * REST resource.\n *\n * @param {string}  action   Action to check. One of: 'create', 'read', 'update',\n *                           'delete'.\n * @param {string}  resource REST resource to check, e.g. 'media' or 'posts'.\n * @param {?string} id       ID of the rest resource to check.\n */\nexport function* canUser( action, resource, id ) {\n\tconst methods = {\n\t\tcreate: 'POST',\n\t\tread: 'GET',\n\t\tupdate: 'PUT',\n\t\tdelete: 'DELETE',\n\t};\n\n\tconst method = methods[ action ];\n\tif ( ! method ) {\n\t\tthrow new Error( `'${ action }' is not a valid action.` );\n\t}\n\n\tconst path = id ? `/wp/v2/${ resource }/${ id }` : `/wp/v2/${ resource }`;\n\n\tlet response;\n\ttry {\n\t\tresponse = yield apiFetch( {\n\t\t\tpath,\n\t\t\t// Ideally this would always be an OPTIONS request, but unfortunately there's\n\t\t\t// a bug in the REST API which causes the Allow header to not be sent on\n\t\t\t// OPTIONS requests to /posts/:id routes.\n\t\t\t// https://core.trac.wordpress.org/ticket/45753\n\t\t\tmethod: id ? 'GET' : 'OPTIONS',\n\t\t\tparse: false,\n\t\t} );\n\t} catch ( error ) {\n\t\t// Do nothing if our OPTIONS request comes back with an API error (4xx or\n\t\t// 5xx). The previously determined isAllowed value will remain in the store.\n\t\treturn;\n\t}\n\n\tlet allowHeader;\n\tif ( hasIn( response, [ 'headers', 'get' ] ) ) {\n\t\t// If the request is fetched using the fetch api, the header can be\n\t\t// retrieved using the 'get' method.\n\t\tallowHeader = response.headers.get( 'allow' );\n\t} else {\n\t\t// If the request was preloaded server-side and is returned by the\n\t\t// preloading middleware, the header will be a simple property.\n\t\tallowHeader = get( response, [ 'headers', 'Allow' ], '' );\n\t}\n\n\tconst key = compact( [ action, resource, id ] ).join( '/' );\n\tconst isAllowed = includes( allowHeader, method );\n\tyield receiveUserPermission( key, isAllowed );\n}\n\n/**\n * Request autosave data from the REST API.\n *\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n */\nexport function* getAutosaves( postType, postId ) {\n\tconst { rest_base: restBase } = yield controls.resolveSelect(\n\t\t'core',\n\t\t'getPostType',\n\t\tpostType\n\t);\n\tconst autosaves = yield apiFetch( {\n\t\tpath: `/wp/v2/${ restBase }/${ postId }/autosaves?context=edit`,\n\t} );\n\n\tif ( autosaves && autosaves.length ) {\n\t\tyield receiveAutosaves( postId, autosaves );\n\t}\n}\n\n/**\n * Request autosave data from the REST API.\n *\n * This resolver exists to ensure the underlying autosaves are fetched via\n * `getAutosaves` when a call to the `getAutosave` selector is made.\n *\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n */\nexport function* getAutosave( postType, postId ) {\n\tyield controls.resolveSelect( 'core', 'getAutosaves', postType, postId );\n}\n\n/**\n * Retrieve the frontend template used for a given link.\n *\n * @param {string} link  Link.\n */\nexport function* __experimentalGetTemplateForLink( link ) {\n\t// Ideally this should be using an apiFetch call\n\t// We could potentially do so by adding a \"filter\" to the `wp_template` end point.\n\t// Also it seems the returned object is not a regular REST API post type.\n\tconst template = yield regularFetch(\n\t\taddQueryArgs( link, {\n\t\t\t'_wp-find-template': true,\n\t\t} )\n\t);\n\n\tif ( template === null ) {\n\t\treturn;\n\t}\n\n\tyield getEntityRecord( 'postType', 'wp_template', template.id );\n\tconst record = yield controls.select(\n\t\t'core',\n\t\t'getEntityRecord',\n\t\t'postType',\n\t\t'wp_template',\n\t\ttemplate.id\n\t);\n\n\tif ( record ) {\n\t\tyield receiveEntityRecords( 'postType', 'wp_template', [ record ], {\n\t\t\t'find-template': link,\n\t\t} );\n\t}\n}\n"]}