{"version":3,"sources":["@wordpress/core-data/src/selectors.js"],"names":["createSelector","set","map","find","get","filter","compact","defaultTo","createRegistrySelector","deprecated","addQueryArgs","STORE_NAME","getQueriedItems","DEFAULT_ENTITY_KEY","getNormalizedCommaSeparable","EMPTY_ARRAY","isRequestingEmbedPreview","select","state","url","isResolving","getAuthors","query","path","getUserQueryResults","__unstableGetAuthor","id","getCurrentUser","currentUser","queryID","queryResults","users","queries","byId","getEntitiesByKind","kind","entities","config","getEntity","name","getEntityRecord","key","queriedState","data","undefined","itemIsComplete","items","item","_fields","filteredItem","fields","f","length","field","split","value","__experimentalGetEntityRecordNoResolver","getRawEntityRecord","record","Object","keys","reduce","accumulator","_key","hasEntityRecords","Array","isArray","getEntityRecords","__experimentalGetDirtyEntityRecords","dirtyRecords","forEach","primaryKeys","edits","primaryKey","hasEditsForEntityRecord","entity","entityRecord","getEditedEntityRecord","push","title","getTitle","getEntityRecordEdits","recordId","getEntityRecordNonTransientEdits","transientEdits","acc","isSavingEntityRecord","isAutosavingEntityRecord","pending","isAutosave","Boolean","isDeletingEntityRecord","getLastEntitySaveError","getLastEntityDeleteError","getCurrentUndoOffset","undo","offset","getUndoEdit","getRedoEdit","hasUndo","hasRedo","getCurrentTheme","themes","currentTheme","getThemeSupports","themeSupports","getEmbedPreview","embedPreviews","isPreviewEmbedFallback","preview","oEmbedLinkCheck","html","hasUploadPermissions","alternative","canUser","action","resource","join","getAutosaves","postType","postId","autosaves","getAutosave","authorId","author","hasFetchedAutosaves","hasFinishedResolution","getReferenceByDistinctEdits","flattenedUndo","__experimentalGetTemplateForLink","link","records"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport createSelector from 'rememo';\nimport { set, map, find, get, filter, compact, defaultTo } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { createRegistrySelector } from '@wordpress/data';\nimport deprecated from '@wordpress/deprecated';\nimport { addQueryArgs } from '@wordpress/url';\n\n/**\n * Internal dependencies\n */\nimport { STORE_NAME } from './name';\nimport { getQueriedItems } from './queried-data';\nimport { DEFAULT_ENTITY_KEY } from './entities';\nimport { getNormalizedCommaSeparable } from './utils';\n\n/**\n * Shared reference to an empty array for cases where it is important to avoid\n * returning a new array reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n *\n * @type {Array}\n */\nconst EMPTY_ARRAY = [];\n\n/**\n * Returns true if a request is in progress for embed preview data, or false\n * otherwise.\n *\n * @param {Object} state Data state.\n * @param {string} url   URL the preview would be for.\n *\n * @return {boolean} Whether a request is in progress for an embed preview.\n */\nexport const isRequestingEmbedPreview = createRegistrySelector(\n\t( select ) => ( state, url ) => {\n\t\treturn select( 'core/data' ).isResolving(\n\t\t\tSTORE_NAME,\n\t\t\t'getEmbedPreview',\n\t\t\t[ url ]\n\t\t);\n\t}\n);\n\n/**\n * Returns all available authors.\n *\n * @param {Object}           state Data state.\n * @param {Object|undefined} query Optional object of query parameters to\n *                                 include with request.\n * @return {Array} Authors list.\n */\nexport function getAuthors( state, query ) {\n\tconst path = addQueryArgs(\n\t\t'/wp/v2/users/?who=authors&per_page=100',\n\t\tquery\n\t);\n\treturn getUserQueryResults( state, path );\n}\n\n/**\n * Returns all available authors.\n *\n * @param {Object} state Data state.\n * @param {number} id The author id.\n *\n * @return {Array} Authors list.\n */\nexport function __unstableGetAuthor( state, id ) {\n\treturn get( state, [ 'users', 'byId', id ], null );\n}\n\n/**\n * Returns the current user.\n *\n * @param {Object} state Data state.\n *\n * @return {Object} Current user object.\n */\nexport function getCurrentUser( state ) {\n\treturn state.currentUser;\n}\n\n/**\n * Returns all the users returned by a query ID.\n *\n * @param {Object} state   Data state.\n * @param {string} queryID Query ID.\n *\n * @return {Array} Users list.\n */\nexport const getUserQueryResults = createSelector(\n\t( state, queryID ) => {\n\t\tconst queryResults = state.users.queries[ queryID ];\n\n\t\treturn map( queryResults, ( id ) => state.users.byId[ id ] );\n\t},\n\t( state, queryID ) => [ state.users.queries[ queryID ], state.users.byId ]\n);\n\n/**\n * Returns whether the entities for the give kind are loaded.\n *\n * @param {Object} state   Data state.\n * @param {string} kind  Entity kind.\n *\n * @return {boolean} Whether the entities are loaded\n */\nexport function getEntitiesByKind( state, kind ) {\n\treturn filter( state.entities.config, { kind } );\n}\n\n/**\n * Returns the entity object given its kind and name.\n *\n * @param {Object} state   Data state.\n * @param {string} kind  Entity kind.\n * @param {string} name  Entity name.\n *\n * @return {Object} Entity\n */\nexport function getEntity( state, kind, name ) {\n\treturn find( state.entities.config, { kind, name } );\n}\n\n/**\n * Returns the Entity's record object by key. Returns `null` if the value is not\n * yet received, undefined if the value entity is known to not exist, or the\n * entity object if it exists and is received.\n *\n * @param {Object}  state State tree\n * @param {string}  kind  Entity kind.\n * @param {string}  name  Entity name.\n * @param {number}  key   Record's key\n * @param {?Object} query Optional query.\n *\n * @return {Object?} Record.\n */\nexport function getEntityRecord( state, kind, name, key, query ) {\n\tconst queriedState = get( state.entities.data, [\n\t\tkind,\n\t\tname,\n\t\t'queriedData',\n\t] );\n\tif ( ! queriedState ) {\n\t\treturn undefined;\n\t}\n\n\tif ( query === undefined ) {\n\t\t// If expecting a complete item, validate that completeness.\n\t\tif ( ! queriedState.itemIsComplete[ key ] ) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn queriedState.items[ key ];\n\t}\n\n\tconst item = queriedState.items[ key ];\n\tif ( item && query._fields ) {\n\t\tconst filteredItem = {};\n\t\tconst fields = getNormalizedCommaSeparable( query._fields );\n\t\tfor ( let f = 0; f < fields.length; f++ ) {\n\t\t\tconst field = fields[ f ].split( '.' );\n\t\t\tconst value = get( item, field );\n\t\t\tset( filteredItem, field, value );\n\t\t}\n\t\treturn filteredItem;\n\t}\n\n\treturn item;\n}\n\n/**\n * Returns the Entity's record object by key. Doesn't trigger a resolver nor requests the entity from the API if the entity record isn't available in the local state.\n *\n * @param {Object} state  State tree\n * @param {string} kind   Entity kind.\n * @param {string} name   Entity name.\n * @param {number} key    Record's key\n *\n * @return {Object|null} Record.\n */\nexport function __experimentalGetEntityRecordNoResolver(\n\tstate,\n\tkind,\n\tname,\n\tkey\n) {\n\treturn getEntityRecord( state, kind, name, key );\n}\n\n/**\n * Returns the entity's record object by key,\n * with its attributes mapped to their raw values.\n *\n * @param {Object} state  State tree.\n * @param {string} kind   Entity kind.\n * @param {string} name   Entity name.\n * @param {number} key    Record's key.\n *\n * @return {Object?} Object with the entity's raw attributes.\n */\nexport const getRawEntityRecord = createSelector(\n\t( state, kind, name, key ) => {\n\t\tconst record = getEntityRecord( state, kind, name, key );\n\t\treturn (\n\t\t\trecord &&\n\t\t\tObject.keys( record ).reduce( ( accumulator, _key ) => {\n\t\t\t\t// Because edits are the \"raw\" attribute values,\n\t\t\t\t// we return those from record selectors to make rendering,\n\t\t\t\t// comparisons, and joins with edits easier.\n\t\t\t\taccumulator[ _key ] = get(\n\t\t\t\t\trecord[ _key ],\n\t\t\t\t\t'raw',\n\t\t\t\t\trecord[ _key ]\n\t\t\t\t);\n\t\t\t\treturn accumulator;\n\t\t\t}, {} )\n\t\t);\n\t},\n\t( state ) => [ state.entities.data ]\n);\n\n/**\n * Returns true if records have been received for the given set of parameters,\n * or false otherwise.\n *\n * @param {Object}  state State tree\n * @param {string}  kind  Entity kind.\n * @param {string}  name  Entity name.\n * @param {?Object} query Optional terms query.\n *\n * @return {boolean} Whether entity records have been received.\n */\nexport function hasEntityRecords( state, kind, name, query ) {\n\treturn Array.isArray( getEntityRecords( state, kind, name, query ) );\n}\n\n/**\n * Returns the Entity's records.\n *\n * @param {Object}  state State tree\n * @param {string}  kind  Entity kind.\n * @param {string}  name  Entity name.\n * @param {?Object} query Optional terms query.\n *\n * @return {?Array} Records.\n */\nexport function getEntityRecords( state, kind, name, query ) {\n\t// Queried data state is prepopulated for all known entities. If this is not\n\t// assigned for the given parameters, then it is known to not exist. Thus, a\n\t// return value of an empty array is used instead of `null` (where `null` is\n\t// otherwise used to represent an unknown state).\n\tconst queriedState = get( state.entities.data, [\n\t\tkind,\n\t\tname,\n\t\t'queriedData',\n\t] );\n\tif ( ! queriedState ) {\n\t\treturn EMPTY_ARRAY;\n\t}\n\treturn getQueriedItems( queriedState, query );\n}\n\n/**\n * Returns the  list of dirty entity records.\n *\n * @param {Object} state State tree.\n *\n * @return {[{ title: string, key: string, name: string, kind: string }]} The list of updated records\n */\nexport const __experimentalGetDirtyEntityRecords = createSelector(\n\t( state ) => {\n\t\tconst {\n\t\t\tentities: { data },\n\t\t} = state;\n\t\tconst dirtyRecords = [];\n\t\tObject.keys( data ).forEach( ( kind ) => {\n\t\t\tObject.keys( data[ kind ] ).forEach( ( name ) => {\n\t\t\t\tconst primaryKeys = Object.keys(\n\t\t\t\t\tdata[ kind ][ name ].edits\n\t\t\t\t).filter( ( primaryKey ) =>\n\t\t\t\t\thasEditsForEntityRecord( state, kind, name, primaryKey )\n\t\t\t\t);\n\n\t\t\t\tif ( primaryKeys.length ) {\n\t\t\t\t\tconst entity = getEntity( state, kind, name );\n\t\t\t\t\tprimaryKeys.forEach( ( primaryKey ) => {\n\t\t\t\t\t\tconst entityRecord = getEditedEntityRecord(\n\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tprimaryKey\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdirtyRecords.push( {\n\t\t\t\t\t\t\t// We avoid using primaryKey because it's transformed into a string\n\t\t\t\t\t\t\t// when it's used as an object key.\n\t\t\t\t\t\t\tkey:\n\t\t\t\t\t\t\t\tentityRecord[\n\t\t\t\t\t\t\t\t\tentity.key || DEFAULT_ENTITY_KEY\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\ttitle: entity?.getTitle?.( entityRecord ) || '',\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t} );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\n\t\treturn dirtyRecords;\n\t},\n\t( state ) => [ state.entities.data ]\n);\n\n/**\n * Returns the specified entity record's edits.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {Object?} The entity record's edits.\n */\nexport function getEntityRecordEdits( state, kind, name, recordId ) {\n\treturn get( state.entities.data, [ kind, name, 'edits', recordId ] );\n}\n\n/**\n * Returns the specified entity record's non transient edits.\n *\n * Transient edits don't create an undo level, and\n * are not considered for change detection.\n * They are defined in the entity's config.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {Object?} The entity record's non transient edits.\n */\nexport const getEntityRecordNonTransientEdits = createSelector(\n\t( state, kind, name, recordId ) => {\n\t\tconst { transientEdits } = getEntity( state, kind, name ) || {};\n\t\tconst edits = getEntityRecordEdits( state, kind, name, recordId ) || {};\n\t\tif ( ! transientEdits ) {\n\t\t\treturn edits;\n\t\t}\n\t\treturn Object.keys( edits ).reduce( ( acc, key ) => {\n\t\t\tif ( ! transientEdits[ key ] ) {\n\t\t\t\tacc[ key ] = edits[ key ];\n\t\t\t}\n\t\t\treturn acc;\n\t\t}, {} );\n\t},\n\t( state ) => [ state.entities.config, state.entities.data ]\n);\n\n/**\n * Returns true if the specified entity record has edits,\n * and false otherwise.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {boolean} Whether the entity record has edits or not.\n */\nexport function hasEditsForEntityRecord( state, kind, name, recordId ) {\n\treturn (\n\t\tisSavingEntityRecord( state, kind, name, recordId ) ||\n\t\tObject.keys(\n\t\t\tgetEntityRecordNonTransientEdits( state, kind, name, recordId )\n\t\t).length > 0\n\t);\n}\n\n/**\n * Returns the specified entity record, merged with its edits.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {Object?} The entity record, merged with its edits.\n */\nexport const getEditedEntityRecord = createSelector(\n\t( state, kind, name, recordId ) => ( {\n\t\t...getRawEntityRecord( state, kind, name, recordId ),\n\t\t...getEntityRecordEdits( state, kind, name, recordId ),\n\t} ),\n\t( state ) => [ state.entities.data ]\n);\n\n/**\n * Returns true if the specified entity record is autosaving, and false otherwise.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {boolean} Whether the entity record is autosaving or not.\n */\nexport function isAutosavingEntityRecord( state, kind, name, recordId ) {\n\tconst { pending, isAutosave } = get(\n\t\tstate.entities.data,\n\t\t[ kind, name, 'saving', recordId ],\n\t\t{}\n\t);\n\treturn Boolean( pending && isAutosave );\n}\n\n/**\n * Returns true if the specified entity record is saving, and false otherwise.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {boolean} Whether the entity record is saving or not.\n */\nexport function isSavingEntityRecord( state, kind, name, recordId ) {\n\treturn get(\n\t\tstate.entities.data,\n\t\t[ kind, name, 'saving', recordId, 'pending' ],\n\t\tfalse\n\t);\n}\n\n/**\n * Returns true if the specified entity record is deleting, and false otherwise.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {boolean} Whether the entity record is deleting or not.\n */\nexport function isDeletingEntityRecord( state, kind, name, recordId ) {\n\treturn get(\n\t\tstate.entities.data,\n\t\t[ kind, name, 'deleting', recordId, 'pending' ],\n\t\tfalse\n\t);\n}\n\n/**\n * Returns the specified entity record's last save error.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {Object?} The entity record's save error.\n */\nexport function getLastEntitySaveError( state, kind, name, recordId ) {\n\treturn get( state.entities.data, [\n\t\tkind,\n\t\tname,\n\t\t'saving',\n\t\trecordId,\n\t\t'error',\n\t] );\n}\n\n/**\n * Returns the specified entity record's last delete error.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {Object?} The entity record's save error.\n */\nexport function getLastEntityDeleteError( state, kind, name, recordId ) {\n\treturn get( state.entities.data, [\n\t\tkind,\n\t\tname,\n\t\t'deleting',\n\t\trecordId,\n\t\t'error',\n\t] );\n}\n\n/**\n * Returns the current undo offset for the\n * entity records edits history. The offset\n * represents how many items from the end\n * of the history stack we are at. 0 is the\n * last edit, -1 is the second last, and so on.\n *\n * @param {Object} state State tree.\n *\n * @return {number} The current undo offset.\n */\nfunction getCurrentUndoOffset( state ) {\n\treturn state.undo.offset;\n}\n\n/**\n * Returns the previous edit from the current undo offset\n * for the entity records edits history, if any.\n *\n * @param {Object} state State tree.\n *\n * @return {Object?} The edit.\n */\nexport function getUndoEdit( state ) {\n\treturn state.undo[ state.undo.length - 2 + getCurrentUndoOffset( state ) ];\n}\n\n/**\n * Returns the next edit from the current undo offset\n * for the entity records edits history, if any.\n *\n * @param {Object} state State tree.\n *\n * @return {Object?} The edit.\n */\nexport function getRedoEdit( state ) {\n\treturn state.undo[ state.undo.length + getCurrentUndoOffset( state ) ];\n}\n\n/**\n * Returns true if there is a previous edit from the current undo offset\n * for the entity records edits history, and false otherwise.\n *\n * @param {Object} state State tree.\n *\n * @return {boolean} Whether there is a previous edit or not.\n */\nexport function hasUndo( state ) {\n\treturn Boolean( getUndoEdit( state ) );\n}\n\n/**\n * Returns true if there is a next edit from the current undo offset\n * for the entity records edits history, and false otherwise.\n *\n * @param {Object} state State tree.\n *\n * @return {boolean} Whether there is a next edit or not.\n */\nexport function hasRedo( state ) {\n\treturn Boolean( getRedoEdit( state ) );\n}\n\n/**\n * Return the current theme.\n *\n * @param {Object} state Data state.\n *\n * @return {Object}      The current theme.\n */\nexport function getCurrentTheme( state ) {\n\treturn state.themes[ state.currentTheme ];\n}\n\n/**\n * Return theme supports data in the index.\n *\n * @param {Object} state Data state.\n *\n * @return {*}           Index data.\n */\nexport function getThemeSupports( state ) {\n\treturn state.themeSupports;\n}\n\n/**\n * Returns the embed preview for the given URL.\n *\n * @param {Object} state    Data state.\n * @param {string} url      Embedded URL.\n *\n * @return {*} Undefined if the preview has not been fetched, otherwise, the preview fetched from the embed preview API.\n */\nexport function getEmbedPreview( state, url ) {\n\treturn state.embedPreviews[ url ];\n}\n\n/**\n * Determines if the returned preview is an oEmbed link fallback.\n *\n * WordPress can be configured to return a simple link to a URL if it is not embeddable.\n * We need to be able to determine if a URL is embeddable or not, based on what we\n * get back from the oEmbed preview API.\n *\n * @param {Object} state    Data state.\n * @param {string} url      Embedded URL.\n *\n * @return {boolean} Is the preview for the URL an oEmbed link fallback.\n */\nexport function isPreviewEmbedFallback( state, url ) {\n\tconst preview = state.embedPreviews[ url ];\n\tconst oEmbedLinkCheck = '<a href=\"' + url + '\">' + url + '</a>';\n\tif ( ! preview ) {\n\t\treturn false;\n\t}\n\treturn preview.html === oEmbedLinkCheck;\n}\n\n/**\n * Returns whether the current user can upload media.\n *\n * Calling this may trigger an OPTIONS request to the REST API via the\n * `canUser()` resolver.\n *\n * https://developer.wordpress.org/rest-api/reference/\n *\n * @deprecated since 5.0. Callers should use the more generic `canUser()` selector instead of\n *             `hasUploadPermissions()`, e.g. `canUser( 'create', 'media' )`.\n *\n * @param {Object} state Data state.\n *\n * @return {boolean} Whether or not the user can upload media. Defaults to `true` if the OPTIONS\n *                   request is being made.\n */\nexport function hasUploadPermissions( state ) {\n\tdeprecated( \"select( 'core' ).hasUploadPermissions()\", {\n\t\talternative: \"select( 'core' ).canUser( 'create', 'media' )\",\n\t} );\n\treturn defaultTo( canUser( state, 'create', 'media' ), true );\n}\n\n/**\n * Returns whether the current user can perform the given action on the given\n * REST resource.\n *\n * Calling this may trigger an OPTIONS request to the REST API via the\n * `canUser()` resolver.\n *\n * https://developer.wordpress.org/rest-api/reference/\n *\n * @param {Object}   state            Data state.\n * @param {string}   action           Action to check. One of: 'create', 'read', 'update', 'delete'.\n * @param {string}   resource         REST resource to check, e.g. 'media' or 'posts'.\n * @param {string=}  id               Optional ID of the rest resource to check.\n *\n * @return {boolean|undefined} Whether or not the user can perform the action,\n *                             or `undefined` if the OPTIONS request is still being made.\n */\nexport function canUser( state, action, resource, id ) {\n\tconst key = compact( [ action, resource, id ] ).join( '/' );\n\treturn get( state, [ 'userPermissions', key ] );\n}\n\n/**\n * Returns the latest autosaves for the post.\n *\n * May return multiple autosaves since the backend stores one autosave per\n * author for each post.\n *\n * @param {Object} state    State tree.\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n *\n * @return {?Array} An array of autosaves for the post, or undefined if there is none.\n */\nexport function getAutosaves( state, postType, postId ) {\n\treturn state.autosaves[ postId ];\n}\n\n/**\n * Returns the autosave for the post and author.\n *\n * @param {Object} state    State tree.\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n * @param {number} authorId The id of the author.\n *\n * @return {?Object} The autosave for the post and author.\n */\nexport function getAutosave( state, postType, postId, authorId ) {\n\tif ( authorId === undefined ) {\n\t\treturn;\n\t}\n\n\tconst autosaves = state.autosaves[ postId ];\n\treturn find( autosaves, { author: authorId } );\n}\n\n/**\n * Returns true if the REST request for autosaves has completed.\n *\n * @param {Object} state State tree.\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n *\n * @return {boolean} True if the REST request was completed. False otherwise.\n */\nexport const hasFetchedAutosaves = createRegistrySelector(\n\t( select ) => ( state, postType, postId ) => {\n\t\treturn select( STORE_NAME ).hasFinishedResolution( 'getAutosaves', [\n\t\t\tpostType,\n\t\t\tpostId,\n\t\t] );\n\t}\n);\n\n/**\n * Returns a new reference when edited values have changed. This is useful in\n * inferring where an edit has been made between states by comparison of the\n * return values using strict equality.\n *\n * @example\n *\n * ```\n * const hasEditOccurred = (\n *    getReferenceByDistinctEdits( beforeState ) !==\n *    getReferenceByDistinctEdits( afterState )\n * );\n * ```\n *\n * @param {Object} state Editor state.\n *\n * @return {*} A value whose reference will change only when an edit occurs.\n */\nexport const getReferenceByDistinctEdits = createSelector(\n\t() => [],\n\t( state ) => [\n\t\tstate.undo.length,\n\t\tstate.undo.offset,\n\t\tstate.undo.flattenedUndo,\n\t]\n);\n\n/**\n * Retrieve the frontend template used for a given link.\n *\n * @param {Object} state Editor state.\n * @param {string} link  Link.\n *\n * @return {Object?} The template record.\n */\nexport function __experimentalGetTemplateForLink( state, link ) {\n\tconst records = getEntityRecords( state, 'postType', 'wp_template', {\n\t\t'find-template': link,\n\t} );\n\n\treturn records?.length ? records[ 0 ] : null;\n}\n"]}