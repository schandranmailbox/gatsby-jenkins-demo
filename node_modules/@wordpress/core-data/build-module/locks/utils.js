import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

var _marked = /*#__PURE__*/_regeneratorRuntime.mark(iteratePath),
    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(iterateDescendants);

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

export function deepCopyLocksTreePath(tree, path) {
  var newTree = _objectSpread({}, tree);

  var currentNode = newTree;

  var _iterator = _createForOfIteratorHelper(path),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var branchName = _step.value;
      currentNode.children = _objectSpread(_objectSpread({}, currentNode.children), {}, _defineProperty({}, branchName, _objectSpread({
        locks: [],
        children: {}
      }, currentNode.children[branchName])));
      currentNode = currentNode.children[branchName];
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return newTree;
}
export function getNode(tree, path) {
  var currentNode = tree;

  var _iterator2 = _createForOfIteratorHelper(path),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var branchName = _step2.value;
      var nextNode = currentNode.children[branchName];

      if (!nextNode) {
        return null;
      }

      currentNode = nextNode;
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  return currentNode;
}
export function iteratePath(tree, path) {
  var currentNode, _iterator3, _step3, branchName, nextNode;

  return _regeneratorRuntime.wrap(function iteratePath$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          currentNode = tree;
          _context.next = 3;
          return currentNode;

        case 3:
          _iterator3 = _createForOfIteratorHelper(path);
          _context.prev = 4;

          _iterator3.s();

        case 6:
          if ((_step3 = _iterator3.n()).done) {
            _context.next = 16;
            break;
          }

          branchName = _step3.value;
          nextNode = currentNode.children[branchName];

          if (nextNode) {
            _context.next = 11;
            break;
          }

          return _context.abrupt("break", 16);

        case 11:
          _context.next = 13;
          return nextNode;

        case 13:
          currentNode = nextNode;

        case 14:
          _context.next = 6;
          break;

        case 16:
          _context.next = 21;
          break;

        case 18:
          _context.prev = 18;
          _context.t0 = _context["catch"](4);

          _iterator3.e(_context.t0);

        case 21:
          _context.prev = 21;

          _iterator3.f();

          return _context.finish(21);

        case 24:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, null, [[4, 18, 21, 24]]);
}
export function iterateDescendants(node) {
  var stack, childNode;
  return _regeneratorRuntime.wrap(function iterateDescendants$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          stack = Object.values(node.children);

        case 1:
          if (!stack.length) {
            _context2.next = 8;
            break;
          }

          childNode = stack.pop();
          _context2.next = 5;
          return childNode;

        case 5:
          stack.push.apply(stack, _toConsumableArray(Object.values(childNode.children)));
          _context2.next = 1;
          break;

        case 8:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked2);
}
export function hasConflictingLock(_ref, locks) {
  var exclusive = _ref.exclusive;

  if (exclusive && locks.length) {
    return true;
  }

  if (!exclusive && locks.filter(function (lock) {
    return lock.exclusive;
  }).length) {
    return true;
  }

  return false;
}
//# sourceMappingURL=utils.js.map