{"version":3,"sources":["@wordpress/core-data/src/locks/reducer.js"],"names":["getNode","deepCopyLocksTreePath","DEFAULT_STATE","requests","tree","locks","children","state","action","type","request","lock","store","path","storePath","newTree","node","filter","r","l"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,SAASA,OAAT,EAAkBC,qBAAlB,QAA+C,SAA/C;AAEA,IAAMC,aAAa,GAAG;AACrBC,EAAAA,QAAQ,EAAE,EADW;AAErBC,EAAAA,IAAI,EAAE;AACLC,IAAAA,KAAK,EAAE,EADF;AAELC,IAAAA,QAAQ,EAAE;AAFL;AAFe,CAAtB;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASD,KAAT,GAAgD;AAAA,MAAhCE,KAAgC,uEAAxBL,aAAwB;AAAA,MAATM,MAAS;;AACtD,UAASA,MAAM,CAACC,IAAhB;AACC,SAAK,sBAAL;AAA6B;AAAA,YACpBC,OADoB,GACRF,MADQ,CACpBE,OADoB;AAE5B,+CACIH,KADJ;AAECJ,UAAAA,QAAQ,GAAIO,OAAJ,4BAAgBH,KAAK,CAACJ,QAAtB;AAFT;AAIA;;AACD,SAAK,oBAAL;AAA2B;AAAA,YAClBQ,IADkB,GACAH,MADA,CAClBG,IADkB;AAAA,YACZD,QADY,GACAF,MADA,CACZE,OADY;AAAA,YAElBE,KAFkB,GAEFF,QAFE,CAElBE,KAFkB;AAAA,YAEXC,IAFW,GAEFH,QAFE,CAEXG,IAFW;AAG1B,YAAMC,SAAS,IAAKF,KAAL,4BAAeC,IAAf,EAAf;AAEA,YAAME,OAAO,GAAGd,qBAAqB,CAAEM,KAAK,CAACH,IAAR,EAAcU,SAAd,CAArC;AACA,YAAME,IAAI,GAAGhB,OAAO,CAAEe,OAAF,EAAWD,SAAX,CAApB;AACAE,QAAAA,IAAI,CAACX,KAAL,gCAAkBW,IAAI,CAACX,KAAvB,IAA8BM,IAA9B;AAEA,+CACIJ,KADJ;AAECJ,UAAAA,QAAQ,EAAEI,KAAK,CAACJ,QAAN,CAAec,MAAf,CAAuB,UAAEC,CAAF;AAAA,mBAASA,CAAC,KAAKR,QAAf;AAAA,WAAvB,CAFX;AAGCN,UAAAA,IAAI,EAAEW;AAHP;AAKA;;AACD,SAAK,cAAL;AAAqB;AAAA,YACZJ,KADY,GACHH,MADG,CACZG,IADY;;AAEpB,YAAMG,UAAS,IAAKH,KAAI,CAACC,KAAV,4BAAoBD,KAAI,CAACE,IAAzB,EAAf;;AAEA,YAAME,QAAO,GAAGd,qBAAqB,CAAEM,KAAK,CAACH,IAAR,EAAcU,UAAd,CAArC;;AACA,YAAME,KAAI,GAAGhB,OAAO,CAAEe,QAAF,EAAWD,UAAX,CAApB;;AACAE,QAAAA,KAAI,CAACX,KAAL,GAAaW,KAAI,CAACX,KAAL,CAAWY,MAAX,CAAmB,UAAEE,CAAF;AAAA,iBAASA,CAAC,KAAKR,KAAf;AAAA,SAAnB,CAAb;AAEA,+CACIJ,KADJ;AAECH,UAAAA,IAAI,EAAEW;AAFP;AAIA;AAnCF;;AAsCA,SAAOR,KAAP;AACA;AAED,eAAeF,KAAf","sourcesContent":["/**\n * Internal dependencies\n */\nimport { getNode, deepCopyLocksTreePath } from './utils';\n\nconst DEFAULT_STATE = {\n\trequests: [],\n\ttree: {\n\t\tlocks: [],\n\t\tchildren: {},\n\t},\n};\n\n/**\n * Reducer returning locks.\n *\n * @param  {Object} state  Current state.\n * @param  {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function locks( state = DEFAULT_STATE, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'ENQUEUE_LOCK_REQUEST': {\n\t\t\tconst { request } = action;\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\trequests: [ request, ...state.requests ],\n\t\t\t};\n\t\t}\n\t\tcase 'GRANT_LOCK_REQUEST': {\n\t\t\tconst { lock, request } = action;\n\t\t\tconst { store, path } = request;\n\t\t\tconst storePath = [ store, ...path ];\n\n\t\t\tconst newTree = deepCopyLocksTreePath( state.tree, storePath );\n\t\t\tconst node = getNode( newTree, storePath );\n\t\t\tnode.locks = [ ...node.locks, lock ];\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\trequests: state.requests.filter( ( r ) => r !== request ),\n\t\t\t\ttree: newTree,\n\t\t\t};\n\t\t}\n\t\tcase 'RELEASE_LOCK': {\n\t\t\tconst { lock } = action;\n\t\t\tconst storePath = [ lock.store, ...lock.path ];\n\n\t\t\tconst newTree = deepCopyLocksTreePath( state.tree, storePath );\n\t\t\tconst node = getNode( newTree, storePath );\n\t\t\tnode.locks = node.locks.filter( ( l ) => l !== lock );\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttree: newTree,\n\t\t\t};\n\t\t}\n\t}\n\n\treturn state;\n}\n\nexport default locks;\n"]}