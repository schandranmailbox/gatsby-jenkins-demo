{"version":3,"sources":["@wordpress/core-data/src/batch/default-processor.js"],"names":["defaultProcessor","requests","path","method","data","validation","map","request","body","headers","batchResponse","failed","responses","response","error","result","status","output"],"mappings":";;;;;;;;;;;;;AAGA;;AAHA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;SAC8BA,gB;;;;;8FAAf,iBAAiCC,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACc,uBAAU;AACrCC,cAAAA,IAAI,EAAE,WAD+B;AAErCC,cAAAA,MAAM,EAAE,MAF6B;AAGrCC,cAAAA,IAAI,EAAE;AACLC,gBAAAA,UAAU,EAAE,sBADP;AAELJ,gBAAAA,QAAQ,EAAEA,QAAQ,CAACK,GAAT,CAAc,UAAEC,OAAF;AAAA,yBAAiB;AACxCL,oBAAAA,IAAI,EAAEK,OAAO,CAACL,IAD0B;AAExCM,oBAAAA,IAAI,EAAED,OAAO,CAACH,IAF0B;AAEpB;AACpBD,oBAAAA,MAAM,EAAEI,OAAO,CAACJ,MAHwB;AAIxCM,oBAAAA,OAAO,EAAEF,OAAO,CAACE;AAJuB,mBAAjB;AAAA,iBAAd;AAFL;AAH+B,aAAV,CADd;;AAAA;AACRC,YAAAA,aADQ;;AAAA,iBAeTA,aAAa,CAACC,MAfL;AAAA;AAAA;AAAA;;AAAA,6CAgBND,aAAa,CAACE,SAAd,CAAwBN,GAAxB,CAA6B,UAAEO,QAAF;AAAA,qBAAkB;AACrDC,gBAAAA,KAAK,EAAED,QAAF,aAAEA,QAAF,uBAAEA,QAAQ,CAAEL;AADoC,eAAlB;AAAA,aAA7B,CAhBM;;AAAA;AAAA,6CAqBPE,aAAa,CAACE,SAAd,CAAwBN,GAAxB,CAA6B,UAAEO,QAAF,EAAgB;AACnD,kBAAME,MAAM,GAAG,EAAf;;AACA,kBAAKF,QAAQ,CAACG,MAAT,IAAmB,GAAnB,IAA0BH,QAAQ,CAACG,MAAT,GAAkB,GAAjD,EAAuD;AACtDD,gBAAAA,MAAM,CAACE,MAAP,GAAgBJ,QAAQ,CAACL,IAAzB;AACA,eAFD,MAEO;AACNO,gBAAAA,MAAM,CAACD,KAAP,GAAeD,QAAQ,CAACL,IAAxB;AACA;;AACD,qBAAOO,MAAP;AACA,aARM,CArBO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\n\n/**\n * Default batch processor. Sends its input requests to /v1/batch.\n *\n * @param {Array} requests List of API requests to perform at once.\n *\n * @return {Promise} Promise that resolves to a list of objects containing\n *                   either `output` (if that request was succesful) or `error`\n *                   (if not ).\n */\nexport default async function defaultProcessor( requests ) {\n\tconst batchResponse = await apiFetch( {\n\t\tpath: '/v1/batch',\n\t\tmethod: 'POST',\n\t\tdata: {\n\t\t\tvalidation: 'require-all-validate',\n\t\t\trequests: requests.map( ( request ) => ( {\n\t\t\t\tpath: request.path,\n\t\t\t\tbody: request.data, // Rename 'data' to 'body'.\n\t\t\t\tmethod: request.method,\n\t\t\t\theaders: request.headers,\n\t\t\t} ) ),\n\t\t},\n\t} );\n\n\tif ( batchResponse.failed ) {\n\t\treturn batchResponse.responses.map( ( response ) => ( {\n\t\t\terror: response?.body,\n\t\t} ) );\n\t}\n\n\treturn batchResponse.responses.map( ( response ) => {\n\t\tconst result = {};\n\t\tif ( response.status >= 200 && response.status < 300 ) {\n\t\t\tresult.output = response.body;\n\t\t} else {\n\t\t\tresult.error = response.body;\n\t\t}\n\t\treturn result;\n\t} );\n}\n"]}