"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defaultProcessor;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _apiFetch = _interopRequireDefault(require("@wordpress/api-fetch"));

/**
 * WordPress dependencies
 */

/**
 * Default batch processor. Sends its input requests to /v1/batch.
 *
 * @param {Array} requests List of API requests to perform at once.
 *
 * @return {Promise} Promise that resolves to a list of objects containing
 *                   either `output` (if that request was succesful) or `error`
 *                   (if not ).
 */
function defaultProcessor(_x) {
  return _defaultProcessor.apply(this, arguments);
}

function _defaultProcessor() {
  _defaultProcessor = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(requests) {
    var batchResponse;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _apiFetch.default)({
              path: '/v1/batch',
              method: 'POST',
              data: {
                validation: 'require-all-validate',
                requests: requests.map(function (request) {
                  return {
                    path: request.path,
                    body: request.data,
                    // Rename 'data' to 'body'.
                    method: request.method,
                    headers: request.headers
                  };
                })
              }
            });

          case 2:
            batchResponse = _context.sent;

            if (!batchResponse.failed) {
              _context.next = 5;
              break;
            }

            return _context.abrupt("return", batchResponse.responses.map(function (response) {
              return {
                error: response === null || response === void 0 ? void 0 : response.body
              };
            }));

          case 5:
            return _context.abrupt("return", batchResponse.responses.map(function (response) {
              var result = {};

              if (response.status >= 200 && response.status < 300) {
                result.output = response.body;
              } else {
                result.error = response.body;
              }

              return result;
            }));

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _defaultProcessor.apply(this, arguments);
}
//# sourceMappingURL=default-processor.js.map