{"version":3,"sources":["@wordpress/core-data/src/batch/create-batch.js"],"names":["createBatch","processor","defaultProcessor","lastId","queue","pending","ObservableSet","add","inputOrThunk","id","input","Promise","resolve","reject","push","delete","finally","run","size","unsubscribe","subscribe","map","results","length","Error","isSuccess","result","error","output","args","set","Set","subscribers","forEach","subscriber"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { isFunction, zip } from 'lodash';\n\n/**\n * Internal dependencies\n */\nimport defaultProcessor from './default-processor';\n\n/**\n * Creates a batch, which can be used to combine multiple API requests into one\n * API request using the WordPress batch processing API (/v1/batch).\n *\n * ```\n * const batch = createBatch();\n * const dunePromise = batch.add( {\n *   path: '/v1/books',\n *   method: 'POST',\n *   data: { title: 'Dune' }\n * } );\n * const lotrPromise = batch.add( {\n *   path: '/v1/books',\n *   method: 'POST',\n *   data: { title: 'Lord of the Rings' }\n * } );\n * const isSuccess = await batch.run(); // Sends one POST to /v1/batch.\n * if ( isSuccess ) {\n *   console.log(\n *     'Saved two books:',\n *     await dunePromise,\n *     await lotrPromise\n *   );\n * }\n * ```\n *\n * @param {Function} [processor] Processor function. Can be used to replace the\n *                               default functionality which is to send an API\n *                               request to /v1/batch. Is given an array of\n *                               inputs and must return a promise that\n *                               resolves to an array of objects containing\n *                               either `output` or `error`.\n */\nexport default function createBatch( processor = defaultProcessor ) {\n\tlet lastId = 0;\n\tlet queue = [];\n\tconst pending = new ObservableSet();\n\n\treturn {\n\t\t/**\n\t\t * Adds an input to the batch and returns a promise that is resolved or\n\t\t * rejected when the input is processed by `batch.run()`.\n\t\t *\n\t\t * You may also pass a thunk which allows inputs to be added\n\t\t * asychronously.\n\t\t *\n\t\t * ```\n\t\t * // Both are allowed:\n\t\t * batch.add( { path: '/v1/books', ... } );\n\t\t * batch.add( ( add ) => add( { path: '/v1/books', ... } ) );\n\t\t * ```\n\t\t *\n\t\t * If a thunk is passed, `batch.run()` will pause until either:\n\t\t *\n\t\t * - The thunk calls its `add` argument, or;\n\t\t * - The thunk returns a promise and that promise resolves, or;\n\t\t * - The thunk returns a non-promise.\n\t\t *\n\t\t * @param {any|Function} inputOrThunk Input to add or thunk to execute.\n\t\t \n\t\t * @return {Promise|any} If given an input, returns a promise that\n\t\t *                       is resolved or rejected when the batch is\n\t\t *                       processed. If given a thunk, returns the return\n\t\t *                       value of that thunk.\n\t\t */\n\t\tadd( inputOrThunk ) {\n\t\t\tconst id = ++lastId;\n\t\t\tpending.add( id );\n\n\t\t\tconst add = ( input ) =>\n\t\t\t\tnew Promise( ( resolve, reject ) => {\n\t\t\t\t\tqueue.push( {\n\t\t\t\t\t\tinput,\n\t\t\t\t\t\tresolve,\n\t\t\t\t\t\treject,\n\t\t\t\t\t} );\n\t\t\t\t\tpending.delete( id );\n\t\t\t\t} );\n\n\t\t\tif ( isFunction( inputOrThunk ) ) {\n\t\t\t\treturn Promise.resolve( inputOrThunk( add ) ).finally( () => {\n\t\t\t\t\tpending.delete( id );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn add( inputOrThunk );\n\t\t},\n\n\t\t/**\n\t\t * Runs the batch. This calls `batchProcessor` and resolves or rejects\n\t\t * all promises returned by `add()`.\n\t\t *\n\t\t * @return {Promise} A promise that resolves to a boolean that is true\n\t\t *                   if the processor returned no errors.\n\t\t */\n\t\tasync run() {\n\t\t\tif ( pending.size ) {\n\t\t\t\tawait new Promise( ( resolve ) => {\n\t\t\t\t\tconst unsubscribe = pending.subscribe( () => {\n\t\t\t\t\t\tif ( ! pending.size ) {\n\t\t\t\t\t\t\tunsubscribe();\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tlet results;\n\n\t\t\ttry {\n\t\t\t\tresults = await processor(\n\t\t\t\t\tqueue.map( ( { input } ) => input )\n\t\t\t\t);\n\n\t\t\t\tif ( results.length !== queue.length ) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'run: Array returned by processor must be same size as input array.'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} catch ( error ) {\n\t\t\t\tfor ( const { reject } of queue ) {\n\t\t\t\t\treject( error );\n\t\t\t\t}\n\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tlet isSuccess = true;\n\n\t\t\tfor ( const [ result, { resolve, reject } ] of zip(\n\t\t\t\tresults,\n\t\t\t\tqueue\n\t\t\t) ) {\n\t\t\t\tif ( result?.error ) {\n\t\t\t\t\treject( result.error );\n\t\t\t\t\tisSuccess = false;\n\t\t\t\t} else {\n\t\t\t\t\tresolve( result?.output ?? result );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tqueue = [];\n\n\t\t\treturn isSuccess;\n\t\t},\n\t};\n}\n\nclass ObservableSet {\n\tconstructor( ...args ) {\n\t\tthis.set = new Set( ...args );\n\t\tthis.subscribers = new Set();\n\t}\n\n\tget size() {\n\t\treturn this.set.size;\n\t}\n\n\tadd( ...args ) {\n\t\tthis.set.add( ...args );\n\t\tthis.subscribers.forEach( ( subscriber ) => subscriber() );\n\t\treturn this;\n\t}\n\n\tdelete( ...args ) {\n\t\tconst isSuccess = this.set.delete( ...args );\n\t\tthis.subscribers.forEach( ( subscriber ) => subscriber() );\n\t\treturn isSuccess;\n\t}\n\n\tsubscribe( subscriber ) {\n\t\tthis.subscribers.add( subscriber );\n\t\treturn () => {\n\t\t\tthis.subscribers.delete( subscriber );\n\t\t};\n\t}\n}\n"]}