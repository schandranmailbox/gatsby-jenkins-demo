"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.__unstableAcquireStoreLock = __unstableAcquireStoreLock;
exports.__unstableEnqueueLockRequest = __unstableEnqueueLockRequest;
exports.__unstableReleaseStoreLock = __unstableReleaseStoreLock;
exports.__unstableProcessPendingLockRequests = __unstableProcessPendingLockRequests;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _dataControls = require("@wordpress/data-controls");

var _data = require("@wordpress/data");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var _marked = /*#__PURE__*/_regenerator.default.mark(__unstableAcquireStoreLock),
    _marked2 = /*#__PURE__*/_regenerator.default.mark(__unstableEnqueueLockRequest),
    _marked3 = /*#__PURE__*/_regenerator.default.mark(__unstableReleaseStoreLock),
    _marked4 = /*#__PURE__*/_regenerator.default.mark(__unstableProcessPendingLockRequests);

function __unstableAcquireStoreLock(store, path, _ref) {
  var exclusive, promise;
  return _regenerator.default.wrap(function __unstableAcquireStoreLock$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          exclusive = _ref.exclusive;
          return _context.delegateYield(__unstableEnqueueLockRequest(store, path, {
            exclusive: exclusive
          }), "t0", 2);

        case 2:
          promise = _context.t0;
          return _context.delegateYield(__unstableProcessPendingLockRequests(), "t1", 4);

        case 4:
          _context.next = 6;
          return (0, _dataControls.__unstableAwaitPromise)(promise);

        case 6:
          return _context.abrupt("return", _context.sent);

        case 7:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}

function __unstableEnqueueLockRequest(store, path, _ref2) {
  var exclusive, notifyAcquired, promise;
  return _regenerator.default.wrap(function __unstableEnqueueLockRequest$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          exclusive = _ref2.exclusive;
          promise = new Promise(function (resolve) {
            notifyAcquired = resolve;
          });
          _context2.next = 4;
          return {
            type: 'ENQUEUE_LOCK_REQUEST',
            request: {
              store: store,
              path: path,
              exclusive: exclusive,
              notifyAcquired: notifyAcquired
            }
          };

        case 4:
          return _context2.abrupt("return", promise);

        case 5:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked2);
}

function __unstableReleaseStoreLock(lock) {
  return _regenerator.default.wrap(function __unstableReleaseStoreLock$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return {
            type: 'RELEASE_LOCK',
            lock: lock
          };

        case 2:
          return _context3.delegateYield(__unstableProcessPendingLockRequests(), "t0", 3);

        case 3:
        case "end":
          return _context3.stop();
      }
    }
  }, _marked3);
}

function __unstableProcessPendingLockRequests() {
  var lockRequests, _iterator, _step, request, store, path, exclusive, notifyAcquired, isAvailable, lock;

  return _regenerator.default.wrap(function __unstableProcessPendingLockRequests$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          _context4.next = 2;
          return {
            type: 'PROCESS_PENDING_LOCK_REQUESTS'
          };

        case 2:
          _context4.next = 4;
          return _data.controls.select('core', '__unstableGetPendingLockRequests');

        case 4:
          lockRequests = _context4.sent;
          _iterator = _createForOfIteratorHelper(lockRequests);
          _context4.prev = 6;

          _iterator.s();

        case 8:
          if ((_step = _iterator.n()).done) {
            _context4.next = 21;
            break;
          }

          request = _step.value;
          store = request.store, path = request.path, exclusive = request.exclusive, notifyAcquired = request.notifyAcquired;
          _context4.next = 13;
          return _data.controls.select('core', '__unstableIsLockAvailable', store, path, {
            exclusive: exclusive
          });

        case 13:
          isAvailable = _context4.sent;

          if (!isAvailable) {
            _context4.next = 19;
            break;
          }

          lock = {
            store: store,
            path: path,
            exclusive: exclusive
          };
          _context4.next = 18;
          return {
            type: 'GRANT_LOCK_REQUEST',
            lock: lock,
            request: request
          };

        case 18:
          notifyAcquired(lock);

        case 19:
          _context4.next = 8;
          break;

        case 21:
          _context4.next = 26;
          break;

        case 23:
          _context4.prev = 23;
          _context4.t0 = _context4["catch"](6);

          _iterator.e(_context4.t0);

        case 26:
          _context4.prev = 26;

          _iterator.f();

          return _context4.finish(26);

        case 29:
        case "end":
          return _context4.stop();
      }
    }
  }, _marked4, null, [[6, 23, 26, 29]]);
}
//# sourceMappingURL=actions.js.map