"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.locks = locks;
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _utils = require("./utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var DEFAULT_STATE = {
  requests: [],
  tree: {
    locks: [],
    children: {}
  }
};
/**
 * Reducer returning locks.
 *
 * @param  {Object} state  Current state.
 * @param  {Object} action Dispatched action.
 *
 * @return {Object} Updated state.
 */

function locks() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_STATE;
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case 'ENQUEUE_LOCK_REQUEST':
      {
        var request = action.request;
        return _objectSpread(_objectSpread({}, state), {}, {
          requests: [request].concat((0, _toConsumableArray2.default)(state.requests))
        });
      }

    case 'GRANT_LOCK_REQUEST':
      {
        var lock = action.lock,
            _request = action.request;
        var store = _request.store,
            path = _request.path;
        var storePath = [store].concat((0, _toConsumableArray2.default)(path));
        var newTree = (0, _utils.deepCopyLocksTreePath)(state.tree, storePath);
        var node = (0, _utils.getNode)(newTree, storePath);
        node.locks = [].concat((0, _toConsumableArray2.default)(node.locks), [lock]);
        return _objectSpread(_objectSpread({}, state), {}, {
          requests: state.requests.filter(function (r) {
            return r !== _request;
          }),
          tree: newTree
        });
      }

    case 'RELEASE_LOCK':
      {
        var _lock = action.lock;

        var _storePath = [_lock.store].concat((0, _toConsumableArray2.default)(_lock.path));

        var _newTree = (0, _utils.deepCopyLocksTreePath)(state.tree, _storePath);

        var _node = (0, _utils.getNode)(_newTree, _storePath);

        _node.locks = _node.locks.filter(function (l) {
          return l !== _lock;
        });
        return _objectSpread(_objectSpread({}, state), {}, {
          tree: _newTree
        });
      }
  }

  return state;
}

var _default = locks;
exports.default = _default;
//# sourceMappingURL=reducer.js.map