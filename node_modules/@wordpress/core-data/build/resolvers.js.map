{"version":3,"sources":["@wordpress/core-data/src/resolvers.js"],"names":["getAuthors","__unstableGetAuthor","getCurrentUser","getEntityRecord","getEntityRecords","getCurrentTheme","getThemeSupports","getEmbedPreview","hasUploadPermissions","canUser","getAutosaves","getAutosave","__experimentalGetTemplateForLink","query","path","users","id","currentUser","kind","name","key","entities","entity","exclusive","lock","undefined","_fields","DEFAULT_ENTITY_KEY","join","baseURL","context","include","controls","select","hasRecords","record","getRawEntityRecord","getEditedEntityRecord","Object","records","values","map","split","forEach","field","hasOwnProperty","type","selectorName","args","shouldInvalidate","action","invalidateCache","activeThemes","theme_supports","url","embedProxyResponse","alternative","resource","methods","create","read","update","delete","method","Error","parse","response","allowHeader","headers","get","isAllowed","postType","postId","resolveSelect","restBase","rest_base","autosaves","length","link","template"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AAKA;;AACA;;AACA;;AACA;;AAIA;;AAKA;;AAUA;;AACA;;AACA;;;;;;;;;;;;qDAWiBA,U;sDAcAC,mB;sDASAC,c;sDAcAC,e;sDAyFAC,gB;sDAqFAC,e;sDAUAC,gB;sDAYAC,e;sDAkBAC,oB;uDAgBAC,O;uDAsDAC,Y;uDAwBAC,W;uDASAC,gC;;AAxWjB;AACA;AACA;AACA;AACA;AACA;AACO,SAAUZ,UAAV,CAAsBa,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AACAC,UAAAA,IADA,GACO,uBACZ,wCADY,EAEZD,KAFY,CADP;AAAA;AAKQ,iBAAM,4BAAU;AAAEC,YAAAA,IAAI,EAAJA;AAAF,WAAV,CAAN;;AALR;AAKAC,UAAAA,KALA;AAAA;AAMN,iBAAM,+BAAkBD,IAAlB,EAAwBC,KAAxB,CAAN;;AANM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASP;AACA;AACA;AACA;AACA;;;AACO,SAAUd,mBAAV,CAA+Be,EAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AACAF,UAAAA,IADA,8CAC4CE,EAD5C;AAAA;AAEQ,iBAAM,4BAAU;AAAEF,YAAAA,IAAI,EAAJA;AAAF,WAAV,CAAN;;AAFR;AAEAC,UAAAA,KAFA;AAAA;AAGN,iBAAM,+BAAkB,QAAlB,EAA4BA,KAA5B,CAAN;;AAHM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMP;AACA;AACA;;;AACO,SAAUb,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACc,iBAAM,4BAAU;AAAEY,YAAAA,IAAI,EAAE;AAAR,WAAV,CAAN;;AADd;AACAG,UAAAA,WADA;AAAA;AAEN,iBAAM,iCAAoBA,WAApB,CAAN;;AAFM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAAUd,eAAV,CAA2Be,IAA3B,EAAiCC,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuCC,UAAAA,GAAvC,8DAA6C,EAA7C;AAAiDP,UAAAA,KAAjD;AAAA;AACW,iBAAM,+BAAiBK,IAAjB,CAAN;;AADX;AACAG,UAAAA,QADA;AAEAC,UAAAA,MAFA,GAES,kBAAMD,QAAN,EAAgB;AAAEH,YAAAA,IAAI,EAAJA,IAAF;AAAQC,YAAAA,IAAI,EAAJA;AAAR,WAAhB,CAFT;;AAAA,cAGCG,MAHD;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAOO,yCAAO,uCACnB,MADmB,EAEnB,CAAE,UAAF,EAAc,MAAd,EAAsBJ,IAAtB,EAA4BC,IAA5B,EAAkCC,GAAlC,CAFmB,EAGnB;AAAEG,YAAAA,SAAS,EAAE;AAAb,WAHmB,CAAP;;AAPP;AAOAC,UAAAA,IAPA;AAAA;;AAaL,cAAKX,KAAK,KAAKY,SAAV,IAAuBZ,KAAK,CAACa,OAAlC,EAA4C;AAC3C;AACA;AACA;AACAb,YAAAA,KAAK,mCACDA,KADC;AAEJa,cAAAA,OAAO,EAAE,6DACH,wCAA6Bb,KAAK,CAACa,OAAnC,KAAgD,EAD7C,IAERJ,MAAM,CAACF,GAAP,IAAcO,4BAFN,IAGLC,IAHK;AAFL,cAAL;AAOA,WAxBI,CA0BL;AACA;AACA;AACA;AACA;AAEA;;;AACMd,UAAAA,IAjCD,GAiCQ,uBAAcQ,MAAM,CAACO,OAAP,GAAiB,GAAjB,GAAuBT,GAArC,kCACTP,KADS;AAEZiB,YAAAA,OAAO,EAAE;AAFG,aAjCR;;AAAA,gBAsCAjB,KAAK,KAAKY,SAtCV;AAAA;AAAA;AAAA;;AAuCJZ,UAAAA,KAAK,mCAAQA,KAAR;AAAekB,YAAAA,OAAO,EAAE,CAAEX,GAAF;AAAxB,YAAL,CAvCI,CAyCJ;AACA;AACA;;AA3CI;AA4Ce,iBAAMY,eAASC,MAAT,CACxB,MADwB,EAExB,kBAFwB,EAGxBf,IAHwB,EAIxBC,IAJwB,EAKxBN,KALwB,CAAN;;AA5Cf;AA4CEqB,UAAAA,UA5CF;;AAAA,eAmDCA,UAnDD;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAwDU,iBAAM,4BAAU;AAAEpB,YAAAA,IAAI,EAAJA;AAAF,WAAV,CAAN;;AAxDV;AAwDCqB,UAAAA,MAxDD;AAAA;AAyDL,iBAAM,mCAAsBjB,IAAtB,EAA4BC,IAA5B,EAAkCgB,MAAlC,EAA0CtB,KAA1C,CAAN;;AAzDK;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA8DL,yCAAO,uCAA4BW,IAA5B,CAAP;;AA9DK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkEP;AACA;AACA;;;AACO,IAAMY,kBAAkB,GAAG,0BACjCjC,eADiC,EAEjC,iBAFiC,CAA3B;AAKP;AACA;AACA;;;AACO,IAAMkC,qBAAqB,GAAG,0BACpCD,kBADoC,EAEpC,oBAFoC,CAA9B;AAKP;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACO,SAAUhC,gBAAV,CAA4Bc,IAA5B,EAAkCC,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAwCN,UAAAA,KAAxC,8DAAgD,EAAhD;AAAA;AACW,iBAAM,+BAAiBK,IAAjB,CAAN;;AADX;AACAG,UAAAA,QADA;AAEAC,UAAAA,MAFA,GAES,kBAAMD,QAAN,EAAgB;AAAEH,YAAAA,IAAI,EAAJA,IAAF;AAAQC,YAAAA,IAAI,EAAJA;AAAR,WAAhB,CAFT;;AAAA,cAGCG,MAHD;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAOO,yCAAO,uCACnB,MADmB,EAEnB,CAAE,UAAF,EAAc,MAAd,EAAsBJ,IAAtB,EAA4BC,IAA5B,CAFmB,EAGnB;AAAEI,YAAAA,SAAS,EAAE;AAAb,WAHmB,CAAP;;AAPP;AAOAC,UAAAA,IAPA;AAAA;;AAaL,cAAKX,KAAK,CAACa,OAAX,EAAqB;AACpB;AACA;AACA;AACAb,YAAAA,KAAK,mCACDA,KADC;AAEJa,cAAAA,OAAO,EAAE,6DACH,wCAA6Bb,KAAK,CAACa,OAAnC,KAAgD,EAD7C,IAERJ,MAAM,CAACF,GAAP,IAAcO,4BAFN,IAGLC,IAHK;AAFL,cAAL;AAOA;;AAEKd,UAAAA,IA1BD,GA0BQ,uBAAcQ,MAAM,CAACO,OAArB,kCACThB,KADS;AAEZiB,YAAAA,OAAO,EAAE;AAFG,aA1BR;AAAA,yBA+BSQ,MA/BT;AAAA;AA+BwB,iBAAM,4BAAU;AAAExB,YAAAA,IAAI,EAAJA;AAAF,WAAV,CAAN;;AA/BxB;AAAA;AA+BDyB,UAAAA,OA/BC,gBA+BgBC,MA/BhB;;AAgCL;AACA;AACA;AACA,cAAK3B,KAAK,CAACa,OAAX,EAAqB;AACpBa,YAAAA,OAAO,GAAGA,OAAO,CAACE,GAAR,CAAa,UAAEN,MAAF,EAAc;AACpCtB,cAAAA,KAAK,CAACa,OAAN,CAAcgB,KAAd,CAAqB,GAArB,EAA2BC,OAA3B,CAAoC,UAAEC,KAAF,EAAa;AAChD,oBAAK,CAAET,MAAM,CAACU,cAAP,CAAuBD,KAAvB,CAAP,EAAwC;AACvCT,kBAAAA,MAAM,CAAES,KAAF,CAAN,GAAkBnB,SAAlB;AACA;AACD,eAJD;;AAMA,qBAAOU,MAAP;AACA,aARS,CAAV;AASA;;AA7CI;AA+CL,iBAAM,mCAAsBjB,IAAtB,EAA4BC,IAA5B,EAAkCoB,OAAlC,EAA2C1B,KAA3C,CAAN;;AA/CK;AAAA,wBAmDEA,KAnDF,mCAmDE,OAAOa,OAnDT;AAAA;AAAA;AAAA;;AAoDEN,UAAAA,GApDF,GAoDQE,MAAM,CAACF,GAAP,IAAcO,4BApDtB;AAAA,iDAqDkBY,OArDlB;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqDQJ,UAAAA,MArDR;;AAAA,eAsDEA,MAAM,CAAEf,GAAF,CAtDR;AAAA;AAAA;AAAA;;AAAA;AAuDF,iBAAM;AACL0B,YAAAA,IAAI,EAAE,kBADD;AAELC,YAAAA,YAAY,EAAE,iBAFT;AAGLC,YAAAA,IAAI,EAAE,CAAE9B,IAAF,EAAQC,IAAR,EAAcgB,MAAM,CAAEf,GAAF,CAApB;AAHD,WAAN;;AAvDE;AAAA;AA4DF,iBAAM;AACL0B,YAAAA,IAAI,EAAE,mBADD;AAELC,YAAAA,YAAY,EAAE,iBAFT;AAGLC,YAAAA,IAAI,EAAE,CAAE9B,IAAF,EAAQC,IAAR,EAAcgB,MAAM,CAAEf,GAAF,CAApB;AAHD,WAAN;;AA5DE;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAqEL,yCAAO,uCAA4BI,IAA5B,CAAP;;AArEK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAyEPpB,gBAAgB,CAAC6C,gBAAjB,GAAoC,UAAEC,MAAF,EAAUhC,IAAV,EAAgBC,IAAhB,EAA0B;AAC7D,SACC,CAAE+B,MAAM,CAACJ,IAAP,KAAgB,eAAhB,IAAmCI,MAAM,CAACJ,IAAP,KAAgB,cAArD,KACAI,MAAM,CAACC,eADP,IAEAjC,IAAI,KAAKgC,MAAM,CAAChC,IAFhB,IAGAC,IAAI,KAAK+B,MAAM,CAAC/B,IAJjB;AAMA,CAPD;AASA;AACA;AACA;;;AACO,SAAUd,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACe,iBAAM,4BAAU;AACpCS,YAAAA,IAAI,EAAE;AAD8B,WAAV,CAAN;;AADf;AACAsC,UAAAA,YADA;AAAA;AAIN,iBAAM,kCAAqBA,YAAY,CAAE,CAAF,CAAjC,CAAN;;AAJM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOP;AACA;AACA;;;AACO,SAAU9C,gBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACe,iBAAM,4BAAU;AACpCQ,YAAAA,IAAI,EAAE;AAD8B,WAAV,CAAN;;AADf;AACAsC,UAAAA,YADA;AAAA;AAIN,iBAAM,mCAAsBA,YAAY,CAAE,CAAF,CAAZ,CAAkBC,cAAxC,CAAN;;AAJM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOP;AACA;AACA;AACA;AACA;;;AACO,SAAU9C,eAAV,CAA2B+C,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEsB,iBAAM,4BAAU;AAC1CxC,YAAAA,IAAI,EAAE,uBAAc,mBAAd,EAAmC;AAAEwC,cAAAA,GAAG,EAAHA;AAAF,aAAnC;AADoC,WAAV,CAAN;;AAFtB;AAECC,UAAAA,kBAFD;AAAA;AAKL,iBAAM,kCAAqBD,GAArB,EAA0BC,kBAA1B,CAAN;;AALK;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQL,iBAAM,kCAAqBD,GAArB,EAA0B,KAA1B,CAAN;;AARK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYP;AACA;AACA;AACA;AACA;AACA;;;AACO,SAAU9C,oBAAV;AAAA;AAAA;AAAA;AAAA;AACN,mCAAY,yCAAZ,EAAuD;AACtDgD,YAAAA,WAAW,EAAE;AADyC,WAAvD;AAGA,yCAAO/C,OAAO,CAAE,QAAF,EAAY,OAAZ,CAAd;;AAJM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAAUA,OAAV,CAAmByC,MAAnB,EAA2BO,QAA3B,EAAqCzC,EAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AACA0C,UAAAA,OADA,GACU;AACfC,YAAAA,MAAM,EAAE,MADO;AAEfC,YAAAA,IAAI,EAAE,KAFS;AAGfC,YAAAA,MAAM,EAAE,KAHO;AAIfC,YAAAA,MAAM,EAAE;AAJO,WADV;AAQAC,UAAAA,MARA,GAQSL,OAAO,CAAER,MAAF,CARhB;;AAAA,cASCa,MATD;AAAA;AAAA;AAAA;;AAAA,gBAUC,IAAIC,KAAJ,YAAgBd,MAAhB,8BAVD;;AAAA;AAaApC,UAAAA,IAbA,GAaOE,EAAE,oBAAcyC,QAAd,cAA4BzC,EAA5B,qBAA+CyC,QAA/C,CAbT;AAAA;AAAA;AAiBM,iBAAM,4BAAU;AAC1B3C,YAAAA,IAAI,EAAJA,IAD0B;AAE1B;AACA;AACA;AACA;AACAiD,YAAAA,MAAM,EAAE/C,EAAE,GAAG,KAAH,GAAW,SANK;AAO1BiD,YAAAA,KAAK,EAAE;AAPmB,WAAV,CAAN;;AAjBN;AAiBLC,UAAAA,QAjBK;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAiCN,cAAK,mBAAOA,QAAP,EAAiB,CAAE,SAAF,EAAa,KAAb,CAAjB,CAAL,EAA+C;AAC9C;AACA;AACAC,YAAAA,WAAW,GAAGD,QAAQ,CAACE,OAAT,CAAiBC,GAAjB,CAAsB,OAAtB,CAAd;AACA,WAJD,MAIO;AACN;AACA;AACAF,YAAAA,WAAW,GAAG,iBAAKD,QAAL,EAAe,CAAE,SAAF,EAAa,OAAb,CAAf,EAAuC,EAAvC,CAAd;AACA;;AAEK9C,UAAAA,GA3CA,GA2CM,qBAAS,CAAE8B,MAAF,EAAUO,QAAV,EAAoBzC,EAApB,CAAT,EAAoCY,IAApC,CAA0C,GAA1C,CA3CN;AA4CA0C,UAAAA,SA5CA,GA4CY,sBAAUH,WAAV,EAAuBJ,MAAvB,CA5CZ;AAAA;AA6CN,iBAAM,oCAAuB3C,GAAvB,EAA4BkD,SAA5B,CAAN;;AA7CM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgDP;AACA;AACA;AACA;AACA;AACA;;;AACO,SAAU5D,YAAV,CAAwB6D,QAAxB,EAAkCC,MAAlC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAC0B,iBAAMxC,eAASyC,aAAT,CACrC,MADqC,EAErC,aAFqC,EAGrCF,QAHqC,CAAN;;AAD1B;AAAA;AACaG,UAAAA,QADb,yBACEC,SADF;AAAA;AAMY,iBAAM,4BAAU;AACjC7D,YAAAA,IAAI,mBAAa4D,QAAb,cAA2BF,MAA3B;AAD6B,WAAV,CAAN;;AANZ;AAMAI,UAAAA,SANA;;AAAA,gBAUDA,SAAS,IAAIA,SAAS,CAACC,MAVtB;AAAA;AAAA;AAAA;;AAAA;AAWL,iBAAM,+BAAkBL,MAAlB,EAA0BI,SAA1B,CAAN;;AAXK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAAUjE,WAAV,CAAuB4D,QAAvB,EAAiCC,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AACN,iBAAMxC,eAASyC,aAAT,CAAwB,MAAxB,EAAgC,cAAhC,EAAgDF,QAAhD,EAA0DC,MAA1D,CAAN;;AADM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIP;AACA;AACA;AACA;AACA;;;AACO,SAAU5D,gCAAV,CAA4CkE,IAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIW,iBAAM,4BACtB,uBAAcA,IAAd,EAAoB;AACnB,iCAAqB;AADF,WAApB,CADsB,CAAN;;AAJX;AAIAC,UAAAA,QAJA;;AAAA,gBAUDA,QAAQ,KAAK,IAVZ;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAcN,iBAAM5E,eAAe,CAAE,UAAF,EAAc,aAAd,EAA6B4E,QAAQ,CAAC/D,EAAtC,CAArB;;AAdM;AAAA;AAeS,iBAAMgB,eAASC,MAAT,CACpB,MADoB,EAEpB,iBAFoB,EAGpB,UAHoB,EAIpB,aAJoB,EAKpB8C,QAAQ,CAAC/D,EALW,CAAN;;AAfT;AAeAmB,UAAAA,MAfA;;AAAA,eAuBDA,MAvBC;AAAA;AAAA;AAAA;;AAAA;AAwBL,iBAAM,mCAAsB,UAAtB,EAAkC,aAAlC,EAAiD,CAAEA,MAAF,CAAjD,EAA6D;AAClE,6BAAiB2C;AADiD,WAA7D,CAAN;;AAxBK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["/**\n * External dependencies\n */\nimport { find, includes, get, hasIn, compact, uniq } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { addQueryArgs } from '@wordpress/url';\nimport deprecated from '@wordpress/deprecated';\nimport { controls } from '@wordpress/data';\nimport { apiFetch } from '@wordpress/data-controls';\n/**\n * Internal dependencies\n */\nimport { regularFetch } from './controls';\n\n/**\n * Internal dependencies\n */\nimport {\n\treceiveUserQuery,\n\treceiveCurrentTheme,\n\treceiveCurrentUser,\n\treceiveEntityRecords,\n\treceiveThemeSupports,\n\treceiveEmbedPreview,\n\treceiveUserPermission,\n\treceiveAutosaves,\n} from './actions';\nimport { getKindEntities, DEFAULT_ENTITY_KEY } from './entities';\nimport { ifNotResolved, getNormalizedCommaSeparable } from './utils';\nimport {\n\t__unstableAcquireStoreLock,\n\t__unstableReleaseStoreLock,\n} from './locks';\n\n/**\n * Requests authors from the REST API.\n *\n * @param {Object|undefined} query Optional object of query parameters to\n *                                 include with request.\n */\nexport function* getAuthors( query ) {\n\tconst path = addQueryArgs(\n\t\t'/wp/v2/users/?who=authors&per_page=100',\n\t\tquery\n\t);\n\tconst users = yield apiFetch( { path } );\n\tyield receiveUserQuery( path, users );\n}\n\n/**\n * Temporary approach to resolving editor access to author queries.\n *\n * @param {number} id The author id.\n */\nexport function* __unstableGetAuthor( id ) {\n\tconst path = `/wp/v2/users?who=authors&include=${ id }`;\n\tconst users = yield apiFetch( { path } );\n\tyield receiveUserQuery( 'author', users );\n}\n\n/**\n * Requests the current user from the REST API.\n */\nexport function* getCurrentUser() {\n\tconst currentUser = yield apiFetch( { path: '/wp/v2/users/me' } );\n\tyield receiveCurrentUser( currentUser );\n}\n\n/**\n * Requests an entity's record from the REST API.\n *\n * @param {string}           kind  Entity kind.\n * @param {string}           name  Entity name.\n * @param {number|string}    key   Record's key\n * @param {Object|undefined} query Optional object of query parameters to\n *                                 include with request.\n */\nexport function* getEntityRecord( kind, name, key = '', query ) {\n\tconst entities = yield getKindEntities( kind );\n\tconst entity = find( entities, { kind, name } );\n\tif ( ! entity ) {\n\t\treturn;\n\t}\n\n\tconst lock = yield* __unstableAcquireStoreLock(\n\t\t'core',\n\t\t[ 'entities', 'data', kind, name, key ],\n\t\t{ exclusive: false }\n\t);\n\ttry {\n\t\tif ( query !== undefined && query._fields ) {\n\t\t\t// If requesting specific fields, items and query assocation to said\n\t\t\t// records are stored by ID reference. Thus, fields must always include\n\t\t\t// the ID.\n\t\t\tquery = {\n\t\t\t\t...query,\n\t\t\t\t_fields: uniq( [\n\t\t\t\t\t...( getNormalizedCommaSeparable( query._fields ) || [] ),\n\t\t\t\t\tentity.key || DEFAULT_ENTITY_KEY,\n\t\t\t\t] ).join(),\n\t\t\t};\n\t\t}\n\n\t\t// Disable reason: While true that an early return could leave `path`\n\t\t// unused, it's important that path is derived using the query prior to\n\t\t// additional query modifications in the condition below, since those\n\t\t// modifications are relevant to how the data is tracked in state, and not\n\t\t// for how the request is made to the REST API.\n\n\t\t// eslint-disable-next-line @wordpress/no-unused-vars-before-return\n\t\tconst path = addQueryArgs( entity.baseURL + '/' + key, {\n\t\t\t...query,\n\t\t\tcontext: 'edit',\n\t\t} );\n\n\t\tif ( query !== undefined ) {\n\t\t\tquery = { ...query, include: [ key ] };\n\n\t\t\t// The resolution cache won't consider query as reusable based on the\n\t\t\t// fields, so it's tested here, prior to initiating the REST request,\n\t\t\t// and without causing `getEntityRecords` resolution to occur.\n\t\t\tconst hasRecords = yield controls.select(\n\t\t\t\t'core',\n\t\t\t\t'hasEntityRecords',\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\tquery\n\t\t\t);\n\t\t\tif ( hasRecords ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst record = yield apiFetch( { path } );\n\t\tyield receiveEntityRecords( kind, name, record, query );\n\t} catch ( error ) {\n\t\t// We need a way to handle and access REST API errors in state\n\t\t// Until then, catching the error ensures the resolver is marked as resolved.\n\t} finally {\n\t\tyield* __unstableReleaseStoreLock( lock );\n\t}\n}\n\n/**\n * Requests an entity's record from the REST API.\n */\nexport const getRawEntityRecord = ifNotResolved(\n\tgetEntityRecord,\n\t'getEntityRecord'\n);\n\n/**\n * Requests an entity's record from the REST API.\n */\nexport const getEditedEntityRecord = ifNotResolved(\n\tgetRawEntityRecord,\n\t'getRawEntityRecord'\n);\n\n/**\n * Requests the entity's records from the REST API.\n *\n * @param {string}  kind   Entity kind.\n * @param {string}  name   Entity name.\n * @param {Object?} query  Query Object.\n */\nexport function* getEntityRecords( kind, name, query = {} ) {\n\tconst entities = yield getKindEntities( kind );\n\tconst entity = find( entities, { kind, name } );\n\tif ( ! entity ) {\n\t\treturn;\n\t}\n\n\tconst lock = yield* __unstableAcquireStoreLock(\n\t\t'core',\n\t\t[ 'entities', 'data', kind, name ],\n\t\t{ exclusive: false }\n\t);\n\ttry {\n\t\tif ( query._fields ) {\n\t\t\t// If requesting specific fields, items and query assocation to said\n\t\t\t// records are stored by ID reference. Thus, fields must always include\n\t\t\t// the ID.\n\t\t\tquery = {\n\t\t\t\t...query,\n\t\t\t\t_fields: uniq( [\n\t\t\t\t\t...( getNormalizedCommaSeparable( query._fields ) || [] ),\n\t\t\t\t\tentity.key || DEFAULT_ENTITY_KEY,\n\t\t\t\t] ).join(),\n\t\t\t};\n\t\t}\n\n\t\tconst path = addQueryArgs( entity.baseURL, {\n\t\t\t...query,\n\t\t\tcontext: 'edit',\n\t\t} );\n\n\t\tlet records = Object.values( yield apiFetch( { path } ) );\n\t\t// If we request fields but the result doesn't contain the fields,\n\t\t// explicitely set these fields as \"undefined\"\n\t\t// that way we consider the query \"fullfilled\".\n\t\tif ( query._fields ) {\n\t\t\trecords = records.map( ( record ) => {\n\t\t\t\tquery._fields.split( ',' ).forEach( ( field ) => {\n\t\t\t\t\tif ( ! record.hasOwnProperty( field ) ) {\n\t\t\t\t\t\trecord[ field ] = undefined;\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\treturn record;\n\t\t\t} );\n\t\t}\n\n\t\tyield receiveEntityRecords( kind, name, records, query );\n\t\t// When requesting all fields, the list of results can be used to\n\t\t// resolve the `getEntityRecord` selector in addition to `getEntityRecords`.\n\t\t// See https://github.com/WordPress/gutenberg/pull/26575\n\t\tif ( ! query?._fields ) {\n\t\t\tconst key = entity.key || DEFAULT_ENTITY_KEY;\n\t\t\tfor ( const record of records ) {\n\t\t\t\tif ( record[ key ] ) {\n\t\t\t\t\tyield {\n\t\t\t\t\t\ttype: 'START_RESOLUTION',\n\t\t\t\t\t\tselectorName: 'getEntityRecord',\n\t\t\t\t\t\targs: [ kind, name, record[ key ] ],\n\t\t\t\t\t};\n\t\t\t\t\tyield {\n\t\t\t\t\t\ttype: 'FINISH_RESOLUTION',\n\t\t\t\t\t\tselectorName: 'getEntityRecord',\n\t\t\t\t\t\targs: [ kind, name, record[ key ] ],\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} finally {\n\t\tyield* __unstableReleaseStoreLock( lock );\n\t}\n}\n\ngetEntityRecords.shouldInvalidate = ( action, kind, name ) => {\n\treturn (\n\t\t( action.type === 'RECEIVE_ITEMS' || action.type === 'REMOVE_ITEMS' ) &&\n\t\taction.invalidateCache &&\n\t\tkind === action.kind &&\n\t\tname === action.name\n\t);\n};\n\n/**\n * Requests the current theme.\n */\nexport function* getCurrentTheme() {\n\tconst activeThemes = yield apiFetch( {\n\t\tpath: '/wp/v2/themes?status=active',\n\t} );\n\tyield receiveCurrentTheme( activeThemes[ 0 ] );\n}\n\n/**\n * Requests theme supports data from the index.\n */\nexport function* getThemeSupports() {\n\tconst activeThemes = yield apiFetch( {\n\t\tpath: '/wp/v2/themes?status=active',\n\t} );\n\tyield receiveThemeSupports( activeThemes[ 0 ].theme_supports );\n}\n\n/**\n * Requests a preview from the from the Embed API.\n *\n * @param {string} url   URL to get the preview for.\n */\nexport function* getEmbedPreview( url ) {\n\ttry {\n\t\tconst embedProxyResponse = yield apiFetch( {\n\t\t\tpath: addQueryArgs( '/oembed/1.0/proxy', { url } ),\n\t\t} );\n\t\tyield receiveEmbedPreview( url, embedProxyResponse );\n\t} catch ( error ) {\n\t\t// Embed API 404s if the URL cannot be embedded, so we have to catch the error from the apiRequest here.\n\t\tyield receiveEmbedPreview( url, false );\n\t}\n}\n\n/**\n * Requests Upload Permissions from the REST API.\n *\n * @deprecated since 5.0. Callers should use the more generic `canUser()` selector instead of\n *            `hasUploadPermissions()`, e.g. `canUser( 'create', 'media' )`.\n */\nexport function* hasUploadPermissions() {\n\tdeprecated( \"select( 'core' ).hasUploadPermissions()\", {\n\t\talternative: \"select( 'core' ).canUser( 'create', 'media' )\",\n\t} );\n\tyield* canUser( 'create', 'media' );\n}\n\n/**\n * Checks whether the current user can perform the given action on the given\n * REST resource.\n *\n * @param {string}  action   Action to check. One of: 'create', 'read', 'update',\n *                           'delete'.\n * @param {string}  resource REST resource to check, e.g. 'media' or 'posts'.\n * @param {?string} id       ID of the rest resource to check.\n */\nexport function* canUser( action, resource, id ) {\n\tconst methods = {\n\t\tcreate: 'POST',\n\t\tread: 'GET',\n\t\tupdate: 'PUT',\n\t\tdelete: 'DELETE',\n\t};\n\n\tconst method = methods[ action ];\n\tif ( ! method ) {\n\t\tthrow new Error( `'${ action }' is not a valid action.` );\n\t}\n\n\tconst path = id ? `/wp/v2/${ resource }/${ id }` : `/wp/v2/${ resource }`;\n\n\tlet response;\n\ttry {\n\t\tresponse = yield apiFetch( {\n\t\t\tpath,\n\t\t\t// Ideally this would always be an OPTIONS request, but unfortunately there's\n\t\t\t// a bug in the REST API which causes the Allow header to not be sent on\n\t\t\t// OPTIONS requests to /posts/:id routes.\n\t\t\t// https://core.trac.wordpress.org/ticket/45753\n\t\t\tmethod: id ? 'GET' : 'OPTIONS',\n\t\t\tparse: false,\n\t\t} );\n\t} catch ( error ) {\n\t\t// Do nothing if our OPTIONS request comes back with an API error (4xx or\n\t\t// 5xx). The previously determined isAllowed value will remain in the store.\n\t\treturn;\n\t}\n\n\tlet allowHeader;\n\tif ( hasIn( response, [ 'headers', 'get' ] ) ) {\n\t\t// If the request is fetched using the fetch api, the header can be\n\t\t// retrieved using the 'get' method.\n\t\tallowHeader = response.headers.get( 'allow' );\n\t} else {\n\t\t// If the request was preloaded server-side and is returned by the\n\t\t// preloading middleware, the header will be a simple property.\n\t\tallowHeader = get( response, [ 'headers', 'Allow' ], '' );\n\t}\n\n\tconst key = compact( [ action, resource, id ] ).join( '/' );\n\tconst isAllowed = includes( allowHeader, method );\n\tyield receiveUserPermission( key, isAllowed );\n}\n\n/**\n * Request autosave data from the REST API.\n *\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n */\nexport function* getAutosaves( postType, postId ) {\n\tconst { rest_base: restBase } = yield controls.resolveSelect(\n\t\t'core',\n\t\t'getPostType',\n\t\tpostType\n\t);\n\tconst autosaves = yield apiFetch( {\n\t\tpath: `/wp/v2/${ restBase }/${ postId }/autosaves?context=edit`,\n\t} );\n\n\tif ( autosaves && autosaves.length ) {\n\t\tyield receiveAutosaves( postId, autosaves );\n\t}\n}\n\n/**\n * Request autosave data from the REST API.\n *\n * This resolver exists to ensure the underlying autosaves are fetched via\n * `getAutosaves` when a call to the `getAutosave` selector is made.\n *\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n */\nexport function* getAutosave( postType, postId ) {\n\tyield controls.resolveSelect( 'core', 'getAutosaves', postType, postId );\n}\n\n/**\n * Retrieve the frontend template used for a given link.\n *\n * @param {string} link  Link.\n */\nexport function* __experimentalGetTemplateForLink( link ) {\n\t// Ideally this should be using an apiFetch call\n\t// We could potentially do so by adding a \"filter\" to the `wp_template` end point.\n\t// Also it seems the returned object is not a regular REST API post type.\n\tconst template = yield regularFetch(\n\t\taddQueryArgs( link, {\n\t\t\t'_wp-find-template': true,\n\t\t} )\n\t);\n\n\tif ( template === null ) {\n\t\treturn;\n\t}\n\n\tyield getEntityRecord( 'postType', 'wp_template', template.id );\n\tconst record = yield controls.select(\n\t\t'core',\n\t\t'getEntityRecord',\n\t\t'postType',\n\t\t'wp_template',\n\t\ttemplate.id\n\t);\n\n\tif ( record ) {\n\t\tyield receiveEntityRecords( 'postType', 'wp_template', [ record ], {\n\t\t\t'find-template': link,\n\t\t} );\n\t}\n}\n"]}